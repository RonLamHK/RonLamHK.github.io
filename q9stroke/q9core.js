var obj;
var t = '';
var tempflag = 1;
var a42flag = 0;
var jflag = 0;
var lianxiangcount = 0;
var count = 0;
var flag = 0;
var kflag = 0;
var xflag = 0;
var buflag = 0;
var bbuflag = 0;
var lzy = 0;
var eri = 0;
var yrawText = '';
var nflag = 0;
var zflag = 0;
var bflag = 0;
var sbflag = 0;
var sflag = 0;
var lflag = 0;
var lianxiang = "";
var q9idx = "";
var q9relidx = "";
var q9data = "";
var q9rel = "";
var spacechar = "";
var q9dataok = 0;
var q9relok = 0;
var q9coreok = 0;
var Q9StrokeNonFiveStrokeMode = 0;
var Q9StrokeDifficultCharacterMode = 0;
var eventType = 0;
var keypadEventMode = 0;
var selectCharMode = 0;
var kLookUpModeRestart = 1;
var kLookUpModePrevious = 2;
var kLookUpModeNext = 3;
var klookUpModeNextLoopBackIndex = 0;
var kLevelSeparator = ".";
var kMonitorTime = 100;
var pyIndex = 0;
var rawText = "";
var Q9StrokeNextPageMode = 0;
var PreviousPage = 0;
var curPage = 0;
var seekText = "";
var target;
var curCharPage;
var q9_s;
var q9_s2;
var q9_s3;
var q9_s5;
var q9_n;
var q9_x;
var q9_xz;
var q9 = new Array(10);
var q9K = new Array(10);
var PreviousKeyCode = "";
var layerStyleRef;
var layerRef;
var styleSwitch;
var q9picSwitch;
var q9formSwitch;
var bName = navigator.appName;
var bVer = parseInt(navigator.appVersion);
var NS4 = (bName == "Netscape" && bVer >= 4);
var IE4 = (bName == "Microsoft Internet Explorer" && bVer >= 4);
var SF5 = navigator.userAgent.indexOf('Safari');
var timerID = 0;
var monitorTimer = 0;
var q9TargetWin = "";
var Q9StrokeIME;
var Q9IME;
var PYIME;
var CYIME;
var FileMapping = "466852";
var uctsc = 0;
if (!(IE4 || NS4)) {
    alert("This version needs IE4 or NS4");
    window.close()
}
if (NS4) {
    if (bVer >= 5) {
        q9formSwitch = "document.q9form"
    } else {
        layerStyleRef = "layer.";
        layerRef = "document.layers";
        styleSwitch = "";
        q9picSwitch = "document.q9pic.document.images";
        q9formSwitch = "document.q9char.document.q9form"
    }
} else {
    layerStyleRef = "layer.style.";
    layerRef = "document.all";
    styleSwitch = ".style";
    q9picSwitch = "document";
    q9formSwitch = "document.all.q9form"
}

function getid(layerid) {
    obj = document.getElementById(layerid);
    return obj
}

function InitQ9() {
    serverURL = eval(q9formSwitch + ".serverurl.value");
    graphicPath = serverURL + "../grx/";
    Q9StrokeIME = (eval(q9formSwitch + ".ime.value") == "q9stroke");
    Q9IME = (eval(q9formSwitch + ".ime.value") == "q9");
    PYIME = (eval(q9formSwitch + ".ime.value") == "py");
    CYIME = (eval(q9formSwitch + ".ime.value") == "cy");
    q9_s = new Image();
    q9_s1 = new Image();
    q9_s2 = new Image();
    q9_n = new Image();
    q9_s3 = new Image();
    q9_s4 = new Image();
    q9_h1 = new Image();
    q9_h2 = new Image();
    q9_x = new Image();
    q9_xz = new Image();
    if (Q9IME) {
        q9_x.src = graphicPath + "q9_x.png";
        q9_xz.src = graphicPath + "q9_xz.png";
        q9_s.src = graphicPath + "q9_s.png";
        q9_s2.src = graphicPath + "q9_s2.png";
        q9_n.src = graphicPath + "q9_n.png";
        prefix = "q9_";
        if (eval(q9formSwitch + ".charset.value") == "sc") {
            suffix = ".png"
        } else {
            suffix = ".png"
        }
    } else if (PYIME) {
        q9_x.src = graphicPath + "q9_x.png";
        q9_xz.src = graphicPath + "q9_xz.png";
        q9_s.src = graphicPath + "py1.png";
        q9_s2.src = graphicPath + "py2.png";
        q9_s3.src = graphicPath + "py0.png";
        q9_n.src = graphicPath + "py_n.png";
        prefix = "py3_";
        suffix = ".png"
    } else if (CYIME) {
        q9_x.src = graphicPath + "q9_x.png";
        q9_xz.src = graphicPath + "q9_xzz.png";
        q9_s.src = graphicPath + "cy_0.png";
        q9_s2.src = graphicPath + "cy_1.png";
        q9_s3.src = graphicPath + "cy_2.png";
        q9_n.src = graphicPath + "cy_n.png";
        prefix = "cy_";
        suffix = ".png"
    } else {
        q9_xz.src = graphicPath + "stroke_s21.png";
        q9_x.src = graphicPath + "stroke_x.png";
        q9_s.src = graphicPath + "stroke_s.png";
        q9_s1.src = graphicPath + "stroke_s1.png";
        q9_s2.src = graphicPath + "stroke_s2.png";
        q9_s3.src = graphicPath + "stroke_s3.png";
        q9_s4.src = graphicPath + "stroke_s4.png";
        q9_n.src = graphicPath + "stroke_n.png";
        q9_h1.src = graphicPath + "stroke_h1.png";
        q9_h2.src = graphicPath + "stroke_h2.png";
        prefix = "stroke_";
        Kprefix = "strokeK_";
        suffix = ".png"
    }
    for (i = 0; i <= 9; i++) {
        q9[i] = new Image();
        if ((i >= 4 && i <= 9 && i != 6) && (NS4)) {
            if (Q9StrokeIME) {
                q9[i].src = graphicPath + 'nc' + prefix + i + suffix
            } else {
                q9[i].src = graphicPath + prefix + i + suffix
            }
        } else {
            q9[i].src = graphicPath + prefix + i + suffix;
            if (Q9StrokeIME) {
                if (i >= 4 && i <= 9 && i != 6) {
                    q9K[i] = new Image();
                    if (NS4) {
                        q9K[i].src = graphicPath + 'nc' + Kprefix + i + suffix
                    } else {
                        q9K[i].src = graphicPath + Kprefix + i + suffix
                    }
                }
            }
        }
    }
    if (NS4 && bVer >= 5) {
        eval("getid('q9load').style.visibility='hidden'")
    } else {
        eval(layerRef + '["q9load"]' + styleSwitch + '.visibility="hidden"')
    }
    DoRedraw();
    q9coreok = 1;
    if (NS4 && bVer < 5) {
        layerref = 'document.layers["q9dataLayer"].document.layers["q9dataFrame"]'
    } else if (!NS4) {
        layerref = 'q9dataFrame'
    }
    if ((NS4 && bVer < 5) || !NS4) {
        eval('q9idx =' + layerref + '.document.q9dataform.q9idx.value')
    }
    if (NS4 && Q9StrokeIME && bVer < 5) {
        q9idx = "AAAAAJAAbAAtABLABdABvACNACfACxADPADYAEZAVmAYQAZiAahAahAajAakAakAakAbRAbUAbbAbrAhvAhvAhvAhvAhvAhvAjTAkuAlVAnLAonAonAonAonAonAonAwIAwRAxYBAdBBIBBIBBIBBIBBIBBIBCbBDDBDUBDxBETBETBETBETBETBETBGwBIcBKeBLcBMiBNCBNTBNUBNcBNcBRCBSrBWJBYwBadBaoBaoBaoBbFBbFBcVBczBeEBesBfSBfWBfYBfYBfbBfbBgNBgaBhyBiFBiPBiQBiSBiSBiSBiSBiSBiSBiSBiSBiSBiSBiSBiSBiSBiSBjqBksBmcBnPBoTBoZBogBogBooBooBzTCFhCSjCYcCelCfUCgGCgNChKChKCixCjtCljCmZCnJCnOCnVCnVCndCndCndCndCnfCnfCniCniCniCniCniCniCoGCoMCozCpFCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCpaCqTCqwCrxCsFCsfCsiCsiCsiCsiCsiCsmCsmCsoCsoCspCspCspCspCspCspCsqCsqCsrCsrCsrCsrCsrCsrCsrCsrCsrCsuCtECtGCtHCtHCtHCtHCtHCtHDBjDIGDQHDVEDYpDZCDZeDZfDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDaHDbLDcIDiNDjSDjyDkCDkGDkGDkKDkKDneDpUDsmDuhDwcDwqDwyDwyDxQDxQDyGDyaDzrEAQEAgEAgEAhEAiEAkEAkEEDEGVEKBELoENkENsEOLEOMEOeEOeERjEToEXEEZAEbBEbIEbVEbVEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEbiEeIEfQEigEjuElLElSElbElcEliEliEnIEoMEpaEqSEqrEqxErDErEErIErIEsiEtqEvZExGExyEyFEyLEyLEySEySFEPFITFNiFRDFTUFTqFUUFUYFVEFVEFXCFYmFavFbsFdEFdQFdXFdYFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFddFdxFeNFelFfKFflFfnFfnFfnFfnFfnFguFhLFiIFinFjIFjJFjKFjKFjNFjNFkqFmAFnUFoUFpLFpgFpnFpnFpyFpyFqPFqTFrLFrTFrqFrqFrqFrqFrqFrqFtFFuOFvrFxAFyOFyUFyVFyVFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyhFyiFyiFyiFyjFyjFyrGAHGAjGAlGAtGAtGAtGAtGAtGAtGCDGCmGDgGEUGFiGFlGFoGFoGFqGFqGGNGGZGGdGHHGHnGHnGHoGHoGHoGHoGIOGIOGIWGIbGIdGIdGIdGIdGIdGIdGIuGJHGJOGJZGJeGJeGJeGJeGJeGJeGJjGJmGJpGJqGJvGJyGJyGJyGJyGJyGKAGKCGKFGKFGKFGKGGKGGKGGKGGKGGKGGKGGKGGKGGKGGKGGKGGKGGKGGKGGKHGKHGKIGKJGKJGKJGKJGKJGKJGKJGKJGKJGKJGKJGKJGKJGKJGKJGKJGKJGKJGKKGKLGKNGKOGKOGKOGKOGKOGKOGKOGKOGKPGKQGKTGKTGKTGKTGKTGKTGKTGKUGKdGKdGKdGKdGKdGKdGKdGKdGKdGKdGKfGKfGKfGKfGKfGKfGKfGKfGKfGKfGKgGKgGKgGKgGKgGKgGKgGKgGKhGKiGKlGKlGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKoGKpGKpGKpGKpGKpGKpGKpGKpGKpGKpGKpGKpGKpGKpGKpGKpGKpGKpGKqGKqGKqGKqGKqGKqGKqGKqGKqGKqGKqGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKrGKtGKuGKwGKwGKwGKwGKwGKwGKwGKwGKwGKwGKwGKxGKxGKxGKxGKxGKxGKxGKyzGNbGOhGQxGRsGSqGSvGSyGSyGTDGTQGXOGZGGbqGdiGfFGfRGfiGfmGgBGhFGhIGhJGhJGhJGhMGhMGhMGhMGhMGhNGjcGlGGntGpSGqiGqrGrBGrEGrYGsXGtOGthGuZGuuGvJGvLGvOGvOGvRGvrGvzGwAGwLGwPGwUGwUGwUGwUGwVGxOGxOGxPGxUGxUGxVGxVGxVGxVGxVGzCGzrHAMHBAHBXHBpHBqHBtHBtHByHCpHFpHHoHKkHMQHNeHNlHODHOEHOUHOuHQCHQmHRmHSKHSuHSwHSyHSyHTBHTJHTMHTSHTWHTWHTaHTaHTaHTaHTaHTjHUOHUmHVYHVyHWJHWLHWMHWMHWOHWZHWtHWzHXQHXXHXdHXeHXgHXgHXhHaKHaLHaNHaRHaSHaVHaVHaVHaVHaVHdRHdRHdRHdRHdRHdRHdRHdRHdRHdRHdSHfBHfoHhOHiLHioHitHjAHjBHjGHjtHjyHkBHkJHkbHkdHkeHkeHkeHkeHkhHkhHkhHkjHkjHklHklHklHklHklHkqHkrHksHkxHkxHkxHkxHkxHkxHkxHkzHmMHnSHolHpqHqzHrFHrGHrGHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrSHrS";
        q9data = "你這好到資就個能的   ! \"不一 #有大在要可來下天電工而真 $ % &是中 '上國同小當因長少回水常見 ( ) *我人 +為學用看生自無年愛與分手 , - '為交 /文之心前情方高主性美快弟 0 1 2了也 3子台發力女已民書參畫飛乙只國因回員兄口另品圖團園足吳呆圍圓困華著若花萬共黃英夢落苦幕蘭舊草莫藝葉第等管算笑答節簡篇簽筆策笨範籃符箱籍家定實它完字空寫容安究室案賽客害寶宜！：；。，、—？…天三二式表王元示武責青春夫毒麗素奏弄丟玉井干泰于戒云奉秦蠢吞貳匡丰戎亍盂砉纛黿舂未末匭玊亓耒丼惷烎昋冓蚕憃要可來下工真其或更事甚基者正再車長十才兩老東區考直西五世求支馬共黃專南票哥某古克雨惡亞束索惠豆覆耳丁惑麥巷恭革吾甘巫貢孝轟丙寸燕臣煮曹匪辜昔焉栗囊廿甫賈匣丐聶朮堇吏蠹噩卉汞矗酉匱粟棗巿匝彧忑耆賁柬卌叵堊覃諅耄去本喜士臺走李賣查志土木幸吉載嘉森戴裁赤截壽哉喪杰壹寺堯袁壺栽圭杏垚熹嗇杳恚壼柰毐盍尃蛬孛朿鬲鞷覈翥橐綦馽耋蛓怷燾覂盚疐匽奊驫惎馵桽酨匰鼁丏鷰夌拲鼖櫜蟗貰輂襾鼒胾耇桼蝁壴臷坴鼀賚垔匷薌鶿茿蒴華著若花萬英夢落苦幕蘭舊草莫藝葉薦藍藏蓋藥蔡蘇蒼茶芳菜莊蕭藉蓮慕葛藤薩芬菩荒莉蒙艾薪菲蔣萊茫薄惹莎荷芒茂苗蓉暮茲芭萍蘋菁墓董蕩芝苑募薰蒂范菊蘊薇蓄葬蓬蕾葡蒸菌蘿萄蕃薯薛芷繭芙芋茵苛荳蕉芽蔚蔔蔥葵蔽蘆茹菱蔭芸菸蒐萱葦孽萃苟蕙芹茅蕊莽蔓茍萎莖茜蓓蔑菇莓茁蒞藐莒芥苔驀茄苓藻薔藹茉葭蒲蒹茱葔蔬荼莘薑藩萌芯荐蒜蕪葳葷蓊藺葫荻茗葾摹蔗蓁葆苯萼蔫莞藕芮菠苞荃荀蒨薏荏茸葯萏菡芎蕨薈菅蓀蕤莠葩芩菀菫荔藪蔻苳菈蓑芊苹葄蓼蔘虌棻蕎芍蕁葚蕘萩莢芴荇萹蓆茪荎藷萋茨茯蘑葑苧茼萵蒿苒苻苤芫芃菾荖苠薜蓳蕞荺薨苣薊蕈薾蒔芡薙苺苜苾茩萸葥茆蘚菘芼茦莪蕓苡芵蘸荂萁茬藜莆爇茷蘴葀芨蘶蒡蘄菻虀茖薴蘺蘢芾菺茠萛蔇萲菖藿蘅芢茈蓽葅蕫蓷荍菴菑莤苭蒺萣荈茴芞菽荽荑瞢蔎藈蔌蔧蓍葽蔦蘮蕣蓰菟萓荋蒫藑蘞虆菔茀蕗蔆蘦菰薟蘼莿蘜葙菢蕖萿蘀萳苕蘗蔀蘉菉蠆荓薱芧蕹莩莧蔯蘁葴芣蔞菆茳蕅蓿薐蕼藅菳蕔薣莮莁葺芺藲羋苫薵薀莙荅薶蓅芟茧萺菞蓛葒蓎苖藭蒱荴蕄藰蒪蓺蘙蓹蕕蕻莨茛莐薅苰蔂蘳藯葶藀茌莗苵藎虃荸苬菋菃藋蘛藫甍菗蔱藢藃蕆蔨葧萑藆荵蘘莇蒑薕茤蕑荁薃菏藬葌薖萒蒤菂芏萫蔒蔋蕬艼茙蒬藣蓻蔜蒻蕸蒗蒩苀蘟蔟蘲葐菙莌藂藸躠蒟蘪葟蕥躉蓇藗菥莛蕀薚葰苲菶薺蕝菵茥菛葨蓐蓧蓲芐芓荄蔈蘩薷蕵菣菼藾蔠薧葇菪藘蘾蕠荌苴蘵葃雚薡茞蕮莍蓗薳艽蒍菧莰藨苨葮菝蕛葖薢藙蕷芄薝薤蓯蓪蒛蕇荿苪薍莣蔍芶菹薹蔙蘹蓫萭蔏蕡菄茢蓒薽藄蘧芠蘠蒏莏苃蘣葹蒘苙菕萆莋葸芰萷蒶蕱芑雈菬菮薸蒎蓖蔾薘莦莥艿芚蓌蔝薎菨蘱蔰藱莚蓂薠蓶藡蓨藚蘌蒝葝蒧蕧藽薞藶薂苂藒薋蓔蕍蔉莃萐蔪蓏蒚藞蓩蒠蘥蕺藦莔蘬萇虈蔤葋葍茺萯菿蒮莯芅薁葎茭芛萶蔮芤蔖蒢蘤葠莕茇蕦蒆蓱蒰萻葂莝萉葞藟蘻荾菎薿苶蕢蓾蔊蔩虇芀虋蘡萰蓴萴薉莈蔕芘菤藇蕶薆而面太友否死帶奇百存左右石爾爽套尤布夏頁憂奈丌奮灰奔奪盃耍夾丈歪匹歹犬磊匠奢卅奎盔奄夸兀甭璽丕万冇夯匾泵兀豕奭尢廾戛成感原壓歷威厭盛厲厚辱曆戚雁辰唇仄厄愿戌厝戊靨厥咸厘蜃魘蹙戍慼厎脣贗饜犮孬厒奓厞厤奀尨耎奡鴈厧耷奩蟨厜嬮猋夒夼蠠厴厬匼厙恧厖厂匢厏鷢厊奫黶厗羍厔磿豖觱奅電平需雲靈雷雪露零霸震霧霹靂雯霖匯霜霞霉霍霆霄霈霓霎霏靄霾雱雩霽雹忒霑霪霰霙霮雰靋霂霅霬雽靇霢霨雺霦霘霤雵霠霫靃霥雿匟霐霺霣霋雸霵霿霟霝霯霩區至七巨互牙妻瓦臣晉匪旨匯匹戈匿貳盞夷匠匡匣屯裘匕弋亙匱匝鳶匾旡叵匭戔慝与匴疌匽戉匰匟螶匼匜巠匚匢貣匷匿慝匴長處卡步歲止慮虎虛肯桌齒貞膚占卓盧虐凸虞虔睿虜忐鹵婓豦虍鬳虖虙卣虡業叢黹小少省尖劣雀尐當常光黨堂尚賞掌嘗卜肖棠裳党瓽牚因回水見由內目且央圖黑曲團園具貴史典肉冊申圍忠圓困豐貝骨蟲固恩農圈串曰墨虫患鼎岡凸囡凹巾囚鴦曳淼盎冉囝蠱罔贔圃囤皿婁豊盅圜囿沓囥黽冑网囹囫圇圄最果日四買男山星思界量早易畢羅眾甲里田異壘暴景罵置罪罷累暑冒昇崇岸昌罰幽豈晶旦晨署曼嵐嶺愚晃昆罩崗胃昂昱岩疊畏暈崩崔蜀崙崖崑巍巖祟旻炭曇冕羈嶽巔嵩嶄罣旱晏罹岑昊毘崁嵌崧昴睪岌罡昃畀崽崴晟曷晷纍曩岦炅禺嶔罍勗峇囗詈晁嵅畾杲崟罝崒羆昜峟胄礨昺罟罘峎羃罻櫐晜罿呇羇嵬罳罬嵹狊罽囧崀罛峞暠嶈謈甹峛羉晸崋罜峚嶊岝兕峉耑瞏旯嵿旵嶪罥輋崶罾罭嶡禸晑嵂咼冔圂嶉囮冏罠崮罦嵙嶚囷圉罼丳圊嶯圛曏雟巋岧岢巃崱崣奰嶜嶭旲罞圚罧昮圔罨濷岕巂圌圁昦圞畟峷罺崺罶嵾嶲慁巀褁嶷嵀罫岪屴只員兄口另品足吳呆呂吊呈邑肙咠喦喿嵒碞看生無年手每先怎告重氣失千舞牛午靠毛升乖朱乘喬氛垂舌吞氧矢秉乞乍夭氫氮氯壬忝氨氟氦氰熏氖氡氘氤香委季秀禿禾黍氬氳掱气缶氝眚毳馫氥橆氪乇忥氙盉氚复缹臿氕氠自與覺身片向興白兒集息舉鳥兵隻血售鬼島鼠川皇烏奧臭泉焦鼻譽岳卑丘釁舅輿皂粵禹裊雋梟臼乒乓隹黌阜帛囪臬皋舋鳧礜鷽峊鱟睾灥壆皁澩鸒囟觷璺爨蛗燢皛帠轝嶴爂臮礐嚳雥嶨反房扁戶瓜盾后舟扇肩斥斤爪雇扉戾戽彳垕扆卮甪鴔虒扃扊扂愛分公入希受八乎爭父兮爸番谷悉乏翁采爺兇爵妥貧覓盆爹凶舜斧忿岔兌奚孚爻釆爰釜舀肏肴豸會全合今金命拿念舍令介含食愈企貪余盒倉傘鑫禽俞侖仝畬佘翕衾龕乂樖坌酓弅弚屳嵞瓮尒畣仚僉悆弇龠鏎峹盦鬯汆炃及月七包九句周忽丸勿昏丹氏么欠勾匆甩旬勻甸匈芻鼐勺氐匍蠡匐多名鳳凰系各風色象久魚角免負急凡危龜冬魯朵夕兔詹几灸炙夙夤夆奐螽訇殳勼炰甮儿匋鄅曶敻匑匒匉匊旮尕厹毚匎方高主市六夜商忘產育率亦亮充享棄衣豪贏亡哀京齊牽齋毫彥玄亨吝卒衷衰妄盲亭襄裹奕膏脊畜亥裔烹亢紊稟褻褒雍嬴甕卞肓壅袞亳羸弈衁兗巟麼章意應音立度言底竟座廣魔帝痛康病廠店府麻旁鷹序慶廳瘋辛童廢塵席癡摩庫床庭庸廖唐痴磨症療廉疼鹿痕廁疲腐疾廟龐瘟癢痞癮瘦廂廚癌疫廊癒庚疤庄疵廓廈痘廬廝靡瘤疚瘡癱痊庶痲瘖癖疹癥妾膺庇瘀瘓痔痠瘴痺癲疙瘩庵庠痣麾痰糜癟瘍痧啻癩癈瘁痢疝庖瘐鏖痍庾瘠癬痾瘉犘庛廌麤麋廄痹痂庳瘧麝庹疥瘸痱廕痟癘痒痼痿瘜痐疪癆痳癤廋袤麂廩麚廆癇廎庥褭縻賡忞疽疺痌痁疸麃癰庤痤瘃麠离痷瘌庬廔瘚痭痚麔鸁疕疔疣癙瘼瘕亹庈齎庰褱麑蠯齌穈黀瘳杗痗裒痋癭癵痝廒爢廨瘛袬饔庴癉庋庱麌瘥袌齍臝蠃痀疻廡瘺庮裛廯褎痎庨麈廇瘢癃塺瘰癗痡褢麎廧瘣疘庀癠亶麆瘽癐庂庢疰癪癜庪廗瘔疢瘊黂疳廛螷麀痏麛齏廞瘨痯瘭瘞瘱廦痵麡廥痻廑廲疧緳瘝痄廅帟麍麜麇疶疿痑瘙庌瘲庣賌庲痸瘑瘯袲痦瘵痽癚庉廘廙廱庍廜麙癓瘏瘈廮痶罋情性快怪怕慢懷懂忙前美弟並義曾差半火首善養普益尊米卷羊拳慈兼剪炎羞羨眷煎券并姜糞羔羹丫奠羲恙燊羡羌翦孳夔焱牶鯗帣羛韏烡麊絭觠弮齤蠤齹羕羑斗酋遴燊宜官豢宎宧家定實它完字空寫容安究室案賽客害寶守密宿宗突寄宣穿窗富察宮宏宇寒寂寧憲寢塞宋審寞寬穹宙窩窮蜜賓牢寡宵寮宅宰穴寵竊宴寓窄宛寇竅窟窈窺窕寰竄寥窘竇窯窒寐寅寨窠窿窪宦甯宥宸窖帘宕寤寑騫窆蹇窳寘宄宬寍窅寯窣搴寣褰穻窾謇寙窶宒賨窐窏穵窴宭窸窬宨窇窊寀鶱窷窵寎寪寲寋寖竁窲寊窢窉窋穸惌窌窀窱宁竀窙窞寱寔寁窨穾寠窔窫悹必軍永良房扁冠戶扇肩冥冤罕冗雇扉戾扈戽冢冪扆惢扃扊扂冘冞鼏繠橤已民書畫費盡司尋君尹肅弓弗刁晝巳弔聿蝨臧帚艮己展局屬居層尼屆尾屋尺屁忌屠屏屍屈尿屑屎履屢犀屐屜屌尸尻屄屣屙羼孱夬屝屨屇盄屪屭焄屧异屖臦丮屩衋賮巴承蛋眉函孟韋疋亟丞丑胥卍爿孑孓氶出蚩芔巹岊屮烝舝脀凵丱力女飛皮刀忍乃召盈脅孕姦刃虱劦夃姭參登勇柔予矛允矣凳怠牟癸恿甬弁畚又桑叉蚤炱矞圣絫蟊癹軬貵枲母承孟貫災毋巢彙亟丞孑孓乜彝彘糸彖毌邕甾彔盝呆呈咠嗎啊呵呀哇味嘻喵嘴嚇喊噴吐嘆唷咦哎噁叮吋唔嘎咕啞嗜喃呃嘔哄啄嘩吠噸噎呸嚨哺吱噶嘖咻咐嗔嚥叱咁嗦喳吁哮哽囈喋噠嚏嗝嘈噤嘹嗄嗑哧咭囁哂喏咂囔嗒囀咾噘吨唪唵嚅嗉呔嚘咑囌嚄嘜噆嚆哢吥嘵啀唻嗏嘌嗊喱呠嚾咺嘾啿啑啈嚬喍呯嘁啢咘唭嚦唒唊咡呿喕嘕吪咥喓嗹嗼荶唗嗕噈吰囆哱唶哤嘒足呂吊肙單器唱嗯嚴囉嘿喝咧哭哩吵喇咖唬啡喂咒囂噹噓噪嚐呻嘍吶喘哨嗶啃噱嗤咽噗咄咀嗩唄呷喟嚶喎噥嘳嚙嘓喌呺嚧唦嘬嚜唎喁嘪咢哃嗺呬哫嚚嚗呫喒鼉唈嘽嚪噦嗢噣呾噮啅哻噳呥嚫斝嚃喚呈哈吃嗚啥哦呼唯吸唸吹啪咱叭鳴嗨吟喚吻喻喲嘸嘲咚唾啤噢嚕呱嘶嚼嗡喙咆嗆嗽噬吽噯吩咯嗔嗅叱嗖唏吒咋嗷哆嗲唅听啕喢噉啁哖呴哠噲噙呤嗾嗥啗噭囋啋唌啽喣喤呏吘咷嗿嘄嘺吤嚽嗍哷咰呁哳唹唋嗂嚵鷕唑吪噞唃唲噷哸囃噅咶呧嚂哅咮啦嘛咪咬咳哼喧迦逞啼嚷喀吭嚎啾噫嚀咩嗙嗟嘮啐嘀啖唳嚓喑嗐噌嚝啍呅唁喨噂嘧啶嚌噰嗌唴嘝咇喭唼喥吙嗃噾嗛吳邑吧呢叫哪喔唉呦嘟鄙喉嘯吼叩嘰唆呎嗓嗈囑咿叨吮喈哞啜吆唧喫啵唰叼呣啷啣囓咈呲呶叻唚吇噀嘐喡吜啒咍吷噿嗋嚁呡嚍哏噊噚嚴喦喿嵒碞單器哭咖咒囂噪喌呺咢哫嚚鼉唈斝喵哎哄嘩噶嚥囈喏嗒囌嚄嚆嗏嚾嗼荶囆噬喀喧嚀嚓嗐嘧啶噾苦藝葉藍藏蓋藉巷恭萊惹燕茂菁昔葬蕾芙芋苛荳芽菱芸蕙莽莖茜薔茉薑荐蒜葳葫蓁苯蔫藕茸蕨蕤菫菈苹葚蕘莢荎葑苤芫菾荖蓳荺苣蕈薾菘茦蕓蘸荂萁茬莆爇葀菻蛬藿蓷菴莤荑蔌蔧蓍葽荋蘦莿蘜葙菢蘀萳蘁葴芣菆蕼蕔薣莁藲羋薵蓛蒱荴蒪蓺蘙蘳莗荸蘛菗蕆葧荁芏艼茙蓻蔜鷰藂藸蕥茿菥拲蕀薚菶茥蓐蓲芐蔈薷菣藾蘾蘵茞莍莰菝薤輂荿苪薹蕡菄茢蓒薽藄莏苃蘣芰芚藚蒝葝蒧薞藶萐蔪蒚藞萇葍菿芅萶莕茇蒆蘻薿萰蓴蔕蕶幕蘭草莫慕葛菲苗暮蘋墓募菌蘿薯芷繭茵蘆蔓蔑驀萌藺摹芮藪茪茼萵苒蕞薨蒔苜蘴萛菖茈蓽茴菽瞢藈蘮虆蘉蠆薱莧蔞藅莮苫茧萺苖蕄蕻蔂苬甍蔨莇蕑藣蘲躉蓇菵菛葨藘苴葃薡蘧葸萷莦蔝薎莔萇蔮蔖藟菎蕢蓾蘡萴薉舊藥蔡蘇蒼茶菜藤芬莉艾荷董苑薰菊薇葡萄蕃薛蕉蔔蔥蒐孽苟芹茍萎蓓莓藐芥苓茱葔荼蕪蓊荻茗葾葆苞荃荀蒨荏萏薈莠葩芩苳芊葄棻蕎芍萩芴荇茯苻芃薊芡薙茩萸茆蘚芼莪藜茷芨蘶茖茠萲蘅芢葅荈芞荽蔦蕣蓰菟藑蘞菔薟莩薐菳芺荅薶芟菞藰蓹蕕茌苵蔱藢萑蒑茤菂萫蒩葐菙躠葟莛葰苲蓧蘩蕵蕮蓗艽葮蕛薢芄薝蓯薍芶萭菕萆莋蕱雈蓖蔾莥艿蓌蓨蘌蕧薂藒莃蓏蒠蘥蘬葋萯薁葎蘤葠蕦蒰葂莝萉苶虋藇薆落薦芳蓮菩荒蒙薪茫薄莎芒萍蕩芝蒂范蓄蓬蔽菸萃蕊蒞藻藹蒲蒹莘藩芯葷蔗菠薏蓑虌萹蓆藷茨蘑蒿苾葥蒡虀蘺蘢芾菺蕫蒺蔎蒫蔆蘼蕖萿蔀荓蕹茳蕅薀蓅蓎莨莐葶藀虃菃藫藃藆蘘薕薃菏薖萒蒤蔋蒬蕸蒗苀蔟莌蒟蘪藗薺荄菼薧蒴薳蒍菧藨藙蓪莣蔍菹蔙蘹蓫蔏芠蒏葹苙菬菮薸蒎薘菨蘱蔰藱蓂薠藡藽苂薋蓔蕍蔉藦茺蒮莯茭蓱萻蔊莈菤藥莊蕭薩蔣茲芭蘊蒸蔚葵茹蔭葦茅菇茁苔茄葭蔬葯菡芎蓀荔蓼蔘蕁萋苠薜苺苡芵蔇荍菑苭薌茀菰苕蘗菉芧蔯莙葒鶿茛薅苰藯藎藋荵藬葌蔒蕬蒻蘟蕝芓蔠葇蕠苨蕷蒛蘠蒘蒶芑莚蓩芛芤蒢葞荾虇芀芘莒萼蘄蕗葺菋雚蕇蓶蕺虈蓉萱莞菅菀蔻苧薴萣萓蓿藭菪荌葖蔤蔩策笨範籃箱籍築籌竿筠簧篤筑竺箋箍竽籟筐箝箕箴簸簌簪箸篋篝簟籉筴籀筭筮簐籜笎篻箐簳篕簭箂篿簝簠笻筘笄笁篥簀篲篚籈簎筀簼簊笴籗笸箌筇笓箑簙箖笛筒簣篡籮箇簍纂篾篳筧笘籣箘筲簢箅箵篹箾篎籚簹箎笪簂笚籔笝筸簽符筋籤箏籲篠筱笙篩笈籐筍簷筏筌篁篫籙篌籅篟笫笏箠篪笒笅筣篦籥篢簃篽笉筰簁篘筅笭笮筈籦筶簥箯籛筄笊箙筡笱箄簰笣籫篜箭籠簿簾筷籬笠箔簇篷簑筊宓篙籇箊籓篱箤籩筤笵篊笐籧篣篰籯簏篞篧箷篴簻簅笀箈簉簩簜筆簫笆篆筵笳笞笥篸笯籊筳篨笤簋篛簦笰筩箛笢簨箹竻笲筎簞簬筥篔簧箬箜筦簆室賽害寶守宗寄宣富宏宇寒憲塞宋賓寡寮寇寅寨宦宥宸宕騫蹇寘宬搴褰謇鶱寲寋宧宁寁宜官寂宙宵宴寓寰賨寊寔寠悹究客宿突穿窗察審穹窩窮牢宅穴寵竊窄宛竅窟窈窺窕竄窘竇窯窒窠窿窪窖帘寑窆窳宄窅寯窣宎穻窾寙窶宒窐窏穵窴窸窬宨窇窊寀窷窵寪竁窲窢窉窋穸惌窌窀窱竀窙窞窨穾窔窫密寧蜜宰甯寍寖安案寢寥寐寤寣宭寎寱宮寞寬球玩班琴慧替瑪琪頑琳瑟斑琦耕瑛瓏彗琵琶耘耨瑾璜琢輦璉珂頇珪玎珩瑮瑧璊琺珥瑱玳玨琖瑼玗珔頊瑊瑎瑹玤麉琫玼幵頛瓙耰耤瓛瓘璱珙玕瓁玶玵玡玭耟顜瓂珛珸玒耩玴瓀瓁現理型規環瑞刊刑璿璞琨瑣珈璀靚璟琥琍玷珞耦璩瓔瓃琲珅璫瑒琠琝瑁琩覯琄瓗耞珼覝刓虣珇耬璪珃珚槼珿珵耖琌瑆玾嫢珖形靜珍魂玫玲碧瑰珠耗瑜珊瓊珮瑤釐贅璇鵡玖瑚琇璁珀玠犛璐珣瓚鰲琱瑀璠珗螯獒玥鼇雃琁璦瑗玓琤珽敖聱瑱瑲玢璥玔鳽靘剺瑎氂玼珘瑔琈謷璡鳺鏊嫠驁摮玭瑽珨鳿璷漦珴璯玝鶄琋玸璈瑍鳱玬璵孷琀斄逛璃璋琉瑄迋琮玟迂琬琅琛靛玹琿琣瑢遘璘琰瑭璲瓖瑳璔耪琯瓋珓珌珫璾璭斠珶璸瑐珜瑏邦契玻瑋瑕耙璨邢瑙瑯璣琚琡璆挈珺琊蛪齧酆珒邧栔耡瑵瓅酈珧勣玿璅刱玦邞瑂耛恝璚璶郬邗璻琭璒耜邘洯珆絜觢珋瑑耔珝璕鄻珈琄耞璪珿珵瑛璜瑹瓘珙瓁瓂瑄琮琬靛瑢琯璸瑏聽頭轉輕騎項博麗巧頂輔麵驅輛鞋軒顛鞭輻甄醋轅酵騏棘揀兢頤軾韃驍酣驥酯韆馱戟驊醃韁軛戡甌輊顢軻醛驪驃酊城打找指林持標幫權棒概越技楚封模樹構批材樞禁械村杯振擾鼓搭域橫棋摸攝描拒填塔鬱抹杜捕拔坪植捷壢枝堪措椅棟柯櫃框拷掩埔桂捧赫枉拓槽扶攏枯垮堵攀柄杖棲墳頡檬樺撼拭槓梵焚搏楠杆檯拱朽挂扛樁懋楷挾揍壩摳擷抨扼棧抴撓梧桔擂垣桓椏婪揹撩麓坷樊橢梗捱槭摃槙栱拮堐椿捺柑枰榛揩拺桎榭埂栲埼囍撻槤搆揕攆橞摽柎捂坏柘摶柜橿櫪堎埥揠掅圬楝棱扙楂塽擣柸杠櫝櫺擭橈挳堰坯楙撗柩撚摡搢楛搕桁杇扞楮搽礬坩撢抾挎撅椷栳掁擖顳拊桍憖搷麩枒栖瞽捙鼙榑埡樄堙搹枺棈騋桱耵堶櫳栭杕騕抎軏赭駙槿杌扤驩抔挃欗栺楪攉桲豉鼛擩堜嚭垤輳聝椕檣梇酎扰掑榞欐搮醽醢抪酤槥栯堩瓨鞊桮塻檮棖棼靬軑擛檟堧杬梂挭枻槲壔輚醰騵楅顠榵埴鼕橝揲輀榡扜轃酐賾棽醹棤趌輤鞳樍鑋朼杅檴駥攃杹攦槫韇槆拵埜栫堛驖麮駤摵掗椹趬槱楏耾拑橭轋榪堞搟挬榗擫梀鼘埲橶猌轣橑搘樉柭坉欞塼捇醼赶鞤樠桋櫇樥檶橛楉驆駏駴橨轑聑聐挕尌搣醧軷棶攮榧驠騲墆堿樗軯榯挋栮櫮驔墐蠜趪捄靺扽枟榤韉靪駬欂垘栜輘栻櫧鞢撠顤揊掎塒楱榰僰掝圩轒醥摙醏墝榃椻埬枅聇塨馯壾聏梐軘檑駍撱轕檷轖轛釃駷枙梉摴軵鼞櫌樲楩榼鼚杙拻韄駹豇朾椼醆揇墂驦橪棫檒榎撦塛抏塥梪靾杶騹椓櫏轗梜枎圢榬樾頍揯桭枑騞犎榙壒醂櫹檚酠駓鼜靰壖镽櫙檽酺輁顴聖輯醒刺副融駛軸聘剋驢騁驛剌剽醞駟酮靼騾覲鞅轤醍醴驒提想相場檔掉排據樓楊擇趙趕掛址操抽揚擺損欄坦扯擋扣抄捐撐坤捉桿埋櫻攜攔撲棍棵趟揭摧赴樸柵拙卦押捏捍堤拐擱揣塌捌摟桐楞柚枷梢埸扑揖圳墟拈朴撮捫擄梖榻拽楨捆攫捎埕挹棹欉摑撂搵柺櫬櫚枴赧枵棑捵椳赨搰捰椇塭枳楫墁柷堝撋塤塏檉橾鸉擃坫朅輥酲抻摁榥梱堣壝抯聵杪樝堨擉柙墠梠揋驉橕棝枮攖槻堽攄櫑棖堈揧壚騠撣枘柤輞坱搨桫捑抇馹鞨梩壧軮槾趄摞韅撾墣攌轘樻椥揌敺塴駎揝桯覡埁桄輎欓趔駻敼椯檡騑捯趧挏靻檅醲樘檛栵柛垙赻柟壉梤棡塿欏攎剸騍轠軜聃梬醵掯樿趮掍柍欙梣覟攩騴赸捚捗赬鞜橖鞮趠覿釅刌楋檦坰駽駰輠堁楬墔騧榩埧柶騉鞻堮轀軹槶輵榿轐騔柦刲醳剒楒橍麷剚醠垌壛軦輲柮驨酟抰醭檌抩樏擐撊撌欈刵靷駧鞝棞堌榾墿欋梋鞙挸駉摫駔櫨蒯觀荊教期難政輸整故驗軟斯救擊歌幹敢攻恐輪朝散乾臨騙歐賴胡暫髮鬆酷飄聰臥監欺醜覽軌繫翰驕駁斬鹽歎鷗聆酌敷鬍轎駱馴毆酥甦鑒瓢鞏轍鞠酹駒塹鬚酪敕靴鵲鸝鬢酗驥髦酯軼聒醺靳鴣鬟髻斡醮鬃輓髯酢酚蹔鬘跫鞥駖軫酩鶇鞞靸歕醐騅指聲投格板換推執熱抓抱勢援授松堆塊播檢均擔梅批插括拍挑採析橋搖款折哲拖搬桃填槍搶拆托柏圾捨彬抵棚誓撿楓殼拾挺彭趨杉撒趁扮搜攤馨拘撕撤挫熬掙懿墊坎撫挽摯棉撇枚株攪掏扳樵搗掀赦擒蟄垢橄欖楷椎埠橡攬扒捶擻檻机圳踅塢槌穀揹掐杵榆搥拎攢垛麴坍螫埵捻檜栓掬埤槙墩樕楹坻拴槐坵摀捀罄撬揩捩椆揄攙梏擤櫓柢圴蜇圻掄橇扺撽皙晢杓掤枸挴扦榖櫸撘榫栘柞摰磬櫛檐梔栴摠捋堸桅挀掮趒壎挻轂扱縠欶耹墘趖鬈撟榦楜柝擼韾瞉椽搷欯擏髡甏楰捼髲蛩墼鶒髹棌騬棯檄攥栨榣埏酘椑搯捭埩坼輅蟴堭髭栝彀鋆梃樅搊栺捔捈駪桴縶櫡橎髣杋攕扻蜤馲愨拰棜楯鶠髷鏨銴搠鬅麭歖騇梌扥埆鶦鬒枍酴鴶鞫戁鷊揜歁槂檕趜軠摦髺梲銎柣軞駩柃鵏欃盩摥鵓楀焎鶘抈瓡豰梒楻騪颿欑朼埰檇軡醄騆杹棩騊騣鷅堄埶楥輖桵騶鏧槬鬕鷒槔扢堋揰鬙鬊杸髱慹堹槸桻赩毦樇坋鬺櫍驄騱醀挌硩髳櫼磛謦韐慦鞄髫鬗髧抸堬鬌壏鶝櫯枃鞔坅撳轓杽鬣蟿斮朳輍鳷挩嗀摐棇聸捊擳桸軓盬柉趓鷏搎扲輗扷軝馺輇扚鬎椴杴鬞枌騩釂榹趫杚墦靲构觳歅槄墽揘鬠攡趑极摲镻鷬髽堍漀麧抮髬撝柂捁垝檎軧鷙髶罊朢鏎鬤趍輹輴撖櫋垺掭坁埒摿赹擨槷梐挼聬鬄髟鷇鬑趀敔雗摓鬖槧靮梴椈棰豍檓鬐圪樧柊椸輣鶾驐駇髾輈悊惁抶檹輷騸駗墺鬋棆驧垥螜揈垀趲鞈枹栒坽擙趛臡鞂毊騜彯镺轞橁棔醙轚橔髼騺樦趎裚桷軱毄柧搋趡棦軗駣趭趏覅鬷朹垗鶆軥枆鬁駼枔摋榽梊拸馰揓謺鷘斳贄鷣塕螒扴鵱掜揗軨酕嗀埳鶧鷋鴱鷨鶜檠鸏氋蟼歡警敬驚擎鸛憼飌較連遠速達職述騙遭醉恥逼駐遷駝醇酬逗耿轄釀駭耽斟鞍迺邇逑驤逵鞦轆駢醚豌遶醣逋邐醯樣校接拉壞境按核增控搞擁抗揮探拼撞榜擴培垃摘挖捲擠梯擦摔壇坑柱抖趟坊枕撈棺擅掠檳檸榕樽壤梓搪塚搓塘梳榨拌樟墉杭櫥揪攘堉榷棕檀搧柿枋垓槁挓擰拄捩搾壕桹榚坨掞掂揃掖棓擗椄壙枓搐揂摭掮邁櫆抭酡醡楸驎搳酖醅栟埮轔迼擯揙椪垿醷楄騿搉撙墇搤騂摝橦棬埢椗驙槴聹攛檥駾捽柆塉檨檺攁榠椋褧攓聤赯欀搛抌捥掽柁櫠坢揥棪柼燅豏抆輆垟橠摍遫楑槉塙攐驞槦橯靽埌塶垶檁垸壈槎檤墑騚楁斢楴鞡醓掊捖摛挍橏櫰堷桉柲梑醨麶墫驓梡擿抃樴掟櫅軴椌輬橀輶揨駮黈楟垵壿槏樀摬揎攗墥榱榶塝塎橧橉醾駜榳椊輐埣榓楢趥騸鞚栚堔杺栦墡棎聜攇搒攠埻楦軶轙塓檖楌橩攍駺柈軿醝檍樆樈楎挔垞逽遳都取功聯耶配聊協緊聚堅賢賴勒酸韓勤騷翅驟馳熙勃肆駿娶艱豎輾靶腎輒輿勘靴驂馭軋軔輟掔鄢騄輜邯懃醱機地起把報超根趣極招椰握撥擬掃坡柳翹抬拋披劫扭抑札埃桶樑梭扎郝挨拂橘撰挪抒楣拯紮掘榔抉隸擲拚椒扔橙摺揉搔榴拇拗揆摻捅垠摒杞栩楔梆据棣趐揶坳堀擢柪杷扡掇撜樨枇轡亄抿柀圯墀嘏拫騮赳圮墱埇駸墎搌杼椲杻劼椽槨櫟挶堠鄞蚻郴垹擸摜鄑堳酀騃醁朸翮摷梛樼梮椔酏楗騽朻鄹柅邽鄄郖騥郠搚檞樔椐騤捸焣耴攳榍聈駃攭拹駋揤槢翲掫楖鞬楺駘鞣榐勩轏梫揟櫂鋻靿邿槮摎棴邳拶轢搦翸柌麰镼翿鞃駶醪坶抁搡邛驏擽輮軩赽埽騢棸郣赮欚楈埐酳埭柫鞀杝塯軺扠騝翉揵坭檭皾垏蜸扐鄟趯鞁櫞郚醊樛橚驈輑鞿棳赲邴掾坲郲圠轈墋柮捘勀棷鞎醑桾欘抳杈墈杍桏馻摨壣皵媐捃椵騛撏硻揳郙驌鞹聧轇婜郰埱趉鄸酄鄿鄚勸勱鄀聖輯驒操損扣捐捉拐枷揖埕挹柺枵枳楫柷塤檉橾酲墠梠撣椥桯樿趮釅駽堮軹軦鞙醋驊醛權模搭摸描塔措檬樺拱擭楛搽擖槿驩欗塻擛榵鞳檴攃槆樥楉騲韉欂轕韄榙壒櫹櫙撘櫛攥櫡擳橁樦駝轄鞍豌按控挖擦棺檳檸榕榨棕挓擰搾坨抭酡醡搳擯搉椗聹攛攓捥柁柼摍攐驞垸楁捖桉梡掟椌垵揎塎輐聜攇楦垞研碟硬碼豬碩耐殘礎殖砸磚頰硨砰殭碴尪磕礪磺礡砝皕豜燹砢櫫砵磲矸願揅硅砡礞豳顑硭矹殗硒硤殎碪殰攲硈磽礵硜碏礣磧碕磌碔殪殢礤砑磹碤砆矼磔殑豗磢殌礭礝硥豩碡豶豲磩礓殣顣砳戫殧磭礂礌碄殏豷碃列烈砂裂碳殃碘硝靦砷硐砧奲硯殞殂碣殫砅磞虺磪鴷磾劂豱鮤刳碨礹碅剢剞礑砠磥敧碭殟礧碢磑碙姴砯尳磠硱雄醫砍殊砲飆碑尬尷矽殲礁殉砥殤豨碉歿翳餮碓硃硼瓠殮殄斫匏砟硞砭矻碖鵪礄繄嫛礅欹豯硌礩殙砃硹磌殈鴯鷞綔砓砐鵸毻鷯鸍毉硊硢确碀鴮砱矺磼礸尥豟硾礛歾磈黳鵊硪殍瑿磻碫卼磝殠殀砏砎鴀鷖耏殦礉磃豵尰磎確迷磁碰逐碎碗遼礦磋磅硫磷碇殯碥迾磳砣殕砬礒硠硿礗遰磍殥迖豥豟磏碻碲迶礔礯碚砫碠磄砨破切礙郁碌砌磯殆碾礫豝豭殛砒砪磴勵翃碬鄏砩硉郕豤磡礥矷鄾磉郟肂硎硍殔磣磟奲殞殫磾礹磺礡礞硭礣礤碤碗碇殯砣硿礗磍殥靉霒靆鄠酃比皆頓穎頸蠶頃臻頤潁甌朁駂戩賾毖臸熲臹顈鬵坒粊毞到划鞘剄敺虣比醫致皆雅臨歐臥監覽鹽鴉鷗毆鑒鵡贀翳鴇攷煦繄嫛鶠鶛鶈毖盬毉鵛顈鴄黳坒瑿隿粊鷖毞逕迣迍迓巰逜切疑緊堅賢邪勁熙豎腎肄郅郾袃鋻蜸郪勓劻觺婜些此北戲背鬥頻鬧紫獻虧柴歧鹹冀顱鬨顰鬩貲齰鮆齬眥齻齜鬮歭鬫呰齛齮齔鈭齾虥胔祡歶齖甗飺顪甝齗非劇悲輩斐翡裴齪覷韭齟蜚曝覘奜餥齶剕贙劌齵齥覤齞敁齫棐敊虤以些此北背紫齡柴齣冀鹼雌彪髦貲鬟髻鮆鬃髯眥鬈歔齻齜髡髹髭齙呰齺虪齲欳齯齔髫虨鬣鈭胔祡鸕髟歶齘飺敹镺鵫齕歑鸆遽遉迠鹺逌齴齸逴餐督叔叡肆乩齷齦壑粲砦訾翽邶勴齱裻鄁觜镼惄齝錖齠韰皻齪齶齞對懟黻黼鑿黺鄴蠽瞥削揱虩幣敝敞彆蹩氅鳪鄨嫳鷩輝逍耀帳購默財瞭睛賦幅賭蝶蛙賤髒虹賊睹螞賄豔髓瞄瞞贖盯瞌矇蝠骷蚵眶蠣眛蜻瞋睦睞賬蟆蚌睫蟒蛭蠕賑蚜盹黠蟘蛂螈瞱瞟矓眭蠓黷蛺時題顯顆曉晴旺匙昧崎峽暱曬峙暸煚畸岐疇晒曄峘町嶇崚晤獃晡畦顥暪顗峏贓睚蟯崍髐蠂贆蜞旴嶀蚖眄黤幭蛄晊蟢顓螓蝡顒岍幬蝒黖帾蜮骴盱眲蚹蠨賻蜡賳暔岏螬崦虷幪髆畎旰岠嵽峓蟟峸暵曀蝻嶱嵁蝀暊幘峔睖戥蚷蛦峌眓蚽暙幩暷蚞骻幊畤蝳帴晅蛷瞙螄黓晇蜨蛨盰帗矐蟫曚蛵眐蝧幙蝛蚶蜌崝嶆蝫蜅黚戙矔贉螼巇蚘蚨曣暕崠蚑晻蠈蚍黰旽嵥蟝巏朄曞黮曨岵峿眱岈蟪幁顝蝘蠸眃蠛虰黫蝢蠩蛃蝆賕曘屼巘嶢猒峬帄暯骭蟦蠖蝔岯蚅曋蠬蜄蛖螵巕蟥骾崸蛣賰瞫崨螮曤嗉嗎啊戰呵呀哇味嘻喵嘴距嚇喊獸噴吐嘆蹟唷咦哎噁叮跨吋踐唔嘎咕啞嗜喃呃嘔哄蹺啄嘩吠噸噎呸嚨哺躇吱躊噶嘖咻咐跋嗔躪嚥叱咁嗦喳吁哮哽蹶囈喋噠嚏嗝嘈蹛蹴顎噤嘹蹣趺蹧嗄躡躂嗑哧咭囁哂喏咂囔戢嗒囀咾噘吨唪唵嚅呔嚘咑囌嚄嘜噆蹀嚆哢吥嘵踜啀跖唻踦踑嗏嘌嗊喱呠嚾咺蹞嘾躚啿啑啈踍蹥嚬喍蹎呯嘁跍踖辴跗啢跴咘唭嚦趶唒唊躘咡跇呿喕蹅嘕蹖跱吪踾咥跿喓嗹跂跠嗼荶踕唗趼嗕躎噈踸躤跐跮吰囆踳踛哱唶哤嘒問點開關間體則門剛聞貼帳閒帽閃闆閱閉閣闡賜刪悶闊暢閩帖闖螺嬰闢蠅蟬闇蝸蜘闌閥闕閏閔閻睏蜴髏閑幌閹闋蚓螳蜈賏閨閘闔閤閭瞿閡幗蛆蝟瞠沝蠋蝎幔蛔閂闥幀螻剮闍閰矘闃閞闓闈蚋閎黜蟈映岫曙剔峭覬暘岬晹嬲峒罌蜆剴蛐睊螘壨髑閾閟焛暟眇暍闐睅誾蠦蚺閬覞蚰閜蝐曭昍帩蟔閶矂矙蜎峴閺蠼譻閫矍閆闀蝭閌瞨幜斀蛸晪闞闚闑幝嶁尟嵎蟶瞶瞡賵閛嶩螖闉睼睍蛅蜾剬剻瞜甖屾閿嶧閽蝹閮蠳閈闒暻闠蠝蟃閐蠷蠌眒刞賗岟闣崼幧蠉闤蝪嵑嶵髁曮瞷瞣蛚蟷貺蜠睄晛暺氍闅昢蠵閵閍闛閼蚎岨敤賟崵崿闟瞁別號單器唱嗯嚴囉嘿喝咧哭哩吵踏喇咖踢唬啡喂咒囂噹噓噪嚐呻嘍吶喘哨嗶躁蹋啃噱踹蹦嗤咽趾噗咄咀跩饕踝嗩踼唄呷躅喟蹼嚶跏喎噥踟躝嘳嚙嘓喌嘂呺嚧蹚唦躩嘬嚜唎喁嘪蹕咢哃劋嗺呬躣哫嚚跕嚗呫喒鼉唈嘽踀嚪跙噦嗢噣呾踄躆踶噮啅哻踃噳呥蹪蹝嚫斝踔嚃數敗睡縣蠍盼瞧蜂販瞬帆懸蝴帕睜蛛貶蟾眺瞻蚱睬蛻眨鸚蜥蛤蟋骰瞋蜓蛾蜍蚯蚣睭賂瞰蝗骼帷睨蜒幡雎蝣黔蜉瞼睥盻蟠賒瞴鶻睢贍蚼蝮盷明影晚昨略峰盟凱暖夥鴨匙歇嶼晦晰曖艷峨昀崢昕旳晌屹晞峋暾嶠峈峗鶡曛峆虼昐嵨蛉眴蜁鷴睌蚸賙嵊畋螅帢蟡鷶晲帙蚳曌昫昄峪蛞颽蜱黭幍畛鴠蜲眳蝬骴髀昒蝓眽畈巉螔斁蚚畇矊昳畽甽嵢蟭鸀矏蟓眕鷝瞈鶗黟岭睧昑螹毾瞃瞺嶓眣歜覹蚐虴暡昅虳昤蠀嶮鷳蛈毷鷐蚥歞矎蜼嵲睋蜌崤欥骫螑岒蝂蜵歂蟜蚧蛌盺黵欭暰幠睎崳骱毼嵷蛫蛶眵蚍蝯蟛蜙睔蜺岆崲蜭幯蜪鵙鷃崥盵鸓貾鷜蠮幨蝺眅岣蚝岋蚔眊貹曒崏蚡敳蟌蝩螉蜩蜦虮岓螝氀鶪蝔瞗螐蚙巑嵕睮蝜暆螇蟂鸅岉瞛岶矄嶕咰路哈吃雖跑嗚跳啥哦呼唯吸唸吹啪跌咱叭鳴嗨蹤吟踩喚吻喻喲蹈嘸嘲咚唾啤噢嚕呱跪趴嘶嚼嗡喙蹄咆鷺鵑嗆嗽噬吽噯吩咯嗔嗅叱嗖唏吒踵咋跚嗷踽跺哆蹊嗲唅听鴞啕踰喢噉蹌啁哖鶚呴哠噲噙呤躦躓嗾嗥啗噭囋啋唌啽喣蹻蹯喤踗呏吘咷跲踓嗿嘄嘺吤跢踚踒嚽趿躌跦鷤踇跧嗍哷呁哳唹躈氉唋嗂嚵鷕唑吪趵噞唃唲噷哸囃跅跣跈踘噅跐咶呧嚂哅咮蹡趷過還遇遺賺迴邏迪贈蛇蟻賠蟑蚊遣瞎黯螃瞳幟骯蛻蝙眩蟀蛀幢瞇骸睽遏瞑迥貯蜿蝌蛟蚪眈蛢遢睇迵蠔蜷暹蠑螟賅遄蛘瞅睒骿睕暗畔曠暉曦嶸晾暝暄嶙昉嶂畹逞髖矌崆蝖辿嵯逿峖髍眝晥蟧遝黥炚眹晬蜋眻蠐眯蚢嵃虻蠊晱蝤疄矉睠幛岮曈髇黕崞蟺蠰蟙岤蜣螗晼幮賝髊螲瞕蝷崷蝏蜧嵣帨崹睟螪嵱黦嶗幰瞚蚿暽螰暀昹嵼蠙嶒睙盳髂賥嵫賱巆昡髕暲嶬瞵貥昈瞝螏旼嵉帡賹螾幏骹蟅嶟帎甿螛蜳螭幎睆賧峐躕遻啦嘛跡咪咬咳哼喧蹲啼嚷喀跤吭嚎啾跎噫嚀蹉踮咩嗙踱躋嗟嘮啐嘀踫啖唳嚓踉喑嗐蹭噌嚝啍呅唁喨躟噂跘蹁嘧躞踤蹳啶嚌躥踡噰跓嗌蹜唴蹐嘝蹠咇喭蹗跬踣唼喥吙嗃噾嗛跰躔蹸躨蹢踥踠踿興眼助眠蝦螂蠟釁瞪眸蜢矚蛹貽黝幄幃蛁虯舋照野昭暇峻曜墅暐崛毗嵋岷畯韙翾暌蛜昵蟳黲畷嶍眙骳晙蚆螁郻眑睩蟉岥瞲曊瞍勖蚴帊蝃蝝屺蟤屻蛑郥糶鄤踂蠾蜛蚇蜊嵺崰蝚昲蚾蟣虭嵧蛝蚗岰帔幓贂郹蝞酅爂鄳蜬昢嶝暩蝑蠗嶰沀峮崌贐蝍貤眧吧呢跟叫哪喔唉躍呦踴嘟鄙喉嘯吼叩嘰唆呎嗓跆嗈勛囑跛蹂咿叨吮喈哞嗣啜吆唧蹬喫躑踞郢啵唰叼呣啷啣鄂囓蹓咈踊呲鄲呶鄖叻蹍跼唚吇噀趹囅嘐喡吜跁啒郘踙踆躖躐咍鄵吷噿嗋躒嚁呡跜嚍哏噊跽噚踧蟬蜘蜈睊矂蜎幝蟶幧曮貺暺崿髒瞄矇蟆蟒瞱蠓曄蠂幭蠨蜡螬幪嶱瞙曚蝧幙矔巏蠸蠛蝆暯蠖巕蟥幯蛇瞎貯蜿睕暄畹髖崆蝖峖眝晥矉岮岤晼螲嵱黦幰瞚蠙髂髕幏螛睆特拜短甜缸牡罐矩舔牯缽罈犢毬積秤穗頹穫稜稽稹稙秣秕犄嵇穔穡稓瓾秷稑牾秠秬犡牻穊甀秸毧矱馣稢馞稘犕毢稫牼犆氁穘甒秫知非制智製剩刮掣甥和程利租稍秒黏梨穢稷犁秧种稞穠稈罅矧秞穨犦矲稛犑牰馧濌覣刉秈劗犋馡稒犅毸罏犤舑劄物竹贊敏繁牲牧鵝矮掰矯憩雉牴甡鵠矬舐種稱移穩稅黎稀秩魏稚稻穆稠馥稔稹黧秝稗秏穭秅穚稐鴩兟秕牷犩犞牿鴰歃牪敿秪搿犓稌鴙秖鵚毨牬穛稯氌稃秭鷡鴸秎瀪鯬鵹缿矨觕穱鷮筭簁篥第等管算笑答節簡篇簽筆策笨範籃符箱籍築籌箭筋笛籤筒籠竿箏籲簿筠篠簧筱笙簾筷簫篤筑篩籬笈笠竺籐箔簣簇筍箋箍笆竽簷篷籟篡筏筐籮箇箝箕箴篆簑筊筌筵宓簍纂篾簸簌笳簞簪箸篁篳筧笞篫篙笘籙籇篋笥篸籣篌篝簟箜籅籉箊箘筲篟簢笫笏筴籀箬箠箅簬篪籓筮笒簐笅筥篱箤籜筣籩笯筤笎篻籊笵篦籥篊箐篢簃簳箵篕篽筳簭笉篹篨笤筰箾笐箂篿籧篎簝篣篘筅籚簹笭篰簋簠笻笮籯筘笄笁箎篛筈簀簦簏笪篞籦篲篚籈篧簂筶簥簎箯箷筀籛簼筄笚簊笴籗笸鷑笊箙笰篴筩箛簻笢籔箌簨筇筡笓笱簅笀箄箈簰笣箹筦箑籫笝篜竻簉簙簩簆笲筎簜筸箖篔造透迫邀犧遨迄毓毯迭迤犒科秋愁秘稅稿稼鶖逶适穜穮穧馝稊迕氆牸犗犉稂甃蝵迮秺穰舕稨馦穟揫穬犐犪稕媝黐矰犝犈迗缾毰犥遾動缺郵牠卸勳犍毽牝私郜穖酇犣牳劮馜邾鄦稰稄勂穄牞秜秮籪稦犌牣穇穋知智和程罐穫矱氁稼牸犗秺何什使代師化便價傳備供值順佳優仁射付僅借貨休俠傑佈倚伍傾估袋儒魅倆伏儲体佑仗傅佐佬債伐侍仕倩僚俺僵貸軀佰憊魎倖岱傌僥佢儷牒伎偌鼾俸鼴偃佞伝佶儔伕仃偆衊俵偀倀侄儰牘侑优倢僭俓俇齀伓佉僦傣傴倵僖魃僨侕俅鼯衈偞皉伢仨傋牮偪俴傸烋齉鷌儥傮傶甈僊伾儊儓衃魒魊偠侲俉儚侉倳僆鬾傇偝佌俖偨倷僳伳魌伅佴偡偫鼭偭鼫鶳魆僣鶀頧侇倛儱仜牋倰姇鼱柋鼥顊傎躽傿鼣怤僄儮傃僸伻伂佤個們但保例倒帥偶仙佔伸俱側促仲偵堡儂催侶躺償僕倘倡俏儡偎伽俐偈儼侃儸仆儻鼬倬俚皚佃倀魍俳煲魈侗偮佪僂偲儅僈仩偍侞魖偺儭儩僓侀俜伿齃儢鸔鼰儑劓傝皝俁僩佧齇傰俋齈儤僶儇俔偗侺偳倱鵿儽劁僤佒鼳倎的你作像做您版化任份件修似段傷條雙低係牌伯偷貨倫傻佩俗毀傲悠躲僑仇俄偽皓魄侮佮倪伶仟侏佫攸傀恁俾皈儉俘侈僱佣傜齁倏傯倭倜佚脩賃儺儆焂倣儌傱歟儈俛讎傒鵂佾佸鷦偑傚絛价伋倠鵯鴭牏皉傖佺伀佡侚仵鷈俙魋偺儵鼽皤毇佝鵻鵀鯈侜鼨翛歍鵖鞗鼮譥佽鼷鼩偊仴栠佟倯偝臲皭佌皦偨仡僬皒仱鼪偅仈倕雔鸄鵌僛犨儹鬿倗僁皊侳僋鷎鼶偁傎偛儋俀皞儳伒鼢侹僾偟偩佹侁傂仉僠侐跾鎥鷻鶂鷍信位進住邊集停依追隻售偏伴倍伙儀億焦傢倦併仿佇偽僧魁黛傍俯儕僻倌傭雋佼遑鴕佯僱隼佗皎隹儐僮邈軂皖魑伉僯伈牓牖儦倥儜倅鼤皏僿倧皜傞偯僗伔侻儃僽伭鼸軉俍偤鼵侒佖傕傔侂皫僔偢傽偣傛儴鸃鼲侘倓斞侅倇雥牉倞鴥學他與覺興候假舉佛仍仔俊歸偉健伊仰儘邱侵侯譽伺釁輿躬偕翱侷俟俑盥仞倔黌叟臾鄔倨佻卹仳怹舋佷樂俬僎礜傺鷽偰侔伄鱟鵔伬鄎壆鴃鄋癿舁澩鸒魕偋鄡觷皪衄仂璺郫儠齂鳦爨舄佁燢郋牊儗僝轝俶僇僪郳齆偓爂礐嚳鄇嶨屔俷保促堡侶伽儼侃煲偮侞伿俁俋僤供借偌衊偀儰儚傇傢佇倌鴕佗儐皖倥儜僿倧軉鼵侒傛侘倇鴥行術德待須衛衝徒街衡徑征衍銜徠衙徛頎愆衢衖艨舸舼徆艚舡徿衚讆衎艓艜嬃衕瓥瞂衒甂舿躗顅得徘徊徜徙舢舺艄徥艣舯徂舳艒艫艛艡斶忁覛所從般質復徵微欣啟盤船役徐艦徹循殷艇懲艘聳槃徨徽艙慫黴磐舶慇舨徇徼舲瓞艀彾彽徭瓟徶艂歋徯鞶彸艞鶞搫艅縏媻幋鵃舽熧彴徟艬艭褩垼彶艎徾舴瓝艐徻近往航逝遞返彷徬逅遁舵徉舫舷艟炷艏艗艖艤艩忀艑艕徖後很律彼爬禦彿御艋艉徫舠徦郈舥徲艨艞舵徖貓頌頒舖豺弒貘頫錯錢領鐵針鎮斜鍊饒鋪錶釘鈍鈺餌鑄鏈鉅銬鏢釷鈣鉗鎘錨鈦鐽餞鉦頷鈃錡飩鈷鋏鐳頜鋹釭鈸鍺鍇鉞鈽鐃鐐鈜鉐錸餔錵銝饉鑵鍼鑷鏄銍錴鋩銢鑊鍱谹釫錆餗貅鏚錤錼韱鋕鏏鎑貊顩鏵鏌鉔鑈餑錂顉豻饐鑩鈳鍣鋀銕銠鎱鏸饃釮鈇鋞鎍鉽錒釴鑐錏鉺釬釱瓻鐕銔鐷鋉饎鋠饁鋙鋮餰龤饛餪鑮鑨餀銪貙鈚鉥饙鋱錛瓴鑝銈銇鎛銆鑆鎒銙鎝鐼銌鐔鋍銡鍷豅钀鎷飣鍖釪餖鑶鋄鏂鉣戧谼銶饇鐑銊貆餺鑉釋剎貍俎刈釉剉創劍鋼銷鎖鍋銅餵錫鑼鋁鈔蝕饋饅鐸鎧釗鋇鈿劊鉀鈾錮銲鈉鋰鏤餛覦鐺錕釦鍶鐲鍚鍘錩鋹鏜鍔鋘鐶鑭鉭鉲鉬鉆虢鎉錁貜鏍貗鑪鐹鐻銧覜鐬鎤饖貒鍞鏬鏷銣鐊鉶鐀鍉錹鐪敆鍻銦釙鍡鋗鐰貀錪鈤蠫鑸閷鏿鏝钂鉏鈙鈏餇鍆餲貚錌饓鏀鑤鏹钁覶餳鏙鎲鋓鑢鋧鉠鑴豽鐋錔鋿殺欲彩雞貌慾斃豹貉鵒欷谿坐銘餘飯鎮鋒飲鑑釣鍾飽鈴飾錦銳欽鑽敘鑰餓鈞鏘鉛鴿鉤斂錐飢鎚鍛錚銓飪餒鎳鈑錘餿鎗餡歛釧餚饞鉻餉鍰鎢銼鈐銖鉑鴒銑餽餬鍇飭鷂歙鐫銩繇銋鏃鎩鉎鉹銗鑯飫鋯鉿鋌鍠鉋颻銚欱銵懖歈鏇鶬銫鶢谽鋂釩鈲鎨螸鍐鈆龢鑱鶲釚鏼豃錍錎鎃鎪鎴錭鍧雂餧錀鏦鎞憌鋝鐱餂釳釤鉓雓釽鐌龤鋨鏾貏敓鐇鈚飥鐎鍑鈒鳹鎎鑕鎀鉖鋊鉌攽毹貔鷭鳻鑀貕鵨鋡饡鋋釸鈅餩殽鈖鍎敜錉銛毤錋鸙釿餭貐鐓鑗鎙餼鋾夎鵗鍤鉯鏶途逃辭遂逾館鐘鏡銳餅斜餃鍍鏟鎔銃鑲鎂鑣鏞鐮鋅銂錠鋃鎊鉉鎬鎰銨鍬鐿錧鎌鐙鑌鋐鎕銻饈鏮銤錞鐒鐏鉈鉍鉸鑇銥錟飶鎡鈰饟鉼鏑韽鎵鏔鈄鍕錝鐠鏣錥鉒鋺谾鑳鑏貁鍹鍗餤鏻鑅鏕鐩鈧鈊鎈饘餫鈁錈鉡鈥鋎錓鈂學卻亂翻乳懇兆墾貂郤黌錄鍵銀舒鈕飼釵鏽鋸饑餾翎鋤鑞鏗飴鑠鎯錳郃鍥饌錙鈹邠鉚鉊郩鷽鐍鈱郛鱟鈮鈀鄱鄶壆鋷釔鉰鍭澩鎦鐉鍜鐖釹觷鋦餱鏒郗鈶貀餕餯錣釓燢餟糴乿釨谻鉧鋑鈗釢鋟釕鉾貄钃鎟鈌鄃飹豂礐鐨貑嚳鏺嶨勫鏐鍒鍏鋁釦鍔鋘銣鋗鐰貚貓貘錯錨鑵鋩鑊鏵鏌鍣饃鐷饛鑮餀鑝鎝鑶鑉鏼館鎔錠銨錧鑌鋐鉈鎵鏔錝鋺谾鑳鑏貁鍹鋎狂猜獅獲肚獄腰肝穎肢膜狹臟膩脹頃朦脂膝肺脖豚猿肛肘朧胚獗潁胯獠膫脯獼脛肱膈鵟腊胰腩朊然鰱鱷鱈魷鮭鰭鰣膊桀鮪鯁魽鰈舛肫腌鰾鮕魱鱄飉鯕狋魟鱺膆犴猗脤獦魨獾鱖駂鯖鱁膘鮒觫胕鰆猼鯃胻魺觟獟脥犽狜鮨鰿狨胹獮觩鮇狉贕魼魾獶狫臑獉狤膮膵膹腜鱴熲觰臙鰽胈臛鯆臒脰飋雘鯠鯪鱙狘颬脙鰔鰋戤腷獿狟鱹腠朠頄觨臌頯胠胵獚甔觾鮚頠鱱膞獂鰤鸑獳觭鯄鯥鮞獨劉旭腸猩狸腥狷膛狙猖狽猥膿腆猾胱胭腮腓胛臊刎刨玀狎胴刖外觸咎颺鯉鰻剁鯤鱸昝鱧鰓颶鰥触鯧臚狪猁虓鰬狚玁猘胦魻玃觥膢狆鯷猓颸腲腡劖鱋胐猇鮦臅猧鱢颭獩膕肭魶狦獌胂鮹刐膗鯦魦猑腢膙猲鱞鰨鮛朒觛獛膃臞鱨獧觶鮂脭鰅膼觿胑猀颲鱦臄朋狗啟臉股脫狐胸胞脆膽脈腹雕脾鵬胏肌鵰腫脂膨雛鳩腺孵彤脕獺胳膾猙彫鴝胝鴇脢鴟獪猢鶹夠煞穌觴鮑鯰鯛颳颼魠猻胜飧鶣胗犰脟鰴鱌胊鰷脞猞腧臢狣朓玂獢鯓雒鯀脁腄狳獑鰗膰鮠猣臇觝鮢鮯觡肐鮨胅鶛鱠鮈膴狶鵴觚膇觼朡魬脽膲胍胙欨獀鮽魤腍鮸獙毈狾觬棨膬胉脡獊颮鱎臐肸鵅胣猦鱵肣狿鯡鯢觤鮡猈鰒魵鱮鮓肵觙颩腯斪鰩猊狌朐鴅欿肒肜腶魡獫狑鵵鮥獯狅鱕鯚雊犵猺獡脬膍鶵腇鰉鵩獥勝週遙逢脫狼胖逸猶騰膀腔狄腕膳狡胺臆朕肪臍腑逄狩滕腋獰猝賸獷胼豋臏謄臃馗獐訄獞狺鮮燄鱗鯨鰍鮀鮫斛鱔鱒鱆膻鰫膱悐鯙遯脘魧鮅迿膉邍膦觲獍鯇猏腃鱣魰肮胘膌朣脺膟鰜膣膧媵塍臕犺螣獽臗鰝縢犿鱭腤猵脝迻魴胲鮵鯜狖腦留服印疑腳犯肥腿胎猛狠膠貿祭猴獵卿臘卵兜皺卯鄒肋肄胤狒邸腱卬腴解怨蟹勉颱鴛鯽觔鰡鱘狴郇劬妴鱳魛獬朘鯔鰳狁峱猰袃眢猱鱊駌猭膷狻腞肕夗觻蜰鰹胐鰼鄮鯸觖鰇飀腒鮐獝鰶飂狃肊猳脧胇翗鯫鱍鱐郺狔勓鮶腏酁鰎鮿颾朏奿翢觓腛鯞狷臊玁鱢觶脭胑獲膜臟朦腊獦獾膵鱴臒雘鱹朠腔腕胺狩獰臏鮀鰫脘鯇膣臗狖就顏憑凌凍斌馮顫鷲凊凄凐冱請謝龍計試討語講讀評護諸誠詩誌諾訂誇証謀靖襲謹謊訝辣諧譚諜詰壟誡麒訶龔聾詣訐訛誣竑詼譁謨諫誑謳諶諴謮讌詎詁訌訧礱讙誆頀頦蠪竦誧謋譪詌謣訏諵譓瓿讞韺龑謤贇譇龒戠諲譊讋詿謰讈甋諑頝誫諘譆謜詴詍訹讘譖諨瓬龘詙諃譿訰譸誙誄冹誖諓鸗諆頏鸑謓訿誺刻冰劑敲剷冽斕站課親誤謂訓譯端韻詗譴竭剖詛訕謾訥誹謔謁譟詘謖誚諤讜諟訃螤詀剫譨髜嚲劘讕誻譝諯凗諕諰玅諿謯謼凅譋讄訬譂詷謱資於次望放離效族冷雜施敵熟旅旋旗准敦姿凋孰瓷恣塾旄咨畝旌氈凈旎旂凎旖冼膂旛旃說新話論許誰設訴調訓詢託彰誕毅讚謠誘詭諧診諷詮諮詐誅誨詬諂詣訟訢訛諭譙謅颯諍詆諉諛贛謢諼鷓讒訖戇詄讖竫鴗諡諗歆鶺誥譭旆鶉譫敨譑冾鷟謏斿諈誃諞撉鶙詻鸇譕旐玈瓤鶁諀旟楶凔欬旞竷詅鶶鷾栥歊讂謒旓旚詺旝韸諻竘韹謆譣旒諙謑斔誂鳼訞譗旍斻秶詵謕鵁毃誽譈殶憝斖譒凘謥譀餈氃鶊讔謻鷛訿這遊適避凜玆說該讓辦議識談證註詳誼辯譜競諒訪辨詠謎謙麟諦謗瓣辮諺諳詫諄謐謫誏竤譠誸詨誶諢謞謚諞詊詑譐詶遧邅迒譹謆斒讅譧謶謪譾讟誁諠謧郭凝氓郊冶劾訊部認記變證戀詞蠻彎謬訣誦譏諱巒韶欒詔譎翊竣鑾鸞鄺詒詡矕詘攣臠孿誒孌奱譔鄐譅竮鄣勷鄘諏凞諔曫邟勍邙誋訒謘譺鄜詖皽鄗邡訑詏諝勯謵誤韻譟諤嚲諿譂護諾謊譁謨讙頀譪韺譗誼詫竤詑讅諠懂惜恆悟憾恢怖慎憤慨慌惰懦恃怯悽怔慄懵悚悖愜愫悻忖懾怦憭怵慬怙懨忮懮慓懞憟憓憯慒懽愩墯愐愖愅忳怴恄恉怀慲恇懻慪惏恘憛憢愝慔恅恓悿懱慡懥忨愊懤悈忕惵怲憱恞怌慱懼悄悼悍惘恍悵憬憫惕愣愕惺愷憚忡悱慍恫惻懌惴怛悒怏懰憒怞悁懆恛愒悜愓怳悝憪悃怚愲惿懁怬慖惃戄怗慺慛懅惈惝憴愄戃懪懶悔愉恰悅愧惟悸惶慚懺恤恬惆懊惚愴憔愎忪愾忻恪忤憍怢怍憸怜怐忯恌憮悕恮慥恂憺惍怉憿惛恟憡恉悇忺忔慆惾愋慀忏恀忴愯惸憉悗悎恦愮惀懫忣忷憶憐悅惟憧憎慷忱悴慵惋惦悌愔懍惇惼悾慉愀恲慞恔懧慏惓懩怑悢懭悷愃悺懠慊懹悰忭惊愘惲怭惔惤恨慣慘怡惱懈慟忉忸惙慳悀怩怫怓慴怮悛慅怊憳憰憀怋愶愕憚悒悁懆怳惜慌懞懽慔懱憡惋懧愃愘類精煩瓶煙燒糟燃烤煉炳烘煤糢炬糯烜灶燁猷燎纇羥煐烆粨羢糷煠熰炑烴燸熯熛爩馘羺甐頩籵燽炖粖烓熆羱煃糐炡烒粀灴烠羠熿爟爧籿燂粻糲顲羵煁顃頖煂煘羬烳熸粔糒焟烼燤焐爛判爆州粗爐羯炒剃燭燥糧焊煜炯粘焜糰粿焯糬烔烘煬燜煨烞焨爞熀羰熳爅燘煋粡粴爣熅燀熚爓煔炴熉剡燡粌熼煟煓敥焺焆炟粯煰熡覢炾歉糊炸粉炮塑弊叛煌斃熄煥鱉炊糙烙朔焰憋灼烽羚燉烸燻烯燬燴炘煖粄鶼熗燠熜燔鵜烻粺鷁槊羝烿燆烑燋糮羖炵欻焮羷炩爁烶粅煄粣燰焓爝熪爚愬焀羒蟞烅爦熂粁艵炂烰鄨烇嫳羳獘鷩烚粍籺烍鷷羭鵧道料導送營榮螢燈勞州糕逆粒遵糖粹遮瑩炫鶯煽熔縈熾烷煇迸逖焢烊熒糠熇炕焙煢燧塋熵犖燐嫈燮滎謍爌遒醟炆羶膋煸禜熐焠煍焞焥爙爔褮爃燇甇鎣煪爊炓燚煻燱羜羦覮罃焍熩焲烢熝烺燨羻糋烗燈鄭翔鄰燦爍燼煒籽燿炤焗熠熞郱焌亃煆灺糔煣粈炔郯熽糝籸羧熁鄫籹糑熥灱鄬翷燏燖燲煡熤鄯煝炄燥烘燀熉焆煰炾糢燁煐糷爟燤熔烷焢焥羜羦烢法情清滿源懂灌江酒惜漢河漂港滅減濤洪淺溝污汪潛恆悟憾涯恢怖漲漠灑慎汗添潭憤淋湊漆瀟淒慨汁淹慌汰浦沌沛惰汙沫溉瀰渣滯懦澆恃汀湛淇濛怯溼沐悽漣怔瀕泄漪渚慄洹渠瀝洒漬瀆湃濺潢懵悚悖沽沬愜愫潦柒悻浯湮濡沅忖懾瀧怦澍洱淩潸憭湳灝浹溥滇澧洐洍怵慬粳怙懨洁漕濋涇洘忮灩澪懮慓漭汱濔懞灦憟鍙潓憓溱溧懣洧湷洭沍瀖憯洏涑洃涿濿漺懘慒湅溘洼湎渃懽渱澐盓漹漘泚濩汯愩漜澸瀳瀻澒沶甑洑沰澫溽漙墯濧澕瀦愐汏淶沄渶澦愖灞滼愅忳怴溤澿恄汧恉怀浡泙慲沔瀀溎恇漚淢懻泧涍渫泭瀡濭洰淕渜渀慪涷濏灪浾惏泔淔恘淽憛憢愝慔洊恅泍涆湱恓灀滆瀩沋沘滐悿淓瀎洟浢懱沭渽濝溒慡粞湝渳溮懥忨溹灡濍沎渵洿愊濈涬懤湹悈濇汥灆汫灢溙忕渮灊濆沷浭惵怲渿灄憱洷溡溍湢滒恞怌慱額戭頞顁況消油測慢溫漫沙混洞滑沖湯澤濃涉懼洩悄渴盪潤濕澡淵濾沾濁渺湘燙潰悼悍瀑涅惘恍瀏沮悵憬憫瀾淌渦滷惕愣涓娑愕鯊惺愷洸憚忡洄澗汨悱浬泱慍恫湍淂惻沚渭涔涸汕懌惴泗淖怛裟璗濬濮潀泅悒怏浥涮漼湠漯懰澢憒怞泹悁挲懆澴澠汩恛漰泇愒沺淏蠲洳湜渻澖洇灃悜愓怳悝憪淐悃浿瀴湦糨涄潲硰滉瀘溷浀澲澽怚潪湞湒愲湡漶惿懁渨灛淟浺溰潩糌濻濊怬浻瀱漒慖惃濎灁戄濄怗潣溳慺漊浰慛漟瀢懅惈潬淲澞惝憴涾漍灅澋淛涀愄戃潿瀙淉淠汭泂灈懪汌滭瀜滹潶浧湨惉涃洖浞塣漇割剜覾沒性活海準怕激湖派游洗泡漸淚懶汽浮悔鴻染潮淨溪洽盜浩洛愉恰滄悅塗沿濫愧泊澎添泛浴潘惟澳淫淘漁涂淪灘悸惶溯滔慚瀚渝懺淆汐澈糗汲瀨恤恬洶惆懊惚汎泠愴憔澱淤漱漩滸沂淮浙潞澹沃柒淦滌愎渙忪涎滬淅滮愾洵忻恪汔滇淞忤汾憍瀲怢怍灠澔憸怜浼灕粕涗魙淍豁怐濰泝漡溴敉忯洙漧洈潻恌憮灨洎悕漎灒湉濣洺恮澣滶泒滃慥瀫恂澬沜澮潃沴湟憺湩潝湲汋漞泚浠湓惍怉泲潕泆鸂洉汳泜泩憿惛汻恟涽憡潗恉滫潎悇汍忺淰渢溣潟潒忔澰洫慆惾泃粢愋潐氿慀忏淣洚汃恀澉忴愯涐灉潷淴淗惸瀺灂沘憉渹瀿溾澂鋈悗悎浽湝沕汦滁洬恦濉瀔濦瀹澌鍌滊愮濞惀灚沎懫滜瀸漵瀊忣澓瀄湤淊濲溦浵淜潡溗滏忷垽澨浟渰涻洀湁鴳鵷鶟鶷鸋流深演注懷浪忙憶洋濟淡洲憐淚沉沈滾渡涼滴泳悅滋液渾泣粽惟潑溶濱溢淳涕憧瀉泌憎慷忱悴慵沁沱惋渲惦漓汶漾瀛滂漳濂浣瀅濘悌淙涪愔淬濠懍渟惇漉惼潼瀋泫悾溟渼汴淯溏涗邃慉滖滓泮渧澇逤瀼沆灖潽汸浤淀愀恲慞汒澼溈浨灗潾恔澺懧洨慏湆瀠惓泬懩湇怑浂洴滻悢漥澶懭滵滽瀵涋悷洝濨鎏愃悺懠慊湫湀瀍涴濴懹湔涳悰溓泞瀯忭溿惊滘愘惲怭惔滈潫澭瀌瀁湥潧溛瀗瀤浶湴涫漮淭溠滱滀瀇惤溔湸漃逭灣快決怪治波恨婆慣慘池漏淑泥怡惱潔涵梁汝津溜澄潑湧浸澀泓溺沸氾滲懈沼慟濯湄潺粱渥泯涘浚涌渤炤忉粼忸惙慳悀汜洮怩汛洌潳沏氻潚迆怫粑瀣灤怓淄慴淝怮湣湋溞泑堻淥汊澅潯漷溲澥悛慅灟洢濜怊湚憳憰泐漅湑潠糅淈滍洠湕憀沇泖碆涊瀷泀涒怋漻泏濼糈濢浘涺澯愶漈潏況澡涓愕憚洄悒浥悁懆泇洳怳糨潪湒溳潬浧洖浞塣懂灌惜港洪漠瀟慌濛潢漭懞渃懽濩瀳澫澕渶濭淽慔淓瀎懱灡濍渵灆渮憡潷瀄澨演溶濱瀉沱惋渲浣濘淙瀋滓浤淀懧泬漥滵涋洝愃涴涳泞愘湥溛瀗浶涫滱漃社連遠速達福補述顧遭逐逛逼邁遷禱遼逗祺祐逕襟襪禧袱迋褚迂迺褔邇逑逵裱褥袪遶褡迣逋遘邐禰祛禛襦衭祜迼遯逽迍祔迓襶褼遰禡衼祴襺顐裬褦襩襼褋裲袺袸迖禋裋祳禲祓裖祏衧禖襫裺迶襭襋袚禷褾遳裌甂禫襱褗襻逜袹迗褳襹顅襓過還裡神視遇禮祝遺祖迴邏禍迪禪袖遣逍迦裸禎襯逞祉昶袒褐遏遽迥襠褓衲袓遢迵褸褟暹裎襁裐祼遄褂襬迾襌禢辿逿逤遉禤遝鼆裀禔袽祌襮襴裼迠衵沊褷覭裮裶衶襗逌遻襉袡襙襆襛禗覕褆裍逴剆禓襡褞進近邊造遊追週遙逢啟游透途複遍逃迫逸裕邀逝遜朗鶴遞返袍衫祈遨肇祇迄逾逅遁遑衿迭逄衹邈迤祚裨襤祗鴆褫祆禛襖逶綮鶣适衽褕袛襒禶袧禴迿迕襘遾祅祹欴袷邍袾祫禬褦袶袗袙遫裶祑襜棨褑袼裯禐迮裫祋衯鵳禂祩禠鶐鶤襳袟衱祪祣袀迻祄袘礿塱襝襐祰襣這道迷運導送適避遍祥褲逆祕遵遮遂遴邃迸逖褊裞袨禳遒襢裗褵袢袉祽襚禘遧邅褯禚祊迒禭裷逭袕衴禈褅褌褣裧被通選初迎退郎違遲迅巡祂裙翩袂逮邂祿遐褪祁祠迢祀邋褉迨裾褶祤衪衩遛禕礽遹皸禨迉邲逡褙裰祧鄆襑褖褘祒襂裉祲袑迡逯邆邥戺鄍禒禊襏袎褬祝禪迦逞褓裎襁裐襌袽遻襙邁襪褡逽襺襼遳遾邃袉逭袕褣張既彌暨疆弭彊慰尉熨褽彄頵塈彉瓕鱀弣弳犚張引彈劃刷咫刜敯刡彏謽覗剭彋彃弰敢弧憨愍暋改殿臀壂鶸斸鶌鳲鶋弸鳵鵋鷫鵘敃鷵睯艴弤選群遲弦逮遐壁臂譬劈璧辟躄擘檗弶糪繴鷿憵幦襞嬖鼊甓那與建強即舉弱弘譽粥郡弼弛巽鬻礜屘鸒鄪堲弝弢轝邔妀鄩弨彈咫陳阿裝附隨狀陸陣階隔牆壯墮陵阮陌陋阱陡隴孺隋戕陛陝陘奘隬阨陜韡隳陭韝陃阢嶞韥隇牁螴焋臩陼陓隓韎顄韘陏陑阰隢阹燛孲韍韔陾陽阻隙隅隕阯隄隰陟韞隤阽隑陫韣騭隈將除收險獎孤降隱陰隆孫陷陶醬漿阪韜槳隍陞孜陲陛阡孢隉陴隃韟螿愻阺牄隩隗斨敶隀隞陊阣墏阰陎阼陯檃陱際隊孩院迎防退違障陪遜陀疏墜隧隘隡迆迉牂阬糱孮櫱陔韗迡隒鐆韕隮蠥限際孔妝韌艸陛墬陂阭孖陬郼阞茻郿糶阤孻韖阠隕韡院陀孮妹媽媒頗姑娃奸姬妓姨嫖嫣婊嬉姥姪妍嬿婀媾妺婕嬈娸嫄孀嬅嬬妘妦嫗娠嬭妅娙婼嬙婖媴婭嫽婧媟婍媌媷姷媋姖嫥嫨嫹姮姞嬯媎嫟婻嫀嫕嫴嫷娾媶婈姱娕嫫娀妧嬞娏嬦姏嫮媔嫊姃孋婞皯如加姐架妙賀駕娟姻恕娛絮嫻嬋妲娼娉姍嫦娌媞袈嫭媧媜嫚婐嬛鴽娳勰妯嫘嬠妠哿婟毠挐鴐媢媏帤媼婩婥媦嬽娊娖孈奾嬇婸媬婰姌姛妽姎嬼孍妳婚姓姊妖嬌姚嫩媳嫂媛娥媲嫵婢姒娩姝婬皰媺妁奼妗嬝妊嬡姼姽嬾姶媮姵孅嫍妡姤媩姀婗嫙姠娷媱奷婑嬓媿姺媰姈婤姩姁姡嬐姾媕婂鳭嬏嬔妐妎妢姳嫶娗娞孇媓婇娘妨嫌迅嫁婉婷妒邂嫉迢娣媄嬤嬸姣嫡孃姘嬪遛嫜婃妏嫇媊嬗婄媗嫝嫸婛媯娹嬣姅娮嫞婒妼婘嬂嬨媥嬚嫆嫬姲妶妵婝婠好她始努奶婦怒姆妮媚娜奴妞邵妃婿弩劭娓帑駑妤孥卲嫋妣婽拏婌嬁嫪孎嬧嬥嫿媃妱奻砮娵娭媸媹如加架賀駕娟恕娛絮嬋袈鴽嬠哿毠挐鴐帤娖媬孍嬿嬅婼媌媶嫫嬞嫁婉嬸嬪婃媗嬣嫆姲婝婠能態預熊戳戮瓵顙顟羾頲翫翴頨戣矠螚劀剟翀剼以能務態登熊延廷豫凳癸矜欸鷸騖鶩鴘鴾鶔鸐翂翪鷚婺蜑鍪鵽翵氄瞀欼毿癹雡敪堥蝥毲鞪飁楘翐歠翑發通迨遹逡翋翞邆習羽翼鄧翠翟羿邰翌皴翨翏翯翭鄝鄈翇毣郔翍翣翬翜孺經結紅練續純績緒繞縛綺絨緬綾紜縹紕紂緘紲繚紘綪縝縉紺絿紆綀縳纚紑繨糽縥縺緶紌絰縟疀緉纈紶緙紎緎繐絎絊繻縤綍緁纋絔緪緀縸縓緛絓紱綝綆紨剝剿網組細納綱綽繩紗紳緝繃縷繹緹緋繾絹纓緲綑絀綃縵繯縕絽纗繉紬繟紻劙纀緺綹縰繢纙紃緆纆緗縲縜繷緦繰紖絖緄絧絪絏纑繓絅繀縎縪斷孤延廷孜斲孢給總級線約終維絡紙縱紛緩繳繪綿緻纖縫綸絢纜綢綏緋緞紕綵絳纔紈綬縝絻縐絩絇盭鴢紇縚繙緮紟絺繌縋鶨絑纘紾絁綎縼纁繺綞紝紩綼綖繑雝綒絼綯絘鶅紒綌繖緟緌絟緰孩巡邋統編縮織綜纏紋絃締綻絆繽繕紡絞綣綩縞絣綷縊綰繒絯縯纊纕繸綈紸緧繜繶縖縑縌繂鶭縒緷逯縗縴綄綡縭綧紵絒紽繗縍紏綟縡緂繵紞建孔勦樂幾變絕響戀緣蠻紹繼紀幻鄉綠絲幼彎紐糾緯綁嚮繡饗鷥巒欒綴繆紓鑾鸞矕攣絀畿臠轡孿紉緇孌繲奱緡縿紿繣繅曫紼縃繘縔鄛緅綅蠿繈蠁紁縩緱緝絹絽繟縜繰縸縮綜綻繽綩綰縯縖綄紵紽縡嚴喀味唪嗉哢嘒戢嘖吁號啊呵哇嘻嚇噴吐嘆噁叮吋唔啞嗜喃嘔哄噎嘈噤嗑哧咭囁哂咂囔囀咾咑嘜嘵唻嘌嗊呠咺嘾啿啈啢唭唒咡呿嘕喓嗹唗哱唶饕哺吱咻咐嗔嚥咁嗦喳哮哽喋噠嚏嗝喊嘎咕呃啄吠噸呸嘹嗄噘唵呔嚘吥啀喱嚬嘁咘嚦唊喕嗕噈吰哤鴞嚅呯呀咦嚨吨噆啑喍咥嗎唬啡噓啃嚙嚧呫噦啅噳距蹟跨踐蹺贓躇躊跋躪蹶蹛蹴蹣趺蹧躡躂蹀踜跖踦踑蹞躚踍蹥蹎跍踖跗跴趶躘跇蹅蹖跱踾跿跂跠踕趼躎踸躤跐跮踳踛咧喇噱唰唎踏踢躁蹋踹蹦趾跩踝踼躅蹼跏踟躝蹚躩蹕躣跕踀跙踄躆踶踃蹪蹝踔噗路雖吵唦跑跳跌蹤踩蹈跪趴蹄鷺鵑踵跚踽跺蹊踰蹌躦躓蹻蹯踗跲踓跢踚踒趿躌跦踇跧躈趵跅跣跈踘跐蹡趷噹嚐哨喒跡蹲跤跎蹉踮踱躋踫踉蹭躕躟跘蹁躞踤蹳躥踡跓蹜蹐蹠蹗跬踣跰躔蹸躨蹢踥踠踿嗩跟唱嗯囉嘿喝哩喂呻嘍吶喘嗶嗤喟嚶喎噥嘳嘓嘬嚜喁嘪哃嗺呬嚗嚪嗢噣呾噮哻呥嚫嚃躍踴跆勛跛蹂嗣蹬躑踞蹓踊鄖蹍跼趹跁踙踆躖躐躒跜跽踧咽咀唄呷躁跏踟躇躪躤蹜踠吃哦嗨嘸唾嗷喢噉哖哠嗾噭囋呏吘嘺嚽咶嚂咮吽吒咋唯咱啤噢嗥唌喤嘄唲囃嗅嗖呱嘶听哳哈啥呼唸叭吟喻嚼嗡嗲唅噲噙呤啋啽咷嗿哷唹唋嗂唑噞哸噅嗆噯吩唏嗚吸吹嘴吻喲嘲咚嚕咆哆啕啁呲呴啗喣嗍咰呁嚵吪唃噷呧哅郢郘嗽咯喈叱吤啦嘛唷咬咳哼啼嚷吭嚎啐嘀喑嚝啍呅唁喨嚌噰喭唼喥嗃噫嗙咪噌噂嗌唴嗛咩嗟啾嘮啖嘝吙唳咇呢喔喉嘯呎叼咈唚噀啒吷呡嚍哏噚囑咿別吧叫哪嘟叩啷啣吇喡吜咄唧呦啵囓叻嗋叨喫唉唆呶咍噿嚁噊嗓吮哞啜嘰喙呣嗈吆戰呺獸顎辴哫嘂劋鶚鷤氉遻囅鄂鄲囅鄵嘂嘽嘂嘩囈嗼囆囌嚄嗏嚾嗐噾嚀荊鷨逽遳鄀鶧邁勱鄸鄚蒯警敬驚擎鷋鴱檠蟼憼鸏氋鶜顴觀歡鸛飌勸酄鄿遾劄鷑戭顁割豁鶷逭額剜覾鵷鶟邃鸋頞鴳去喜士臺走賣志土坐幸吉載嘉戴裁赤截壽哉喪壹寺堯袁壺栽圭垚熹嗇恚壼毐盍蛓燾奊酨鼁夌胾壴臷坴鼀城幫越封鼓域填坪壢堪埔赫垮堵墳頡壩垣坷堐埂埼囍坏堎埥圬塽堰坯坩瞽鼙埡堙堶赭鼛堜嚭垤堩塻堧壔埴鼕趌堛趬堞鼘埲坉塼赶鞤尌墆堿墐趪垘顤塒圩墝埬塨壾鼞鼚墂塛塥圢犎壒鼜壖場趙趕址坦坤埋趟赴卦堤塌埸圳墟埕赨塭墁堝塤塏坫朅堣壝堨墠堽壚坱壧趄墣塴埁趔敼趧垙赻壉塿趮覟赸赬趠覿坰墔埧堮刲垌壛堌墿聲執熱勢堆塊均款殼彭趨趁馨熬懿墊坎摯赦蟄垢埠圳塢穀敖垛坍螫埵埤墩坻坵罄圴圻榖摰磬堸聱趒壎轂縠墘趖韾瞉欯甏埏埩坼堭彀鋆縶愨歖埆鴶趜盩瓡豰埰堄埶鏧堋慹堹赩坋謦堬壏坅嗀趓趫墦觳墽趑堍漀垝鷙趍垺坁埒赹槷鷇趀圪墺垥螜垀趲坽趛毊騺趎趡趭趏垗謺贄塕鵱嗀埳壞境增培垃壇坑趟坊壤塚塘墉堉垓壕坨埮垿墇埢塉赯坢燅垟塙埌塶垶垸壈墑堷墫垵壿墥塝塎埣趥堔墡埻塓垞地起報超趣圾坡翹劫埃郝垠趐坳堀赧亄圯墀赳圮墱埇墎劼堠垹堳邽邿翿坶赽埽赮埐埭塯坭皾垏趯赲坲圠墋墈壣埱趉埕塤墠趮堮塔塻壒坨垸垵塎垞本未李查木末森杰杏杳柰桽桼林標權棒概楚村模樹構材樞禁械杯橫鬱杜植枝椅棟柯櫃框桂枉槽枯攀柄杖棲檬樺槓梵焚楠杆檯朽樁懋楷棧梧桔椏婪麓樊橢梗槭槙栱椿柑枰榛桎榭栲槤橞柎柘柜橿櫪楝棱楂柸杠櫝櫺橈楙柩楛棋桁杇楮礬椷栳桍枒栖榑樄枺棈桱櫳栭杕槿杌欗栺楪桲椕檣梇榞欐槥栯桮檮棖棼檟杬梂枻槲楅榵橝榡棽棤樍朼杅檴杹槫槆埜栫椹槱楏橭榪榗梀橶橑樉柭欞樠桋櫇樥檶橛楉橨棶榧樗榯栮櫮蠜枟榤欂栜栻櫧楱榰榃椻枅梐檑檷枙梉櫌樲楩榼杙朾椼橪棫檒榎梪杶椓櫏梜枎榬樾桭枑榙櫹檚櫙檽想相檔樓楊欄桿櫻棍樸柵桐楞柚枷梢朴梖榻楨棹欉柺櫬櫚枴枵棑椳椇枳楫柷檉橾鸉榥梱杪樝柙梠橕棝枮槻櫑堈枘柤桫梩槾樻椥桯桄欓椯檡檅樘檛栵柛柟梤棡欏梬樿柍欙梣橖楋檦堁楬榩柶槶榿柦楒橍柮檌樏欈棞榾欋梋櫨棵格板松檢梅析橋桃槍柏彬棚楓杉棉枚株樵橄欖楷椎橡檻机槌杵榆麴檜栓槙樕槐椆梏櫓柢橇皙杓枸櫸榫栘柞櫛檐梔栴桅楜柝椽楰棌棯檄栨榣椑栝梃樅栺桴櫡橎杋蜤棜楯梌枍槂梲柣柃欃楀梒楻欑朼檇杹棩楥桵槬槔杸槸桻樇櫍櫼櫯枃杽朳棇桸柉嫠椴杴枌榹杚构槄极柂檎櫋梐梴椈棰檓樧柊椸惁檹棆枹栒橁棔橔樦桷柧棦朹枆枔榽樣校核榜梯柱枕棺檳檸榕樽梓梳榨樟杭櫥桓榷棕檀柿枋槁桹榚棓椄枓桓櫆楸栟椪楄橦棬椗槴檥柆檨檺榠椋欀柁櫠棪柼橠楑槉槦橯樘檁槎檤楁楴橏櫰桉柲梑梡樴櫅椌橀楟槏樀榱榶橧橉榳椊榓楢栚杺栦棎楦檖楌橩柈檍樆樈楎機根極椰柳札桶樑梭棵橘楣紮榔隸椒橙榴杞栩楔梆楹棣柪杷樨枇柀杼椲杻椽槨櫟蚻郴朸梛樼梮椔楗朻柅檞樔椐榍槢楖楺榐梫櫂槮棴柌欚楈柫杝檭櫞樛橚棳柮棷桾欘杈杍桏椵枷柺枵枳楫柷檉橾梠椥桯樿權模棋檬樺楛槿欗榵檴槆樥楉欂榙櫹櫙櫛櫡橁樦棺檳檸榕榨桓棕椗柁柼楁桉梡椌楦成感原壓歷威厭盛厲厚辱曆戚雁辰唇仄厄愿戌厝戊靨厥咸厘蜃魘蹙戍慼厎脣贗饜厒厞厤鴈厧蟨厜嬮厴厬厙厖厂厏鷢厊黶厗厔磿觱願顑顣劂勵鄏郕手打找指持技批振擾搭摸攝描拒抹捕拔捷措拷掩捧拓扶攏撼拭搏拱挂扛挾揍摳擷抨扼抴撓擂揹撩捱摃拮捺揩拺撻搆揕攆摽捂摶揠掅扙擣擭挳撗撚摡搢搕扞搽撢抾挎撅掁擖拊搷捙搹抎扤抔挃攉擩扰掑搮抪擛挭揲扜攃攦拵摵掗拑搟挬擫搘捇挕搣攮挋捄扽撠揊掎掝摙撱摴拻撦抏揯提掉排據擇掛操抽揚擺損扯擋扣抄捐撐捉攜攔撲揭摧拙押捏捍拐擱揣捌摟扑揖拈撮捫擄拽捆攫捎挹摑撂搵捵搰捰撋擃抻摁抯擉揋攖攄撣搨捑抇摞撾攌揌揝捯挏攎掯掍攩捚捗抰抩擐撊撌挸摫投換推抓抱援授播擔插括拍挑採搖折哲拖搬搶拆托捨抵誓撿拾挺撒扮搜攤拘撕撤挫掙撫挽撇攪掏扳搗掀擒攬扒捶擻踅揹掐搥拎攢捻掬拴摀捀撬揩捩揄攙擤蜇掄扺撽晢掤挴扦撘摠捋挀掮挻扱撟擼搷擏捼攥搯捭搊捔捈攕扻拰銴搠扥揜摦摥焎抈扢揰挌硩抸撳挩摐捊擳搎扲扷扚揘攡摲抮撝捁撖掭摿擨挼摓悊抶揈擙裚搋摋梊拸揓扴掜揗接拉按控搞擁抗揮探拼撞擴摘挖捲擠擦摔抖撈擅掠搪搓拌揪攘搧挓擰拄搾掞掂揃掖擗搐揂摭掮抭搳擯揙搉撙搤摝攛捽攁攓搛抌捥掽揥抆摍攐掊捖摛挍擿抃掟揨摬揎攗攇搒攠攍挔把招握撥擬掃抬拋披扭抑扎挨拂撰挪抒拯掘抉擲拚扔摺揉搔拇拗揆摻捅摒据揶擢扡掇撜抿拫搌挶擸摜摷搚捸攭拹揤掫揟摎拶搦抁搡擽扠揵扐掾捘抳摨捃撏揳操損扣捐捉拐揖挹撣搭摸描措拱擭搽擖擛攃撘攥擳按控挖擦挓擰搾抭搳擯搉攛攓捥摍攐捖掟揎攇最日星量早易暴景暑冒昇昌晶旦晨曼晃昆昂昱暈旻曇冕旱晏昊昴昃晟曷晷曩炅勗晁杲昜昺晜暠謈晸旯旵晑冔曏旲昮昦時題顯曉晴旺匙昧暱曬暸煚晒曄晤晡顥暪旴晊暔旰暵曀暊戥暙暷骻晅晇曚曣暕晻旽曞曨曘猒暯曋曤映曝曙剔膊暘晹壨暟暍曭昍晪暻曮晛暺昢敤明影晚昨盟暖匙歇晦晰曖昀煦昕旳晌晞暾鶡曛昐晲曌昫昄鴠昒昳鶗昑毾暡昅昤毷鷐歞欥骫暰毼鷃曒暆暗曠暉曦晾暝暄昉晥炚晬晱曈晼暽暀昹昡暲昈旼照昭暇曜暐韙暌昵晙曊勖鄤昲昢暩曮暺曄曚暯暄晥晼果男思界畢甲里田異壘累愚胃疊畏毘畀纍禺罍畾礨櫐畟褁罫顆畸疇町畦顒畎畤嬲略夥鴨畋畛畈畇畽甽鷝鸓畔畹疄甿野墅毗畯畷畹四買羅眾罵置罪罷罰署罩蜀羈罣罹睪罡詈罝羆罟罘羃罻罿羇罳罬罽罛羉罜瞏罥罾罭罠罦罼奰罞罧罨罺罶斀鷶斁鸀歜鸅翾豐出山崇岸幽豈嵐嶺崗岩崩崔崙崖崑巍巖祟炭嶽巔嵩嶄岑崁嵌崧岌崽崴岦蚩嶔芔峇嵅崟崒峟峎嵬嵹崀峞嶈峛崋峚屮嶊岝峉耑嵿嶪輋崶嶡嵂嶉崮嵙嶚嶯雟巋岧岢巃崱崣嶜嶭岕巂峷崺嵾嶲巀嶷嵀岪屴崎峽峙岐峘嶇崚獃顗峏崍嶀顓岍岏崦岠嵽峓峸嶱嵁峔峌崝嶆巇崠嵥巏岵峿岈屼巘嶢峬岯巕崸崨岫峭覬岬峒剴峴嶁嵎嶩剬剻屾嶧岟崼嵑嶵岨崵崿峰凱嶼艷峨崢屹峋嶠峈峗峆嵨嵊峪颽巉嵢岭嶓嶮嵲崤岒歂崳嵷岆崲崥岣岋崏敳岓巑嵕岉岶嶕嶸嶙嶂崆嵯峖嵃岮崞岤崷嵣崹嵱嶗嵼嶒嵫巆嶬嵉嶟峐峻崛嵋岷酆嶍岥屺屻糶嵺崰嵧岰嶝嶰峮崌崿嶱巏巕崆峖岮岤嵱會全合今金命拿念舍令介含食愈企貪余盒倉傘鑫禽俞侖仝畬佘翕衾龕樖酓嵞尒畣仚僉悆弇龠峹盦汆錯錢領鐵針鎮斜鍊饒鋪錶釘鈍鈺餌鑄鏈鉅銬鏢釷鈣鉗鎘錨鈦鐽餞鉦頷鈃錡飩鈷鋏鐳頜鋹釭鈸鍺鍇鉞鈽鐃鐐鈜鉐錸餔錵銝饉鑵鍼鑷鏄銍錴鋩銢鑊鍱釫錆餗鏚錤錼鋕鏏鎑顩鏵鏌鉔鑈餑錂顉饐鑩鈳鍣鋀銕銠鎱鏸饃釮鈇鋞鎍鉽錒釴鑐錏鉺釬釱鐕銔鐷鋉饎鋠饁鋙鋮餰龤饛餪鑮鑨餀銪鈚鉥饙鋱錛鑝銈銇鎛銆鑆鎒銙鎝鐼銌鐔鋍銡鍷钀鎷飣鍖釪餖鑶鋄鏂鉣銶饇鐑銊餺鑉錵創劍鋼銷鎖鍋銅餵錫鑼鋁鈔蝕饋饅鐸鎧釗鋇鈿劊鉀鈾錮銲鈉鋰鏤餛覦鐺錕釦鍶鐲鍚鍘錩鏜鍔鋘鐶鑭鉭鉲鉬鉆鎉錁鏍鑪鐹鐻銧鐬鎤饖鍞鏬鏷銣鐊鉶鐀鍉錹鐪敆鍻銦釙鍡鋗鐰錪鈤鑸鏿鏝钂鉏鈙鈏餇鍆餲錌饓鏀鑤鏹钁餳鏙鎲鋓鑢鋧鉠鑴鐋錔鋿銘餘飯鋒飲鑑釣鍾飽鈴飾錦銳欽鑽敘鑰餓鈞鏘鉛鴿鉤斂錐飢鎚鍛錚銓飪餒鎳鈑錘餿鎗餡歛釧餚饞鉻餉鍰鎢銼鈐銖鉑鴒銑餽餬鍇飭歙鐫銩銋鏃鎩鉎鉹銗鑯飫鋯鉿鋌鍠鉋銚欱銵懖鏇鶬銫鋂釩鈲鎨鍐鈆龢鑱釚鏼錍錎鎃鎪鎴錭鍧雂餧錀鏦鎞憌鋝鐱餂釳釤鉓雓稌釽鐌龤鋨鏾鐇鈚飥鐎鍑鈒鳹鎎鑕鎀鉖鋊鉌鑀鋡饡鋋釸鈅餩鈖鍎敜錉銛錋鸙釿餭鐓鑗鎙餼鋾鍤鉯鏶館鐘鏡銳餅斜餃鍍鏟鎔銃鑲鎂鑣鏞鐮鋅銂錠鋃鎊鉉鎬鎰銨鍬鐿錧鎌鐙鑌鋐鎕銻饈鏮銤錞鐒鐏鉈鉍鉸鑇銥錟飶鎡鈰饟鉼鏑韽鎵鏔鈄鍕錝鐠鏣錥鉒鋺鑳鑏鍹鍗餤鏻鑅鏕鐩鈧鈊鎈饘餫鈁錈鉡鈥鋎錓鈂錄鍵銀舒鈕飼釵鏽鋸饑餾翎鋤鑞鏗飴鑠鎯錳郃鍥饌錙鈹鉚鉊鐍鈱鈮鈀鄶鋷釔鉰鍭鎦鐉鍜鐖釹鋦餱鏒鈶餕餯錣釓餟釨鉧鋑鈗釢鋟釕鉾钃鎟鈌飹鐨鏺鏐鍒鍏鋁釦鍔鋘銣鋗鐰錯錨錵鑵鋩鑊鏵鏌鍣饃鐷饛鑮餀鑝鎝鑶鑉鏼館鎔錠銨錧鑌鋐鉈鎵鏔錝鋺鑳鑏鍹鋎多名各色象久魚角免負急危龜冬魯夕兔詹灸炙夤夆奐螽敻毚然鰱鱷鱈魷鮭鰭鰣桀鮪斛鯁魽鰈舛鰾鮕魱鱄鯕魟鱺魨鱖鯖鱁鮒觫鰆鯃魺觟鮨鰿觩鮇魼魾鱴觰鰽鯆鯠鯪鱙鰔鰋鱹觨頯甔觾鮚頠鱱鰤觭鯄鯥鮞外觸咎鯉鰻鯤鱸昝鱧鰓鰥触鯧鰬魻觥鯷劖鱋鮦鱢魶鮹鯦鯡魦鱞鰨鮛觛鱨觶鮂鰅觿鱦夠煞穌觴鮑鯰鯛鷂魠繇飧鱌鰷颻鯓雒鯀鰗鮠觝鮢鮯觡鮨鱠鮈觚觼魬鮽魤鮸觬鱎鵅鱵鯢觤鮡鰒魵鱮鮓觙鰩欿魡鵵鮥鱕鯚鰉鮮燄鱗鯨鰍鮀鮫鱔鱒鱆鰫鯙魧鮅觲鯇鱣魰鰜鰝鱭魴鮵鯜解怨蟹勉鴛鯽觔鰡鱘妴鱳魛鯔鰳眢鱊駌夗觻鰹鰼鯸觖鰇鰶翗鯫鱍鱐郺鮶酁鰎鮿觓鯞鱢觶鱴鱹鮀鰫鯇鳳凰風凡朵几夙殳飉飋颬颺剁颶颸颭颲颳颼颮颩颱飀飂颾香委季秀禿禾黍馫盉積秤穗頹穫稜稽稹稙秣秕嵇穔穡稓瓾秷稑秠秬瓴穊秸馣稢馞稘稫戧穘秫和程利租稍秒黏梨穢稷犁秧种稞穠稈秞穨稛馧覣秈馡稒種稱移穩稅黎稀秩魏稚稻穆稠馥稔稹黧秝稗秏穭秅穚稐秕犩秪秖鵚穛稯稨稃秭秎鯬鵹穱科秋愁秘稅稿稼鶖穜穮穧馝稊稂甃蝵秺穰稨馦穟揫穬稕媝黐私穖馜稰稄穄秜秮稦穇穋和程穫稼秺章意音立竟帝旁辛童妾啻龍靖襲辣壟龔聾竑礱頀蠪竦瓿韺龑龒戠讋龘鸗站親端韻竭剖新彰毅颯贛戇竫鴗歆敨鶙竷鷾韸竘韹氃辦辯競辨瓣辮竤部韶翊竣竮鄣韻頀韺竤麼應度底座廣魔康廠店府麻鷹序慶廳廢塵席摩庫床庭庸廖唐磨廉鹿廁腐廟龐廂廚廊庚庄廓廈廬廝靡庶膺庇庵庠麾糜庖鏖庾犘庛廌麤麋廄庳麝庹廕廋麂廩麚廆廎庥縻賡麃庤麠庬廔麔庈庰麑蠯穈黀廒爢廨庴庋庱麌廡庮廯庨麈廇塺麎廧庀麆庂庢庪廗黂廛螷麀麛廞廦麡廥廑廲緳廅麍麜麇庌庣庲庉廘廙廱庍廜麙廮麒剫劘鷓鶶鶊鷛麟鄺鄘鄜痛病疲疾瘦瘋癡痴症療疼痕瘟癢痞癮癌疫癒疤疵痘瘤疚瘡癱痊痲瘖癖疹癥瘀瘓痔痠瘴痺癲疙瘩痣痰癟瘍痧癩癈瘁痢疝痙瘐痍瘠癬痾瘉痹痂瘧疥瘸痱痟癘痒痼痿瘜痐疪癆痳癤癇疽疺痌痁疸癰痤瘃痷瘌瘚痭痚疕疔疣癙瘼瘕瘳痗痋癭癵痝瘛癉瘥痀疻瘺痎瘢癃瘰癗痡瘣疘癠瘽癐疰癪癜瘔疢瘊疳痏瘨痯瘭瘞瘱痵痻疧瘝痄疶疿痑瘙瘲痸瘑瘯痦瘵痽癚癓瘏瘈痶言請謝計試討語講讀評護諸誠詩誌諾訂誇証謀謹謊訝諧譚諜詰誡訶詣訐誣詼譁謨諫誑謳諶諴謮讌詎詁訌訧讙誆誧謋譪詌謣訏諵譓讞謤譇諲譊詿謰讈諑誫諘譆謜詴詍訹讘譖諨詙諃譿訰譸誙誄誖諓諆謓訿誺課誤謂訓譯詗譴詛訕謾訥誹謔謁譟詘謖誚諤讜諟訃詀譨讕誻譝諯諕諰諿謯謼譋讄訬譂詷謱說話論許誰設訴調訓詢託誕讚謠誘詭諧診諷詮諮詐誅誨詬諂詣訟訢訛諭譙謅諍詆諉諛謢諼讒訖詄讖諡諗誥譭譫譑謏諈誃諞詻譕諀詅讂謒詺諻謆譣諙謑誂訞譗詵謕誽譈譒謥譀讔謻訿說該讓議識談證註詳誼譜諒訪詠謎謙諦謗諺諳詫諄謐謫誏譠誸詨誶諢謞謚諞詊詑譐詶譹謆讅譧謶謪譾讟誁諠謧這訊認記證詞謬訣誦譏諱詔譎詒詡詘誒譔譅諏諔誋訒謘譺詖訑詏諝謵誤譟諤諿譂護諾謊譁謨讙譪譗誼詫詑讅諠展局屬居層尼屆尾屋尺屁屠屏屍屈尿屑屎履屢犀屐屜屌尸尻屄屣屙羼孱屝屨屇屪屭屧屖屩慰尉熨褽犚刷咫剭殿臀壂斸鶌鳲鶋鷵壁臂譬劈璧辟躄擘檗糪繴鷿憵幦襞嬖鼊甓屘郿咫己忌异改鵋邔妀又桑叉蚤圣顙剟鵽欼敪毲歠系糸經結紅練續純績緒繞縛綺絨緬綾紜縹紕紂緘紲繚紘綪縝縉紺絿紆綀縳纚紑繨糽縥縺緶紌絰縟緉纈紶緙紎緎繐絎絊繻縤綍緁纋絔緪緀縸縓緛絓紱綝綆紨網組細納綱綽繩紗紳緝繃縷繹緹緋繾絹纓緲綑絀綃縵繯縕絽纗繉紬繟紻纀緺綹縰繢纙紃緆纆緗縲縜繷緦繰紖絖緄絧絪絏纑繓絅繀縎縪給總級線約終維絡紙縱紛緩繳繪綿緻纖縫綸絢纜綢綏緋緞紕綵絳纔紈綬縝絻縐絩絇盭鴢紇縚繙緮紟絺繌縋絑纘紾絁綎縼纁繺綞紝紩綼綖繑綒絼綯絘紒綌繖緟緌絟緰統編縮織綜纏紋絃締綻絆繽繕紡絞綣綩縞絣綷縊綰繒絯縯纊纕繸綈紸緧繜繶縖縑縌繂鶭縒緷縗縴綄綡縭綧紵絒紽繗縍紏綟縡緂繵紞樂幾變絕響戀緣蠻紹繼紀幻鄉綠絲幼彎紐糾緯綁嚮繡饗鷥巒欒綴繆紓鑾鸞矕攣絀畿臠轡孿紉緇孌繲奱緡縿紿繣繅曫紼縃繘縔緅綅繈蠁紁縩緱緝絹絽繟縜繰縸縮綜綻繽綩綰縯縖綄紵紽縡"
    } else if ((!Q9StrokeIME && NS4 && bVer < 5) || !NS4) {
        eval('q9data = ' + layerref + '.document.q9dataform.q9data.value')
    }
    if ((NS4 && bVer < 5) || !NS4) {
        eval('spacechar = ' + layerref + '.document.q9dataform.spacechar.value');
        eval('lianxiang = ' + layerref + '.document.q9dataform.lianxiang.value')
    }
    if (spacechar.length == 2) {
        q9data = q9data.replace(/\./gi, "..")
    }
    q9dataok = 1;
    for (i = 1; i < 10; i++) {
        var aasss = findthelianxiang('趲', i)
    }
}

function ShowQ9Pic() {
    if (flag == 0) {
        if ((NS4 && bVer < 5) || !NS4) {
            eval(layerRef + '["q9char"]' + styleSwitch + '.visibility="hidden"');
            eval(layerRef + '["q9pic"]' + styleSwitch + '.visibility="visible"')
        } else {
            eval("getid('q9char').style.visibility='hidden'");
            eval("getid('q9pic').style.visibility='visible'")
        }
    }
}

function HideQ9Pic() {
    if ((NS4 && bVer < 5) || !NS4) {
        eval(layerRef + '["q9char"]' + styleSwitch + '.visibility="visible"');
        eval(layerRef + '["q9pic"]' + styleSwitch + '.visibility="hidden"')
    } else {
        eval("getid('q9char').style.visibility='visible'");
        eval("getid('q9pic').style.visibility='hidden'")
    }
}

function dobackspace() {
    GetTargetControl();
    if (target.charAt(0) == "#") {
        tempTgt = target.substr(1);
        eval("tempText = parent.document.getElementById('" + tempTgt + "').value;");
        var obj = eval("window.parent.document.getElementById('" + tempTgt + "')");
        if (IE4) {
            var txt = obj.createTextRange();
            txt.moveStart('character', obj.value.length);
            txt.collapse(true);
            txt.select()
        } else {
            obj.setSelectionRange(0, obj.value.length);
            obj.focus()
        }
    } else {
        eval("tempText = parent.document." + target + ".value;");
        var obj = eval("window.parent.document." + target);
        if (IE4) {
            var txt = obj.createTextRange();
            txt.moveStart('character', obj.value.length);
            txt.collapse(true);
            txt.select()
        } else {
            obj.setSelectionRange(0, obj.value.length);
            obj.focus()
        }
    }
    var a = tempText.length;
    a = a - 1;
    if ((tempText.charCodeAt(a) == 10) || (tempText.charCodeAt(a) == 13)) {
        a = a - 1
    }
    if (a > 0) tempText = tempText.substr(0, a);
    else tempText = "";
    if (target.charAt(0) == "#") {
        tempTgt = target.substr(1);
        eval("parent.document.getElementById('" + tempTgt + "').value = tempText;")
    } else {
        eval("parent.document." + target + ".value = tempText;")
    }
}

function findthelianxiang(thevalue, i) {
    var tempa = lianxiang.indexOf('0' + thevalue);
    var tempb = lianxiang.indexOf('0', tempa + 2);
    var start = lianxiang.indexOf('0' + thevalue) + 1 + i;
    var end = start + 1;
    if (start >= tempb) {
        lianxiangcount = lianxiangcount + 1;
        var result = lianxiang.substring(lianxiangcount, lianxiangcount + 1)
    } else {
        var result = lianxiang.substring(start, end)
    }
    return result
}

function dofindlianxiang(thevalue) {
    var ttt = thevalue;
    rawText = "";
    for (i = 1; i < 10; i++) {
        if (NS4) {
            if (bVer >= 5) {
                if (thevalue == "") {
                    eval('document.q9charform.c' + i + '.value=lianxiang.substring(' + i + ',' + (i + 1) + ')')
                } else {
                    eval('document.q9charform.c' + i + '.value=findthelianxiang(ttt,i)')
                }
            } else {
                if (thevalue == "") {
                    eval('document.q9char.document.q9charform.c' + i + '.value =lianxiang.substring(' + i + ',' + (i + 1) + ')')
                } else {
                    eval('document.q9char.document.q9charform.c' + i + '.value = findthelianxiang(ttt,i)')
                }
            }
        } else {
            if (thevalue == "") {
                eval('document.all.c' + i + '.innerText = lianxiang.substring(' + i + ',' + (i + 1) + ')')
            } else {
                eval('document.all.c' + i + '.innerText = findthelianxiang(ttt,i)')
            }
        }
    }
    lianxiangcount = 0
}

function ShowQ9StrokePic() {
    if (NS4 && bVer >= 5) {
        eval("getid('q9bigchar').style.visibility='hidden'");
        eval("getid('q9char').style.visibility='visible'");
        eval("getid('q9pic').style.visibility='visible'")
    } else {
        eval(layerRef + '["q9bigchar"]' + styleSwitch + '.visibility="hidden"');
        eval(layerRef + '["q9char"]' + styleSwitch + '.visibility="visible"');
        eval(layerRef + '["q9pic"]' + styleSwitch + '.visibility="visible"')
    }
}

function ShowQ9StrokeCharPic() {
    if (NS4 && bVer >= 5) {
        eval("getid('q9bigchar').style.visibility='hidden'");
        eval("getid('q9char').style.visibility='visible'");
        eval("getid('q9pic').style.visibility='visible'")
    } else {
        eval(layerRef + '["q9bigchar"]' + styleSwitch + '.visibility="hidden"');
        eval(layerRef + '["q9char"]' + styleSwitch + '.visibility="visible"');
        eval(layerRef + '["q9pic"]' + styleSwitch + '.visibility="visible"')
    }
}

function SetQ9Pic(thePic) {
    if (NS4 && bVer >= 5) {
        eval("document.q9stage.src=thePic.src")
    } else {
        eval(q9picSwitch + '.q9stage.src = thePic.src')
    }
}

function GetLen(theString) {
    return (theString.length / spacechar.length)
}

function GetCharAt(theString, theIndex) {
    if (spacechar.length == 2) {
        return (theString.charAt(theIndex * 2) + theString.charAt(theIndex * 2 + 1))
    } else {
        return (theString.charAt(theIndex))
    }
}

function IMLookUp(theKey, ywIndex, theMode) {
    switch (theMode) {
        case 1:
            if (Q9StrokeIME) {
                seekText = DoDictLookUp(theKey, 0)
            } else if (Q9IME) {
                seekText = DoDictLookUp(theKey, 0)
            } else if (PYIME) {
                seekText = DoDictLookUp(theKey, ywIndex)
            } else {
                seekText = DoDictLookUp(theKey, 0)
            }
            curPage = 1;
            break;
        case 2:
            curPage = (curPage <= 1) ? Math.floor((GetLen(seekText) - 1) / 9 + 1) : (curPage - 1);
            break;
        case 3:
            curPage = (curPage * 9 >= GetLen(seekText)) ? 1 : (curPage + 1);
            if (Q9StrokeIME) {
                if (curPage == 1) {
                    klookUpModeNextLoopBackIndex = 1;
                    selectCharMode = 1
                }
            }
            break
    }
    DoRedraw()
}

function Q9StrokeGetSeekChar(seekText, page, index) {
    if (page == 1) {
        charIndex = (page - 1) * 9 + index - 1
    } else {
        charIndex = ((page - 1) * 9 + index - 1) + 4
    }
    if (charIndex < GetLen(seekText)) {
        switch (charIndex) {
            case 0:
                charIndex = 1;
                break;
            case 1:
                charIndex = 2;
                break;
            case 2:
                charIndex = 4;
                break;
            case 3:
                charIndex = 6;
                break;
            case 4:
                charIndex = 7;
                break;
            case 5:
                charIndex = 8;
                break;
            case 6:
                charIndex = 10;
                break;
            case 7:
                charIndex = 11;
                break;
            case 8:
                charIndex = 12;
                break
        }
        var tempnum = GetCharAt(seekText, charIndex);
        if (tempnum == '８' || tempnum == '8' || tempnum == '0' || tempnum == '$' || tempnum == ',' || tempnum == '(') {
            return ''
        } else {
            return (GetCharAt(seekText, charIndex))
        }
    } else if (spacechar == '８' || spacechar == '8' || spacechar == '0') {
        return ''
    } else {
        return spacechar
    }
}

function GetSeekChar(seekText, page, index) {
    charIndex = (page - 1) * 9 + index - 1;
    return (charIndex < GetLen(seekText)) ? GetCharAt(seekText, charIndex) : spacechar
}

function DoRedraw(thevalue) {
    var temp;
    if (Q9StrokeIME) {
        if ((rawText.length == 1) && (rawText == ".")) {
            SetQ9Pic(q9_h1);
            xflag = 1
        } else if ((rawText.length == 2) && (rawText == ".0")) {
            SetQ9Pic(q9_h2);
            xflag = 1
        } else if (rawText.length == 1) {
            if (keypadEventMode == 1) {
                SetQ9Pic(q9K[rawText]);
                kflag = 1
            } else {
                if (rawText == '0') {
                    nflag = 1
                }
                SetQ9Pic(q9[rawText]);
                if (rawText == '4' || rawText == '5' || rawText == '7' || rawText == '8' || rawText == '9') {
                    buflag = 1;
                    for (i = 1; i < 4; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=""')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value=""')
                            }
                        } else {
                            eval('document.all.c' + i + '.innerText=""')
                        }
                    }
                    if (NS4) {
                        if (bVer >= 5) {
                            eval('document.q9charform.c6.value=""')
                        } else {
                            eval('document.q9char.document.q9charform.c6.value=""')
                        }
                    } else {
                        eval('document.all.c6.innerText=""')
                    }
                }
            }
            if (GetLen(seekText) > 0) {
                if (NS4) {
                    for (i = 1; i <= 9; i++) {
                        if (rawText >= 4 && rawText <= 9 && rawText != 6) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=Q9StrokeGetSeekChar(seekText,curPage,i)')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value =Q9StrokeGetSeekChar(seekText, curPage, i)')
                            }
                        } else {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=GetSeekChar(seekText,curPage,i)')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value = GetSeekChar(seekText, curPage, i)')
                            }
                        }
                    }
                } else {
                    for (i = 1; i <= 9; i++) {
                        if (rawText >= 4 && rawText <= 9 && rawText != 6) {
                            eval('document.all.c' + i + '.innerText = Q9StrokeGetSeekChar(seekText, curPage, i)')
                        } else {
                            eval('document.all.c' + i + '.innerText = GetSeekChar(seekText, curPage, i)')
                        }
                    }
                }
                if (PreviousKeyCode.charAt(PreviousKeyCode.length - 1) == '-' && curPage == 1) {
                    if (PreviousKeyCode.charAt(0) >= 4 && PreviousKeyCode.charAt(0) <= 9 && PreviousKeyCode.charAt(0) != 6) {
                        SetQ9Pic(q9K[rawText]);
                        kflag = 1;
                        ShowQ9StrokeCharPic();
                        Q9StrokeNextPageMode = 0
                    } else {
                        SetQ9Pic(q9_s4);
                        lflag = 1;
                        ShowQ9StrokeCharPic()
                    }
                } else if (keypadEventMode == 1) {
                    ShowQ9StrokeCharPic()
                } else if (curPage >= 2) {
                    SetQ9Pic(q9_s4);
                    lflag = 1;
                    ShowQ9StrokeCharPic()
                } else if (klookUpModeNextLoopBackIndex == 1) {
                    if (rawText >= 4 && rawText <= 9 && rawText != 6) {
                        SetQ9Pic(q9K[rawText]);
                        kflag = 1;
                        ShowQ9StrokeCharPic()
                    } else {
                        SetQ9Pic(q9_s4);
                        lflag = 1;
                        ShowQ9StrokeCharPic()
                    }
                } else {
                    ShowQ9StrokePic()
                }
            } else {
                ShowQ9Pic();
                SetQ9Pic(q9_n);
                for (i = 1; i < 10; i++) {
                    if (NS4) {
                        if (bVer >= 5) {
                            eval('document.q9charform.c' + i + '.value=""')
                        } else {
                            eval('document.q9char.document.q9charform.c' + i + '.value=""')
                        }
                    } else {
                        eval('document.all.c' + i + '.innerText=""')
                    }
                }
                nflag = 1;
                yrawText = rawText;
                rawText = ""
            }
        } else if (rawText.length == 3) {
            if (rawText == '010') {
                SetQ9Pic(q9[0]);
                nflag = 1
            } else {
                SetQ9Pic(q9_s4);
                lflag = 1;
                ShowQ9StrokeCharPic();
                if (GetLen(seekText) > 0) {
                    if (NS4) {
                        for (i = 1; i <= 9; i++) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=GetSeekChar(seekText,curPage,i)')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value = GetSeekChar(seekText, curPage, i)')
                            }
                        }
                    } else {
                        for (i = 1; i <= 9; i++) {
                            eval('document.all.c' + i + '.innerText = GetSeekChar(seekText, curPage, i)')
                        }
                    }
                } else {
                    ShowQ9Pic();
                    SetQ9Pic(q9_n);
                    for (i = 1; i < 10; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=""')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value=""')
                            }
                        } else {
                            eval('document.all.c' + i + '.innerText=""')
                        }
                    }
                    nflag = 1;
                    yrawText = rawText;
                    rawText = ""
                }
            }
        } else if (rawText.length == 4) {
            if ((rawText.charAt(0) == 1) && (rawText.charAt(1) >= 1) && (rawText.charAt(2) >= 0) && (rawText.charAt(3) == 0)) {
                SetQ9Pic(q9_s1);
                if (GetLen(seekText) > 0) {
                    if (NS4) {
                        for (i = 1; i <= 9; i++)
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=GetSeekChar(seekText,curPage,i)')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value = GetSeekChar(seekText, curPage, i)')
                            }
                    } else {
                        for (i = 1; i <= 9; i++) {
                            eval('document.all.c' + i + '.innerText = GetSeekChar(seekText, curPage, i)')
                        }
                    }
                    if (curPage >= 2) {
                        SetQ9Pic(q9_s4);
                        lflag = 1;
                        ShowQ9StrokeCharPic()
                    } else if (Q9StrokeNextPageMode == 1 && seekText.length <= 9) {
                        SetQ9Pic(q9_s4);
                        lflag = 1;
                        ShowQ9StrokeCharPic()
                    } else if (klookUpModeNextLoopBackIndex == 1) {
                        SetQ9Pic(q9_s4);
                        lflag = 1;
                        ShowQ9StrokeCharPic()
                    } else if (selectCharMode == 1) {
                        SetQ9Pic(q9_s4);
                        lflag = 1;
                        ShowQ9StrokeCharPic()
                    } else {
                        ShowQ9StrokePic()
                    }
                } else {
                    ShowQ9Pic();
                    SetQ9Pic(q9_n);
                    for (i = 1; i < 10; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=""')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value=""')
                            }
                        } else {
                            eval('document.all.c' + i + '.innerText=""')
                        }
                    }
                    nflag = 1;
                    yrawText = rawText;
                    rawText = ""
                }
            } else if ((rawText.charAt(0) == 1) && (rawText.charAt(1) >= 1) && (rawText.charAt(2) >= 1) && (rawText.charAt(3) != 0)) {
                if (GetLen(seekText) > 0) {
                    if (NS4) {
                        for (i = 1; i <= 9; i++) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=GetSeekChar(seekText,curPage,i)')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value = GetSeekChar(seekText, curPage, i)')
                            }
                        }
                    } else {
                        for (i = 1; i <= 9; i++) {
                            eval('document.all.c' + i + '.innerText = GetSeekChar(seekText, curPage, i)')
                        }
                    }
                    SetQ9Pic(q9_s4);
                    lflag = 1;
                    ShowQ9StrokeCharPic()
                } else {
                    ShowQ9Pic();
                    SetQ9Pic(q9_n);
                    for (i = 1; i < 10; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=""')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value=""')
                            }
                        } else {
                            eval('document.all.c' + i + '.innerText=""')
                        }
                    }
                    nflag = 1;
                    yrawText = rawText;
                    rawText = ""
                }
            } else {
                SetQ9Pic(q9_s4);
                if (!NS4) {
                    lflag = 1
                }
                if (NS4 && xflag == 1) {
                    lflag = 1
                }
                if (NS4 && count == 3) {
                    lflag = 1
                }
                if (GetLen(seekText) > 0) {
                    if (NS4) {
                        for (i = 1; i <= 9; i++) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=GetSeekChar(seekText,curPage,i)')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value = GetSeekChar(seekText, curPage, i)')
                            }
                        }
                    } else {
                        for (i = 1; i <= 9; i++) {
                            eval('document.all.c' + i + '.innerText = GetSeekChar(seekText, curPage, i)')
                        }
                    }
                    ShowQ9StrokeCharPic()
                } else {
                    ShowQ9Pic();
                    SetQ9Pic(q9_n);
                    for (i = 1; i < 10; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=""')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value=""')
                            }
                        } else {
                            eval('document.all.c' + i + '.innerText=""')
                        }
                    }
                    nflag = 1;
                    yrawText = rawText;
                    rawText = ""
                }
            }
        } else if (rawText.length == 2) {
            SetQ9Pic(q9_s2);
            if (GetLen(seekText) > 0) {
                if (NS4) {
                    for (i = 1; i <= 9; i++) {
                        if (bVer >= 5) {
                            eval('document.q9charform.c' + i + '.value=GetSeekChar(seekText,curPage,i)')
                        } else {
                            eval('document.q9char.document.q9charform.c' + i + '.value = GetSeekChar(seekText, curPage, i)')
                        }
                    }
                } else {
                    for (i = 1; i <= 9; i++) {
                        eval('document.all.c' + i + '.innerText = GetSeekChar(seekText, curPage, i)')
                    }
                }
                if (curPage >= 2) {
                    SetQ9Pic(q9_s4);
                    lflag = 1;
                    ShowQ9StrokeCharPic()
                } else if (Q9StrokeNextPageMode == 1 && seekText.length <= 9) {
                    SetQ9Pic(q9_s4);
                    lflag = 1;
                    ShowQ9StrokeCharPic()
                } else if (klookUpModeNextLoopBackIndex == 1) {
                    SetQ9Pic(q9_s4);
                    lflag = 1;
                    ShowQ9StrokeCharPic()
                } else if (selectCharMode == 1) {
                    SetQ9Pic(q9_s4);
                    lflag = 1;
                    ShowQ9StrokeCharPic()
                } else {
                    ShowQ9StrokePic()
                }
            } else {
                ShowQ9Pic();
                SetQ9Pic(q9_n);
                for (i = 1; i < 10; i++) {
                    if (NS4) {
                        if (bVer >= 5) {
                            eval('document.q9charform.c' + i + '.value=""')
                        } else {
                            eval('document.q9char.document.q9charform.c' + i + '.value=""')
                        }
                    } else {
                        eval('document.all.c' + i + '.innerText=""')
                    }
                }
                nflag = 1;
                yrawText = rawText;
                rawText = ""
            }
        } else if (rawText.length == 0) {
            var the = '';
            if (the.length < 1) {
                ShowQ9Pic();
                SetQ9Pic(q9_s)
            }
        }
    } else {
        if (rawText.length == 1) {
            ShowQ9Pic();
            if (Q9IME) {
                SetQ9Pic(q9[rawText])
            } else if (Q9StrokeIME) {
                SetQ9Pic(q9[rawText])
            } else {
                if (pyIndex == 1) {
                    SetQ9Pic(q9_s3);
                    pyIndex = 0
                } else {
                    SetQ9Pic(q9_s2)
                }
            }
        } else if (rawText.length == 0) {
            ShowQ9Pic();
            SetQ9Pic(q9_s)
        } else if (rawText.length == 2) {
            if (Q9IME) {
                if ((rawText.charAt(0) != '0') && (rawText.charAt(1) != '0')) {
                    ShowQ9Pic();
                    SetQ9Pic(q9_s2)
                } else {
                    if (GetLen(seekText) > 0) {
                        HideQ9Pic();
                        lflag = 1;
                        curSeekText = seekText.substr((curPage - 1) * 9, 9);
                        if (NS4) {
                            lflag = 1;
                            for (i = 1; i <= 9; i++) {
                                if (bVer >= 5) {
                                    eval('document.q9charform.c' + i + '.value=GetSeekChar(seekText,curPage,i)')
                                } else {
                                    eval('document.q9char.document.q9charform.c' + i + '.value = GetSeekChar(seekText, curPage, i)')
                                }
                            }
                        } else {
                            for (i = 1; i <= 9; i++) {
                                eval('document.all.c' + i + '.innerText = GetSeekChar(seekText, curPage, i)')
                            }
                        }
                    } else {
                        ShowQ9Pic();
                        SetQ9Pic(q9_n);
                        rawText = ""
                    }
                }
            } else if (CYIME) {
                if (((rawText.charAt(1) == '7') || (rawText.charAt(1) == '8') || (rawText.charAt(1) == '9')) && (rawText.length == 2)) {
                    ShowQ9Pic();
                    SetQ9Pic(q9_s3)
                } else {
                    if (GetLen(seekText) > 0) {
                        HideQ9Pic();
                        curSeekText = seekText.substr((curPage - 1) * 9, 9);
                        lflag = 1;
                        if (NS4) {
                            for (i = 1; i <= 9; i++) {
                                if (bVer >= 5) {
                                    eval('document.q9charform.c' + i + '.value=GetSeekChar(seekText,curPage,i)')
                                } else {
                                    eval('document.q9char.document.q9charform.c' + i + '.value = GetSeekChar(seekText, curPage, i)')
                                }
                            }
                        } else {
                            for (i = 1; i <= 9; i++) {
                                eval('document.all.c' + i + '.innerText = GetSeekChar(seekText, curPage, i)')
                            }
                        }
                    } else {
                        ShowQ9Pic();
                        SetQ9Pic(q9_n);
                        rawText = ""
                    }
                }
            } else {
                if (rawText.charAt(1) == 0) {
                    temp = rawText.charAt(0);
                    if (temp >= 7) {
                        temp = FileMapping.charAt(temp - 4)
                    } else {
                        temp = FileMapping.charAt(temp - 1)
                    }
                } else {
                    temp = rawText.charAt(1)
                }
                ShowQ9Pic();
                SetQ9Pic(q9[temp])
            }
        } else {
            if (GetLen(seekText) > 0) {
                HideQ9Pic();
                lflag = 1;
                curSeekText = seekText.substr((curPage - 1) * 9, 9);
                if (NS4) {
                    for (i = 1; i <= 9; i++) {
                        if (bVer >= 5) {
                            eval('document.q9charform.c' + i + '.value=GetSeekChar(seekText,curPage,i)')
                        } else {
                            eval('document.q9char.document.q9charform.c' + i + '.value = GetSeekChar(seekText, curPage, i)')
                        }
                    }
                } else {
                    for (i = 1; i <= 9; i++) {
                        eval('document.all.c' + i + '.innerText = GetSeekChar(seekText, curPage, i)')
                    }
                }
            } else {
                ShowQ9Pic();
                SetQ9Pic(q9_n);
                rawText = ""
            }
        }
    }
}

function emulateKeyUp(theKeyCode, optionIndex) {
    flag = 0;
    if ((!q9coreok) || (!q9dataok)) {
        return
    }
    if (Q9StrokeIME) {
        eventType = 0;
        ActionQ9StrokeKeyUp(theKeyCode, optionIndex)
    } else if (Q9IME) {
        ActionQ9KeyUp(theKeyCode)
    } else if (PYIME) {
        ActionPYKeyUp(theKeyCode, optionIndex)
    } else {
        ActionCYKeyUp(theKeyCode)
    }
}

function keyup(num) {
    if ((!q9coreok) || (!q9dataok)) {
        return
    }
    if (Q9StrokeIME) {
        eventType = 1;
        var vi = num;
        if ((vi != 46) && (vi < 48 || vi > 57) && (vi != 43) && (vi != 45) && (vi != 42)) {
            flag = 1;
            DoFixText(1, String.fromCharCode(vi))
        }
        if (vi == 48 && sbflag == 1) {
            if (nflag == 1) {
                rawText = '';
                sbflag == 0;
                bflag = 0;
                nflag = 0
            } else {
                if (buflag == 1) {
                    buflag = 0;
                    bbuflag = 1;
                    SetQ9Pic(q9K[rawText])
                } else {
                    SetQ9Pic(q9_s4);
                    if (rawText == '1110' || rawText == '1120' || rawText == '1130' || rawText == '1140' || rawText == '1150' || rawText == '1160' || rawText == '1170' || rawText == '1180' || rawText == '1190' || rawText == '1200' || rawText == '1210' || rawText == '1220' || rawText == '1230' || rawText == '1240' || rawText == '1250' || rawText == '1260' || rawText == '1270' || rawText == '1280' || rawText == '1290' || rawText == '1230') {
                        ActionQ9StrokeKeyUp(vi, 0)
                    }
                }
                lflag = 1;
                sbflag = 0;
                buflag = 0
            }
            eri = 0;
            lzy = 0;
            count = 0;
            jflag = 1
        } else if ((vi == 43 || vi == 45 || vi == 48) && bflag == 0) {
            if (rawText == '7' || rawText == '8' || rawText == '9' || rawText == '4' || rawText == '5') {
                if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                    if (vi == 48) {
                        vi = 43
                    }
                    flag = 0;
                    ActionQ9StrokeKeyUp(vi, 0);
                    if (kflag == 0) {
                        kflag = 1
                    }
                    if (kflag == 1) {
                        if (yrawText != '') {
                            rawText = yrawText;
                            yrawText = ''
                        }
                        if (rawText == '7' || rawText == '8' || rawText == '9' || rawText == '4' || rawText == '5') {
                            kflag = 1;
                            if (vi == 45 || vi == 43) {} else {
                                ActionQ9StrokeKeyUp(vi, 0)
                            }
                        } else {
                            ActionQ9StrokeKeyUp(vi, 0);
                            kflag = 0
                        }
                    }
                    for (i = 1; i < 10; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                tempb = eval('document.q9charform.c' + i + '.value')
                            } else {
                                tempb = eval('document.q9char.document.q9charform.c' + i + '.value')
                            }
                            if (tempb == '　') {
                                bluesky = 1
                            } else {
                                bluesky = 0
                            }
                        } else {
                            tempb = eval('document.all.c' + i + '.innerText');
                            if (tempb == '　') {
                                bluesky = 1
                            } else {
                                bluesky = 0
                            }
                        }
                    }
                    if (bluesky == 1) {
                        ActionQ9StrokeKeyUp(vi, 0)
                    }
                    if (xflag == 1) {
                        lflag = 0;
                        bflag = 1;
                        sbflag = 0;
                        xflag = 0
                    }
                    if (kflag == 1) {
                        lflag = 1;
                        bbuflag = 1
                    } else {
                        bbuflag = 0
                    }
                    buflag = 0;
                    count = 0;
                    yrawText = '';
                    eri = 0;
                    lzy = 0
                }
            } else {
                if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                    flag = 0;
                    ActionQ9StrokeKeyUp(vi, 0);
                    if (kflag == 1) {
                        if (yrawText != '') {
                            rawText = yrawText;
                            yrawText = ''
                        }
                        ActionQ9StrokeKeyUp(vi, 0);
                        kflag = 0
                    }
                    if (xflag == 1) {
                        lflag = 0;
                        bflag = 1;
                        sbflag = 0;
                        xflag = 0
                    }
                    buflag = 0;
                    bbuflag = 0;
                    count = 0;
                    yrawText = '';
                    eri = 0;
                    lzy = 0
                }
            }
        }
        if (lflag == 1 && vi != 46 && vi != 48 && vi > 48 && vi < 58) {
            var xuhao = vi - 48;
            SetQ9Pic(q9_xz);
            var tempa;
            if (NS4) {
                if (bVer >= 5) {
                    tempa = eval('document.q9charform.c' + xuhao + '.value')
                } else {
                    tempa = eval('document.q9char.document.q9charform.c' + xuhao + '.value')
                }
            } else {
                tempa = eval('document.all.c' + xuhao + '.innerText')
            }
            if ((bbuflag == 1) && (vi == 49 || vi == 50 || vi == 51 || vi == 54)) {
                flag = 0;
                ActionQ9StrokeKeyUp(vi, 0);
                if (NS4) SetQ9Pic(q9_s2);
                bbuflag = 0;
                lflag = 0;
                bflag = 0;
                buflag = 0;
                sbflag = 1;
                lzy = 0
            } else {
                flag = 1;
                yrawText = rawText;
                DoFixText(1, tempa);
                dofindlianxiang(tempa);
                flag = 0;
                sbflag = 1;
                lflag = 0;
                bflag = 1;
                bbuflag = 0;
                buflag = 0;
                lzy = 1
            }
            eri = 0;
            count = 0;
            jflag = 0
        } else if (vi != 46 && vi != 48 && vi != 42 && vi < 58 && vi > 48) {
            jflag = 1;
            count = count + 1;
            flag = 0;
            if (count == 4 && rawText == '') {
                rawText = yrawText;
                ActionQ9StrokeKeyUp(46, 0);
                yrawText = ''
            }
            if (yrawText.length > 0 && eri == 0) {
                rawText = yrawText;
                ActionQ9StrokeKeyUp(46, 0);
                yrawText = ''
            }
            ActionQ9StrokeKeyUp(vi, 0);
            if (rawText.length > 1) {
                buflag = 0
            }
            if ((rawText.length == 1) && (vi == 49 || vi == 50 || vi == 51 || vi == 54)) {
                buflag = 0
            }
            if (lflag == 1) {
                sbflag = 0;
                bflag = 0;
                if (rawText != '') {
                    yrawText = rawText
                }
            } else {
                if (NS4 && count == 2 && nflag == 0) {
                    SetQ9Pic(q9_s2)
                }
                sbflag = 1;
                bflag = 0
            }
            if (nflag == 1) {
                jflag = 0;
                lflag = 0;
                sbflag = 0;
                nflag = 0;
                if (NS4) {
                    count = 0
                }
            }
            if (xflag == 1) {
                sbflag = 0;
                lflag = 1;
                xflag = 0
            }
            if (NS4 && (rawText == '1001' || rawText == '1002' || rawText == '1003' || rawText == '1004' || rawText == '1005' || rawText == '1006' || rawText == '1007' || rawText == '1008' || rawText == '1009')) {
                lflag = 1
            }
            eri = 0;
            lzy = 0
        }
        if (vi == 46) {
            count = 0;
            flag = 0;
            if (NS4 && rawText.length < 1) {
                ShowQ9Pic()
            }
            if (yrawText != '') {
                rawText = yrawText;
                yrawText = ''
            }
            if (rawText == "") {
                if (lzy == 1) {
                    ActionQ9StrokeKeyUp(48, 0);
                    for (i = 1; i < 10; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=""')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value=""')
                            }
                        } else {
                            eval('document.all.c' + i + '.innerText=""')
                        }
                    }
                    lzy = 0
                } else {
                    for (i = 1; i < 10; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=""')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value=""')
                            }
                        } else {
                            eval('document.all.c' + i + '.innerText=""')
                        }
                    }
                    SetQ9Pic(q9_s)
                }
            } else {
                if (lzy == 1) {
                    yrawText = rawText;
                    rawText = "";
                    ActionQ9StrokeKeyUp(48, 0);
                    for (i = 1; i < 10; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=""')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value=""')
                            }
                        } else {
                            eval('document.all.c' + i + '.innerText=""')
                        }
                    }
                    eri = 1;
                    lzy = 0
                } else {
                    ActionQ9StrokeKeyUp(46, 0);
                    for (i = 1; i < 10; i++) {
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9charform.c' + i + '.value=""')
                            } else {
                                eval('document.q9char.document.q9charform.c' + i + '.value=""')
                            }
                        } else {
                            eval('document.all.c' + i + '.innerText=""')
                        }
                    }
                    eri = 0;
                    lzy = 0;
                    nflag = 0
                }
            }
            sbflag = 0;
            lflag = 0;
            bflag = 0;
            buflag = 0;
            bbuflag = 0;
            jflag = 0
        }
        if (vi == 42) {
            lflag = 0;
            count = 0;
            ActionQ9StrokeKeyUp(42, 0)
        }
    } else if (Q9IME) {
        var vi = num;
        if ((vi != 42) && (vi != 43) && (vi != 45) && (vi != 46) && (vi < 48 || vi > 57)) {
            flag = 1;
            DoFixText(1, String.fromCharCode(vi))
        }
        if (vi == 48 && sbflag == 1) {
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9_s3Pic.src=q9_x.src')
                } else {
                    eval('document.q9char.document.q9charform.q9_s3Pic.src=q9_x.src')
                }
            } else {
                eval('document.all.q9charform.q9_s3Pic.src=q9_x.src')
            }
            lflag = 1;
            q9swapthegif('w');
            lzy = 0;
            jflag = 0
        } else if ((vi == 43 || vi == 45 || vi == 48) && sbflag == 0) {
            if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                flag = 0;
                ActionQ9KeyUp(vi);
                q9swapthegif('w');
                if (lflag == 1) {
                    if (rawText == '420' || rawText == '490' || rawText == '590' || rawText == '540') {
                        keyup(46);
                        SetQ9Pic(q9_n)
                    } else {
                        jflag = 1;
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9_s3Pic.src="../grx/q9_s3.png"')
                            } else {
                                eval('document.q9char.document.q9charform.q9_s3Pic.src="../grx/q9_s3.png"')
                            }
                        } else {
                            eval('document.all.q9charform.q9_s3Pic.src="../grx/q9_s3.png"')
                        }
                    }
                }
                lzy = 0
            }
        }
        if (lflag == 1 && vi != 46 && vi != 48 && vi > 48 && vi < 58) {
            var xuhao = vi - 48;
            var tempa;
            if (NS4) {
                if (bVer >= 5) {
                    tempa = eval('document.q9charform.c' + xuhao + '.value')
                } else {
                    tempa = eval('document.q9char.document.q9charform.c' + xuhao + '.value')
                }
            } else {
                tempa = eval('document.all.c' + xuhao + '.innerText')
            }
            flag = 1;
            SetQ9Pic(q9_s2);
            DoFixText(1, tempa);
            dofindlianxiang(tempa);
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9_s3Pic.src=q9_xz.src')
                } else {
                    eval('document.q9char.document.q9charform.q9_s3Pic.src=q9_xz.src')
                }
            } else {
                eval('document.all.q9charform.q9_s3Pic.src=q9_xz.src')
            }
            flag = 0;
            rawText = '';
            sbflag = 1;
            lflag = 0;
            q9swapthegif('y');
            lzy = 1;
            jflag = 0
        } else if ((vi != 46 && vi != 42 && vi != 48 && vi > 48 && vi < 58) || vi == 42) {
            if (vi == 42 && sbflag == 1) {} else {
                jflag = 0;
                flag = 0;
                ActionQ9KeyUp(vi);
                if (vi == 42) {
                    lflag = 0
                }
                sbflag = 0;
                if (lflag == 1) {
                    if (rawText == '522' || rawText == '566') {
                        keyup(46);
                        SetQ9Pic(q9_n)
                    } else {
                        jflag = 1;
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9_s3Pic.src="../grx/q9_s3.png"')
                            } else {
                                eval('document.q9char.document.q9charform.q9_s3Pic.src="../grx/q9_s3.png"')
                            }
                        } else {
                            eval('document.all.q9charform.q9_s3Pic.src="../grx/q9_s3.png"')
                        }
                    }
                    q9swapthegif('w');
                    lzy = 0
                }
            }
        }
        if (vi == 46) {
            jflag = 0;
            lflag = 0;
            rawText = '';
            flag = 0;
            sbflag = 0;
            if (lzy == 1) {
                ActionQ9KeyUp(48);
                lzy = 0
            } else {
                ActionQ9KeyUp(vi);
                lzy = 0
            }
        }
    } else if (PYIME) {
        var vi = num;
        if ((vi != 42) && (vi != 43) && (vi != 45) && (vi != 46) && (vi < 48 || vi > 57)) {
            flag = 1;
            DoFixText(1, String.fromCharCode(vi))
        }
        if (vi == 48 && sbflag == 1) {
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9temp.src=q9_x.src')
                } else {
                    eval('document.q9char.document.q9charform.q9temp.src=q9_x.src')
                }
            } else {
                eval('document.all.q9charform.q9temp.src=q9_x.src')
            }
            lflag = 1;
            pyswapthegif('w');
            lzy = 0;
            jflag = 0
        } else if ((vi == 43 || vi == 45 || vi == 48) && sbflag == 0) {
            if (rawText == '1' || rawText == '3' || rawText == '2') {} else if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                flag = 0;
                ActionPYKeyUp(vi, 0);
                pyswapthegif('w');
                if (rawText == '6') {
                    rawText = '60';
                    SetQ9Pic(q9[4])
                }
                if (rawText == '80') {
                    if (NS4 && bVer >= 5) {
                        eval('document.q9stage.src="../grx/py3_8.png"')
                    } else {
                        SetQ9Pic(q9[8])
                    }
                }
                if (rawText == '90') {
                    if (NS4 && bVer >= 5) {
                        eval('document.q9stage.src="../grx/py3_9.png"')
                    } else {
                        SetQ9Pic(q9[9])
                    }
                }
                if (rawText == '20') {
                    if (NS4 && bVer >= 5) {
                        eval('document.q9stage.src="../grx/py3_2.png"')
                    } else {
                        SetQ9Pic(q9[2])
                    }
                }
                if (lflag == 1) {
                    jflag = 1;
                    if (NS4) {
                        if (bVer >= 5) {
                            eval('document.q9temp.src="../grx/q9_s3.png"')
                        } else {
                            eval('document.q9char.document.q9charform.q9temp.src="../grx/q9_s3.png"')
                        }
                    } else {
                        eval('document.all.q9charform.q9temp.src="../grx/q9_s3.png"')
                    }
                }
                lzy = 0
            }
        }
        if (lflag == 1 && vi != 46 && vi != 48 && vi > 48 && vi < 58) {
            var xuhao = vi - 48;
            var tempa;
            if (NS4) {
                if (bVer >= 5) {
                    tempa = eval('document.q9charform.c' + xuhao + '.value')
                } else {
                    tempa = eval('document.q9char.document.q9charform.c' + xuhao + '.value')
                }
            } else {
                tempa = eval('document.all.c' + xuhao + '.innerText')
            }
            flag = 1;
            SetQ9Pic(q9_s2);
            DoFixText(1, tempa);
            dofindlianxiang(tempa);
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9temp.src=q9_xz.src')
                } else {
                    eval('document.q9char.document.q9charform.q9temp.src=q9_xz.src')
                }
            } else {
                eval('document.all.q9charform.q9temp.src=q9_xz.src')
            }
            flag = 0;
            rawText = '';
            sbflag = 1;
            lflag = 0;
            pyswapthegif('y');
            lzy = 1;
            jflag = 0
        } else if ((vi != 46 && vi != 48 && vi > 48 && vi < 58) || vi == 42) {
            if (vi == 42 && sbflag == 1) {} else {
                jflag = 0;
                flag = 0;
                ActionPYKeyUp(vi, 0);
                if (vi == 42) lflag = 0;
                sbflag = 0;
                if (lflag == 1) {
                    jflag = 1;
                    pyswapthegif('w');
                    if (NS4) {
                        if (bVer >= 5) {
                            eval('document.q9temp.src="../grx/q9_s3.png"')
                        } else {
                            eval('document.q9char.document.q9charform.q9temp.src="../grx/q9_s3.png"')
                        }
                    } else {
                        eval('document.all.q9charform.q9temp.src="../grx/q9_s3.png"')
                    }
                }
                lzy = 0
            }
        }
        if (vi == 46) {
            jflag = 0;
            lflag = 0;
            rawText = '';
            flag = 0;
            sbflag = 0;
            if (lzy == 1) {
                ActionPYKeyUp(48, 0);
                lzy = 0
            } else {
                ActionPYKeyUp(vi, 0);
                lzy = 0
            }
        }
    } else {
        var vi = num;
        if ((vi != 42) && (vi != 43) && (vi != 45) && (vi != 46) && (vi < 48 || vi > 57)) {
            flag = 1;
            DoFixText(1, String.fromCharCode(vi))
        }
        if (vi == 48 && sbflag == 1) {
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9temp.src=q9_x.src')
                } else {
                    eval('document.q9char.document.q9charform.q9temp.src=q9_x.src')
                }
            } else {
                eval('document.all.q9charform.q9temp.src=q9_x.src')
            }
            lflag = 1;
            cyswapthegif('w');
            lzy = 0;
            jflag = 0
        } else if ((vi == 43 || vi == 45 || vi == 48) && sbflag == 0) {
            if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                flag = 0;
                ActionCYKeyUp(vi);
                cyswapthegif('w');
                if (lflag == 1) {
                    jflag = 1;
                    if (NS4) {
                        if (bVer >= 5) eval('document.q9temp.src="../grx/q9_s3.png"');
                        else eval('document.q9char.document.q9charform.q9temp.src="../grx/q9_s3.png"')
                    } else eval('document.all.q9charform.q9temp.src="../grx/q9_s3.png"')
                }
                lzy = 0
            }
        }
        if (lflag == 1 && vi != 46 && vi != 48 && vi > 48 && vi < 58) {
            var xuhao = vi - 48;
            var tempa;
            if (NS4) {
                if (bVer >= 5) {
                    tempa = eval('document.q9charform.c' + xuhao + '.value')
                } else {
                    tempa = eval('document.q9char.document.q9charform.c' + xuhao + '.value')
                }
            } else {
                tempa = eval('document.all.c' + xuhao + '.innerText')
            }
            flag = 1;
            SetQ9Pic(q9_s2);
            DoFixText(1, tempa);
            dofindlianxiang(tempa);
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9temp.src=q9_xz.src')
                } else {
                    eval('document.q9char.document.q9charform.q9temp.src=q9_xz.src')
                }
            } else {
                eval('document.all.q9charform.q9temp.src=q9_xz.src')
            }
            flag = 0;
            rawText = '';
            sbflag = 1;
            lflag = 0;
            cyswapthegif('y');
            lzy = 1;
            jflag = 0
        } else if ((vi != 46 && vi != 48 && vi > 48 && vi < 58) || vi == 42) {
            if (vi != 42) {
                a42flag = a42flag + 1
            }
            jflag = 0;
            flag = 0;
            if ((a42flag == 2 || a42flag == 1 || a42flag == 3) && lflag == 0 && vi == 42) {
                a42flag = 0
            }
            if (nflag == 1) {
                a42flag = 0
            }
            if (a42flag == 3) {
                a42flag = 0
            }
            if (vi == 42 && (a42flag == 1) && lflag == 1) {
                ActionCYKeyUp(vi)
            }
            ActionCYKeyUp(vi);
            if (vi == 42) {
                lflag = 0
            }
            sbflag = 0;
            if (lflag == 1) {
                if (a42flag == 2) {
                    a42flag = 1
                }
                jflag = 1;
                cyswapthegif('w');
                if (NS4) {
                    if (bVer >= 5) {
                        eval('document.q9temp.src="../grx/q9_s3.png"')
                    } else {
                        eval('document.q9char.document.q9charform.q9temp.src="../grx/q9_s3.png"')
                    }
                } else {
                    eval('document.all.q9charform.q9temp.src="../grx/q9_s3.png"')
                }
            }
            lzy = 0
        }
        if (vi == 46) {
            a42flag = 0;
            jflag = 0;
            lflag = 0;
            rawText = '';
            flag = 0;
            sbflag = 0;
            if (lzy == 1) {
                ActionCYKeyUp(48);
                lzy = 0
            } else {
                ActionCYKeyUp(vi);
                lzy = 0
            }
        }
    }
}

function DoKeyUp(event) {
    if ((!q9coreok) || (!q9dataok)) {
        return
    }
    if (Q9StrokeIME) {
        eventType = 1;
        var vi = (NS4) ? event.which : window.event.keyCode;
        if (!IE4)
            if (vi == event.DOM_VK_BACK_SPACE || vi == event.DOM_VK_DELETE && vi != 46) {
                dobackspace();
                return false
            } else if (vi == 8) {
            dobackspace();
            return false
        }
        if (vi == 46) {
            keyup(vi)
        }
        if ((vi != 46) && (vi < 48 || vi > 57) && (vi != 43) && (vi != 45) && (vi != 42)) {
            flag = 1;
            DoFixText(1, String.fromCharCode(vi))
        }
        if (vi == 48 && sbflag == 1) {
            if (nflag == 1) {
                rawText = '';
                sbflag == 0;
                bflag = 0;
                nflag = 0
            } else {
                if (buflag == 1) {
                    buflag = 0;
                    bbuflag = 1;
                    if (rawText == '1110' || rawText == '1120' || rawText == '1130' || rawText == '1140' || rawText == '1150' || rawText == '1160' || rawText == '1170' || rawText == '1180' || rawText == '1190' || rawText == '1200' || rawText == '1210' || rawText == '1220' || rawText == '1230' || rawText == '1240' || rawText == '1250' || rawText == '1260' || rawText == '1270' || rawText == '1280' || rawText == '1290' || rawText == '1230' || rawText == '1300') {
                        SetQ9Pic(q9_s4);
                        bbuflag = 0
                    } else {
                        SetQ9Pic(q9K[rawText])
                    }
                } else {
                    SetQ9Pic(q9_s4);
                    if (rawText == '1110' || rawText == '1120' || rawText == '1130' || rawText == '1140' || rawText == '1150' || rawText == '1160' || rawText == '1170' || rawText == '1180' || rawText == '1190' || rawText == '1200' || rawText == '1210' || rawText == '1220' || rawText == '1230' || rawText == '1240' || rawText == '1250' || rawText == '1260' || rawText == '1270' || rawText == '1280' || rawText == '1290' || rawText == '1230') {
                        ActionQ9StrokeKeyUp((NS4) ? event.which : window.event.keyCode, 0)
                    }
                }
                lflag = 1;
                sbflag = 0;
                buflag = 0
            }
            eri = 0;
            lzy = 0;
            count = 0;
            jflag = 1
        } else if ((vi == 43 || vi == 45 || vi == 48) && bflag == 0) {
            if (rawText == '7' || rawText == '8' || rawText == '9' || rawText == '4' || rawText == '5') {
                if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                    if (vi == 48) {
                        vi = 43
                    }
                    flag = 0;
                    ActionQ9StrokeKeyUp(vi, 0);
                    if (kflag == 0) {
                        kflag = 1
                    }
                    if (kflag == 1) {
                        if (yrawText != '') {
                            rawText = yrawText;
                            yrawText = ''
                        }
                        if (rawText == '7' || rawText == '8' || rawText == '9' || rawText == '4' || rawText == '5') {
                            kflag = 1;
                            if (vi == 45 || vi == 43) {} else {
                                ActionQ9StrokeKeyUp(vi, 0)
                            }
                        } else {
                            ActionQ9StrokeKeyUp(vi, 0);
                            kflag = 0
                        }
                    }
                    for (i = 1; i < 10; i++)
                        if (NS4) {
                            if (bVer >= 5) {
                                tempb = eval('document.q9charform.c' + i + '.value')
                            } else {
                                tempb = eval('document.q9char.document.q9charform.c' + i + '.value')
                            }
                            if (tempb == '　') {
                                bluesky = 1
                            } else {
                                bluesky = 0
                            }
                        } else {
                            tempb = eval('document.all.c' + i + '.innerText');
                            if (tempb == '　') {
                                bluesky = 1
                            } else {
                                bluesky = 0
                            }
                        }
                    if (bluesky == 1) {
                        ActionQ9StrokeKeyUp(vi, 0)
                    }
                    if (xflag == 1) {
                        lflag = 0;
                        bflag = 1;
                        sbflag = 0;
                        xflag = 0
                    }
                    if (kflag == 1) {
                        lflag = 1;
                        bbuflag = 1
                    } else {
                        bbuflag = 0
                    }
                    buflag = 0;
                    count = 0;
                    yrawText = '';
                    eri = 0;
                    lzy = 0
                }
            } else {
                if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                    flag = 0;
                    ActionQ9StrokeKeyUp(vi, 0);
                    if (kflag == 1) {
                        if (yrawText != '') {
                            rawText = yrawText;
                            yrawText = ''
                        }
                        ActionQ9StrokeKeyUp(vi, 0);
                        kflag = 0
                    }
                    if (xflag == 1) {
                        lflag = 0;
                        bflag = 1;
                        sbflag = 0;
                        xflag = 0
                    }
                    buflag = 0;
                    bbuflag = 0;
                    count = 0;
                    yrawText = '';
                    eri = 0;
                    lzy = 0
                }
            }
        }
        if (lflag == 1 && vi != 46 && vi != 48 && vi > 48 && vi < 58) {
            var xuhao = vi - 48;
            SetQ9Pic(q9_xz);
            var tempa;
            if (NS4) {
                if (bVer >= 5) {
                    tempa = eval('document.q9charform.c' + xuhao + '.value')
                } else {
                    tempa = eval('document.q9char.document.q9charform.c' + xuhao + '.value')
                }
            } else {
                tempa = eval('document.all.c' + xuhao + '.innerText')
            }
            if ((bbuflag == 1) && (vi == 49 || vi == 50 || vi == 51 || vi == 54)) {
                flag = 0;
                if (rawText == '7' || rawText == '8' || rawText == '9' || rawText == '4' || rawText == '5') {
                    buflag = 1;
                    jflag = 1
                } else {
                    buflag = 0;
                    jflag = 0
                }
                ActionQ9StrokeKeyUp(vi, 0);
                if (NS4) {
                    SetQ9Pic(q9_s2)
                }
                bbuflag = 0;
                lflag = 0;
                bflag = 0;
                sbflag = 1;
                lzy = 0
            } else {
                flag = 1;
                yrawText = rawText;
                DoFixText(1, tempa);
                dofindlianxiang(tempa);
                flag = 0;
                sbflag = 1;
                lflag = 0;
                bflag = 1;
                bbuflag = 0;
                buflag = 0;
                lzy = 1;
                jflag = 0
            }
            eri = 0;
            count = 0
        } else if (vi != 46 && vi != 48 && vi != 42 && vi < 58 && vi > 48) {
            jflag = 1;
            count = count + 1;
            flag = 0;
            if (count == 4 && rawText == '') {
                rawText = yrawText;
                ActionQ9StrokeKeyUp(46, 0);
                yrawText = ''
            }
            if (yrawText.length > 0 && eri == 0) {
                rawText = yrawText;
                ActionQ9StrokeKeyUp(46, 0);
                yrawText = ''
            }
            ActionQ9StrokeKeyUp((NS4) ? event.which : window.event.keyCode, 0);
            if (rawText.length > 1) {
                buflag = 0
            }
            if ((rawText.length == 1) && (vi == 49 || vi == 50 || vi == 51 || vi == 54)) {
                buflag = 0
            }
            if (lflag == 1) {
                sbflag = 0;
                bflag = 0;
                if (rawText != '') {
                    yrawText = rawText
                }
            } else {
                if (NS4 && count == 2 && nflag == 0) {
                    SetQ9Pic(q9_s2)
                }
                sbflag = 1;
                bflag = 0
            }
            if (nflag == 1) {
                jflag = 0;
                lflag = 0;
                sbflag = 0;
                nflag = 0;
                if (NS4) {
                    count = 0
                }
            }
            if (xflag == 1) {
                sbflag = 0;
                lflag = 1;
                xflag = 0
            }
            if (NS4 && (rawText == '1001' || rawText == '1002' || rawText == '1003' || rawText == '1004' || rawText == '1005' || rawText == '1006' || rawText == '1007' || rawText == '1008' || rawText == '1009')) {
                lflag = 1
            }
            eri = 0;
            lzy = 0
        }
        if (vi == 42) {
            lflag = 0;
            count = 0;
            ActionQ9StrokeKeyUp(42, 0)
        }
    } else if (Q9IME) {
        var vi = (NS4) ? event.which : window.event.keyCode;
        if (!IE4)
            if (vi == event.DOM_VK_BACK_SPACE || vi == event.DOM_VK_DELETE && vi != 46) {
                dobackspace();
                return false
            } else if (vi == 8) {
            dobackspace();
            return false
        }
        if ((vi != 42) && (vi != 43) && (vi != 45) && (vi != 46) && (vi < 48 || vi > 57)) {
            flag = 1;
            DoFixText(1, String.fromCharCode(vi))
        }
        if (vi == 48 && sbflag == 1) {
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9_s3Pic.src=q9_x.src')
                } else {
                    eval('document.q9char.document.q9charform.q9_s3Pic.src=q9_x.src')
                }
            } else {
                eval('document.all.q9charform.q9_s3Pic.src=q9_x.src')
            }
            lflag = 1;
            q9swapthegif('w');
            lzy = 0;
            jflag = 0
        } else if ((vi == 43 || vi == 45 || vi == 48) && sbflag == 0) {
            if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                flag = 0;
                ActionQ9KeyUp((NS4) ? event.which : window.event.keyCode);
                q9swapthegif('w');
                if (lflag == 1) {
                    if (rawText == '420' || rawText == '490' || rawText == '590' || rawText == '540') {
                        keyup(46);
                        SetQ9Pic(q9_n)
                    } else {
                        jflag = 1;
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9_s3Pic.src="../grx/q9_s3.png"')
                            } else {
                                eval('document.q9char.document.q9charform.q9_s3Pic.src="../grx/q9_s3.png"')
                            }
                        } else {
                            eval('document.all.q9charform.q9_s3Pic.src="../grx/q9_s3.png"')
                        }
                    }
                }
                lzy = 0
            }
        }
        if (lflag == 1 && vi != 46 && vi != 48 && vi > 48 && vi < 58) {
            var xuhao = vi - 48;
            var tempa;
            if (NS4) {
                if (bVer >= 5) {
                    tempa = eval('document.q9charform.c' + xuhao + '.value')
                } else {
                    tempa = eval('document.q9char.document.q9charform.c' + xuhao + '.value')
                }
            } else {
                tempa = eval('document.all.c' + xuhao + '.innerText')
            }
            flag = 1;
            SetQ9Pic(q9_s2);
            DoFixText(1, tempa);
            dofindlianxiang(tempa);
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9_s3Pic.src=q9_xz.src')
                } else {
                    eval('document.q9char.document.q9charform.q9_s3Pic.src=q9_xz.src')
                }
            } else {
                eval('document.all.q9charform.q9_s3Pic.src=q9_xz.src')
            }
            flag = 0;
            rawText = '';
            sbflag = 1;
            lflag = 0;
            q9swapthegif('y');
            lzy = 1;
            jflag = 0
        } else if ((vi != 46 && vi != 48 && vi > 48 && vi < 58) || vi == 42) {
            if (vi == 42 && sbflag == 1) {} else {
                jflag = 0;
                flag = 0;
                ActionQ9KeyUp((NS4) ? event.which : window.event.keyCode);
                if (vi == 42) {
                    lflag = 0
                }
                sbflag = 0;
                if (lflag == 1) {
                    if (rawText == '522' || rawText == '566') {
                        keyup(46);
                        SetQ9Pic(q9_n)
                    } else {
                        jflag = 1;
                        if (NS4) {
                            if (bVer >= 5) {
                                eval('document.q9_s3Pic.src="../grx/q9_s3.png"')
                            } else {
                                eval('document.q9char.document.q9charform.q9_s3Pic.src="../grx/q9_s3.png"')
                            }
                        } else {
                            eval('document.all.q9charform.q9_s3Pic.src="../grx/q9_s3.png"')
                        }
                    }
                    q9swapthegif('w');
                    lzy = 0
                }
            }
        }
        if (vi == 46) {
            jflag = 0;
            lflag = 0;
            rawText = '';
            flag = 0;
            sbflag = 0;
            if (lzy == 1) {
                ActionQ9KeyUp(48);
                lzy = 0
            } else {
                ActionQ9KeyUp((NS4) ? event.which : window.event.keyCode);
                lzy = 0
            }
        }
    } else if (PYIME) {
        var vi = (NS4) ? event.which : window.event.keyCode;
        if (!IE4)
            if (vi == event.DOM_VK_BACK_SPACE || vi == event.DOM_VK_DELETE && vi != 46) {
                dobackspace();
                return false
            } else if (vi == 8) {
            dobackspace();
            return false
        }
        if ((vi != 42) && (vi != 43) && (vi != 45) && (vi != 46) && (vi < 48 || vi > 57)) {
            flag = 1;
            DoFixText(1, String.fromCharCode(vi))
        }
        if (vi == 48 && sbflag == 1) {
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9temp.src=q9_x.src')
                } else {
                    eval('document.q9char.document.q9charform.q9temp.src=q9_x.src')
                }
            } else {
                eval('document.all.q9charform.q9temp.src=q9_x.src')
            }
            lflag = 1;
            pyswapthegif('w');
            lzy = 0;
            jflag = 0
        } else if ((vi == 43 || vi == 45 || vi == 48) && sbflag == 0) {
            if (rawText == '1' || rawText == '3' || rawText == '2') {} else if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                flag = 0;
                ActionPYKeyUp((NS4) ? event.which : window.event.keyCode, 0);
                pyswapthegif('w');
                if (rawText == '6') {
                    rawText = '60';
                    SetQ9Pic(q9[4])
                }
                if (rawText == '80') {
                    if (NS4 && bVer >= 5) {
                        eval('document.q9stage.src="../grx/py3_8.png"')
                    } else {
                        SetQ9Pic(q9[8])
                    }
                }
                if (rawText == '90') {
                    if (NS4 && bVer >= 5) {
                        eval('document.q9stage.src="../grx/py3_9.png"')
                    } else {
                        SetQ9Pic(q9[9])
                    }
                }
                if (rawText == '20') {
                    if (NS4 && bVer >= 5) {
                        eval('document.q9stage.src="../grx/py3_2.png"')
                    } else {
                        SetQ9Pic(q9[2])
                    }
                }
                if (lflag == 1) {
                    jflag = 1;
                    if (NS4) {
                        if (bVer >= 5) {
                            eval('document.q9temp.src="../grx/q9_s3.png"')
                        } else {
                            eval('document.q9char.document.q9charform.q9temp.src="../grx/q9_s3.png"')
                        }
                    } else {
                        eval('document.all.q9charform.q9temp.src="../grx/q9_s3.png"')
                    }
                }
                lzy = 0
            }
        }
        if (lflag == 1 && vi != 46 && vi != 48 && vi > 48 && vi < 58) {
            var xuhao = vi - 48;
            var tempa;
            if (NS4) {
                if (bVer >= 5) {
                    tempa = eval('document.q9charform.c' + xuhao + '.value')
                } else {
                    tempa = eval('document.q9char.document.q9charform.c' + xuhao + '.value')
                }
            } else {
                tempa = eval('document.all.c' + xuhao + '.innerText')
            }
            flag = 1;
            SetQ9Pic(q9_s2);
            DoFixText(1, tempa);
            dofindlianxiang(tempa);
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9temp.src=q9_xz.src')
                } else {
                    eval('document.q9char.document.q9charform.q9temp.src=q9_xz.src')
                }
            } else {
                eval('document.all.q9charform.q9temp.src=q9_xz.src')
            }
            flag = 0;
            rawText = '';
            sbflag = 1;
            lflag = 0;
            pyswapthegif('y');
            lzy = 1;
            jflag = 0
        } else if ((vi != 46 && vi != 48 && vi > 48 && vi < 58) || vi == 42) {
            if (vi == 42 && sbflag == 1) {} else {
                jflag = 0;
                flag = 0;
                ActionPYKeyUp((NS4) ? event.which : window.event.keyCode, 0);
                if (vi == 42) {
                    lflag = 0
                }
                sbflag = 0;
                if (lflag == 1) {
                    jflag = 1;
                    pyswapthegif('w');
                    if (NS4) {
                        if (bVer >= 5) {
                            eval('document.q9temp.src="../grx/q9_s3.png"')
                        } else {
                            eval('document.q9char.document.q9charform.q9temp.src="../grx/q9_s3.png"')
                        }
                    } else {
                        eval('document.all.q9charform.q9temp.src="../grx/q9_s3.png"')
                    }
                }
                lzy = 0
            }
        }
        if (vi == 46) {
            jflag = 0;
            lflag = 0;
            rawText = '';
            flag = 0;
            sbflag = 0;
            if (lzy == 1) {
                ActionPYKeyUp(48, 0);
                lzy = 0
            } else {
                ActionPYKeyUp((NS4) ? event.which : window.event.keyCode, 0);
                lzy = 0
            }
        }
    } else {
        var vi = (NS4) ? event.which : window.event.keyCode;
        if (!IE4)
            if (vi == event.DOM_VK_BACK_SPACE || vi == event.DOM_VK_DELETE && vi != 46) {
                dobackspace();
                return false
            } else if (vi == 8) {
            dobackspace();
            return false
        }
        if ((vi != 42) && (vi != 43) && (vi != 45) && (vi != 46) && (vi < 48 || vi > 57)) {
            flag = 1;
            DoFixText(1, String.fromCharCode(vi))
        }
        if (vi == 48 && sbflag == 1) {
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9temp.src=q9_x.src')
                } else {
                    eval('document.q9char.document.q9charform.q9temp.src=q9_x.src')
                }
            } else {
                eval('document.all.q9charform.q9temp.src=q9_x.src')
            }
            lflag = 1;
            cyswapthegif('w');
            lzy = 0;
            jflag = 0
        } else if ((vi == 43 || vi == 45 || vi == 48) && sbflag == 0) {
            if (jflag == 0 && (vi == 43 || vi == 45)) {} else {
                flag = 0;
                ActionCYKeyUp((NS4) ? event.which : window.event.keyCode);
                cyswapthegif('w');
                if (lflag == 1) {
                    jflag = 1;
                    if (NS4) {
                        if (bVer >= 5) {
                            eval('document.q9temp.src="../grx/q9_s3.png"')
                        } else {
                            eval('document.q9char.document.q9charform.q9temp.src="../grx/q9_s3.png"')
                        }
                    } else {
                        eval('document.all.q9charform.q9temp.src="../grx/q9_s3.png"')
                    }
                }
                lzy = 0
            }
        }
        if (lflag == 1 && vi != 46 && vi != 48 && vi > 48 && vi < 58) {
            var xuhao = vi - 48;
            var tempa;
            if (NS4) {
                if (bVer >= 5) {
                    tempa = eval('document.q9charform.c' + xuhao + '.value')
                } else {
                    tempa = eval('document.q9char.document.q9charform.c' + xuhao + '.value')
                }
            } else {
                tempa = eval('document.all.c' + xuhao + '.innerText')
            }
            flag = 1;
            SetQ9Pic(q9_s2);
            DoFixText(1, tempa);
            dofindlianxiang(tempa);
            if (NS4) {
                if (bVer >= 5) {
                    eval('document.q9temp.src=q9_xz.src')
                } else {
                    eval('document.q9char.document.q9charform.q9temp.src=q9_xz.src')
                }
            } else {
                eval('document.all.q9charform.q9temp.src=q9_xz.src')
            }
            flag = 0;
            rawText = '';
            sbflag = 1;
            lflag = 0;
            cyswapthegif('y');
            lzy = 1;
            jflag = 0
        } else if ((vi != 46 && vi != 48 && vi > 48 && vi < 58) || vi == 42) {
            if (vi != 42) {
                a42flag = a42flag + 1
            }
            jflag = 0;
            flag = 0;
            if ((a42flag == 2 || a42flag == 1 || a42flag == 3) && lflag == 0 && vi == 42) {
                a42flag = 0
            }
            if (nflag == 1) {
                a42flag = 0
            }
            if (a42flag == 3) {
                a42flag = 0
            }
            if (vi == 42 && (a42flag == 1) && lflag == 1) {
                ActionCYKeyUp((NS4) ? event.which : window.event.keyCode)
            }
            ActionCYKeyUp((NS4) ? event.which : window.event.keyCode);
            if (vi == 42) {
                lflag = 0
            }
            sbflag = 0;
            if (lflag == 1) {
                if (a42flag == 2) {
                    a42flag = 1
                }
                jflag = 1;
                cyswapthegif('w');
                if (NS4) {
                    if (bVer >= 5) {
                        eval('document.q9temp.src="../grx/q9_s3.png"')
                    } else {
                        eval('document.q9char.document.q9charform.q9temp.src="../grx/q9_s3.png"')
                    }
                } else {
                    eval('document.all.q9charform.q9temp.src="../grx/q9_s3.png"')
                }
            }
            lzy = 0
        }
        if (vi == 46) {
            a42flag = 0;
            jflag = 0;
            lflag = 0;
            rawText = '';
            flag = 0;
            sbflag = 0;
            if (lzy == 1) {
                ActionCYKeyUp(48);
                lzy = 0
            } else {
                ActionCYKeyUp((NS4) ? event.which : window.event.keyCode);
                lzy = 0
            }
        }
    }
}

function q9swapthegif(flag) {
    if (flag == 'w') {
        if (NS4) {
            for (i = 1; i < 10; i++) {
                if (bVer >= 5) {
                    eval('document.q9charform.zx_' + i + '.src="../grx/zxw_' + i + '.gif"')
                } else {
                    eval('document.q9char.document.q9charform.zx_' + i + '.src="../grx/zxw_' + i + '.gif"')
                }
            }
        } else {
            for (i = 1; i < 10; i++) {
                eval('document.all.q9charform.zx_' + i + '.src="../grx/zxw_' + i + '.gif"')
            }
        }
    } else if (flag == 'y') {
        if (NS4) {
            for (i = 1; i < 10; i++) {
                if (bVer >= 5) {
                    eval('document.q9charform.zx_' + i + '.src="../grx/zx_' + i + '.gif"')
                } else {
                    eval('document.q9char.document.q9charform.zx_' + i + '.src="../grx/zx_' + i + '.gif"')
                }
            }
        } else {
            for (i = 1; i < 10; i++) {
                eval('document.all.q9charform.zx_' + i + '.src="../grx/zx_' + i + '.gif"')
            }
        }
    }
}

function pyswapthegif(flag) {
    if (flag == 'w') {
        if (NS4) {
            for (i = 0; i < 9; i++) {
                if (bVer >= 5) {
                    eval('document.q9charform.pyy_' + i + '.src="../grx/pyyw_' + i + '.png"')
                } else {
                    eval('document.q9char.document.q9charform.pyy_' + i + '.src="../grx/pyyw_' + i + '.png"')
                }
            }
        } else {
            for (i = 0; i < 9; i++) {
                eval('document.all.q9charform.pyy_' + i + '.src="../grx/pyyw_' + i + '.png"')
            }
        }
    } else if (flag == 'y') {
        if (NS4) {
            for (i = 0; i < 9; i++) {
                if (bVer >= 5) {
                    eval('document.q9charform.pyy_' + i + '.src="../grx/pyy_' + i + '.png"')
                } else {
                    eval('document.q9char.document.q9charform.pyy_' + i + '.src="../grx/pyy_' + i + '.png"')
                }
            }
        } else {
            for (i = 0; i < 9; i++) {
                eval('document.all.q9charform.pyy_' + i + '.src="../grx/pyy_' + i + '.png"')
            }
        }
    }
}

function cyswapthegif(flag) {
    if (flag == 'w') {
        if (NS4) {
            for (i = 0; i < 9; i++) {
                if (bVer >= 5) {
                    eval('document.q9charform.cyy_' + i + '.src="../grx/pyyw_' + i + '.png"')
                } else {
                    eval('document.q9char.document.q9charform.cyy_' + i + '.src="../grx/pyyw_' + i + '.png"')
                }
            }
        } else {
            for (i = 0; i < 9; i++) {
                eval('document.all.q9charform.cyy_' + i + '.src="../grx/pyyw_' + i + '.png"')
            }
        }
    } else if (flag == 'y') {
        if (NS4) {
            for (i = 0; i < 9; i++) {
                if (bVer >= 5) {
                    eval('document.q9charform.cyy_' + i + '.src="../grx/cyy_' + i + '.png"')
                } else {
                    eval('document.q9char.document.q9charform.cyy_' + i + '.src="../grx/cyy_' + i + '.png"')
                }
            }
        } else {
            for (i = 0; i < 9; i++) {
                eval('document.all.q9charform.cyy_' + i + '.src="../grx/cyy_' + i + '.png"')
            }
        }
    }
}

function ActionQ9StrokeKeyUp(theKeyCode, option) {
    var temp;
    PreviousKeyCode = PreviousKeyCode + String.fromCharCode(theKeyCode);
    if ((theKeyCode >= 96) && (theKeyCode <= 105)) {
        theKeyCode = theKeyCode - 48
    }
    if ((theKeyCode >= 48) && (theKeyCode <= 57)) {
        if ((rawText.length == 1) && (theKeyCode != 48) && (rawText == '.')) {
            rawText = 1000 + Number(reverse(String.fromCharCode(theKeyCode))) * 10;
            rawText = rawText.toString();
            Q9StrokeDifficultCharacterMode = 1;
            IMLookUp(rawText, 0, kLookUpModeRestart)
        } else if ((rawText.length == 1) && (theKeyCode == 48) && (rawText == '.')) {
            rawText = rawText + String.fromCharCode(theKeyCode);
            DoRedraw()
        } else if ((rawText.length == 1) && (theKeyCode != 48) && (rawText.charAt(0) != '0') && (option == 4)) {
            if ((Q9StrokeNextPageMode == 0) && ((theKeyCode == 49) || (theKeyCode == 50) || (theKeyCode == 51) || (theKeyCode == 54)) && (Q9StrokeNonFiveStrokeMode != 1)) {
                rawText = rawText + String.fromCharCode(theKeyCode);
                IMLookUp(rawText, 0, kLookUpModeRestart)
            } else if ((Q9StrokeNextPageMode == 1) || (theKeyCode == 52) || (theKeyCode == 53) || (theKeyCode == 55) || (theKeyCode == 56) || (theKeyCode == 57)) {
                if (GetLen(seekText) > (curPage - 1) * 9 + theKeyCode - 49) {
                    if (rawText >= 4 && rawText <= 9 && rawText != 6) {
                        if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                            Q9StrokeNextPageMode = 0;
                            DoFixText(1, Q9StrokeGetSeekChar(seekText, curPage, theKeyCode - 48))
                        }
                    } else {
                        if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                            Q9StrokeNextPageMode = 0;
                            DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
                        }
                    }
                }
            } else {
                if (GetLen(seekText) > (curPage - 1) * 9 + theKeyCode - 49) {
                    if (rawText >= 4 && rawText <= 9 && rawText != 6) {
                        if (Q9StrokeGetSeekChar(seekText, curPage, theKeyCode - 48) != "") {
                            Q9StrokeNextPageMode = 0;
                            DoFixText(1, Q9StrokeGetSeekChar(seekText, curPage, theKeyCode - 48))
                        }
                    } else {
                        if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                            Q9StrokeNextPageMode = 0;
                            DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
                        }
                    }
                }
            }
        } else if ((rawText.length == 1) && (theKeyCode != 48) && (rawText.charAt(0) != '0') && (option == 0)) {
            if (keypadEventMode == 1 && rawText.valueOf() >= 4 && rawText.valueOf() <= 9 && rawText.valueOf() != 6) {
                option = 4;
                keypadEventMode = 0;
                ActionQ9StrokeKeyUp(theKeyCode, option)
            } else if (selectCharMode == 1 && rawText.valueOf() >= 4 && rawText.valueOf() <= 9 && rawText.valueOf() != 6) {
                if (theKeyCode >= 49 && theKeyCode <= 54 && theKeyCode != 52 && theKeyCode != 53) {
                    selectCharMode = 0
                }
                klookUpModeNextLoopBackIndex = 0;
                option = 4;
                keypadEventMode = 0;
                ActionQ9StrokeKeyUp(theKeyCode, option)
            } else if (Q9StrokeNextPageMode == 0) {
                rawText = rawText + String.fromCharCode(theKeyCode);
                IMLookUp(rawText, 0, kLookUpModeRestart)
            } else {
                if (GetLen(seekText) > (curPage - 1) * 9 + theKeyCode - 49) {
                    if (rawText >= 4 && rawText <= 9 && rawText != 6) {
                        if (Q9StrokeGetSeekChar(seekText, curPage, theKeyCode - 48) != "") {
                            Q9StrokeNextPageMode = 0;
                            DoFixText(1, Q9StrokeGetSeekChar(seekText, curPage, theKeyCode - 48))
                        }
                    } else {
                        if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                            Q9StrokeNextPageMode = 0;
                            DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
                        }
                    }
                }
            }
        } else if ((rawText.length == 1) && (theKeyCode == 48) && (rawText.charAt(0) != '0')) {
            if (eventType == 1 && rawText.valueOf() >= 4 && rawText.valueOf() <= 9 && rawText.valueOf() != 6 && PreviousKeyCode.charAt(1) == '0' && PreviousKeyCode.charAt(2) == '0') {
                keypadEventMode = 0;
                Q9StrokeNextPageMode = 1;
                IMLookUp(rawText, 0, kLookUpModeNext)
            } else if (eventType == 0 && rawText.valueOf() >= 4 && rawText.valueOf() <= 9 && rawText.valueOf() != 6 && PreviousKeyCode.charAt(1) == '0' && PreviousKeyCode.charAt(2) == '0') {
                keypadEventMode = 0;
                Q9StrokeNextPageMode = 1;
                IMLookUp(rawText, 0, kLookUpModeNext)
            } else if (eventType == 1 && rawText.valueOf() >= 4 && rawText.valueOf() <= 9 && rawText.valueOf() != 6) {
                keypadEventMode = 1;
                DoRedraw()
            } else {
                Q9StrokeNextPageMode = 1;
                IMLookUp(rawText, 0, kLookUpModeNext)
            }
        } else if ((rawText.length == 0) && (theKeyCode != 48)) {
            if ((theKeyCode == 49) || (theKeyCode == 50) || (theKeyCode == 51) || (theKeyCode == 54)) {
                Q9StrokeNonFiveStrokeMode = 1
            }
            rawText = rawText + String.fromCharCode(theKeyCode);
            IMLookUp(rawText, 0, kLookUpModeRestart)
        } else if ((rawText.length == 2) && (theKeyCode != 48) && (rawText.charAt(0) != '0') && (option == 0) && (Q9StrokeNextPageMode == 1)) {
            if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                Q9StrokeNextPageMode = 0;
                DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
            }
        } else if ((rawText.length == 2) && (theKeyCode != 48) && (rawText == '.0')) {
            rawText = 1000 + Number(reverse(String.fromCharCode(theKeyCode)));
            rawText = rawText.toString();
            Q9StrokeDifficultCharacterMode = 1;
            IMLookUp(rawText, 0, kLookUpModeRestart)
        } else if ((rawText.length == 2) && (theKeyCode != 48) && (rawText.charAt(0) != '0') && (option == 4) && (Q9StrokeNextPageMode == 1)) {
            if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                Q9StrokeNextPageMode = 0;
                DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
            }
        } else if ((rawText.length == 2) && (theKeyCode != 48) && (rawText.charAt(0) != '0') && (option == 0) && (Q9StrokeNextPageMode == 0)) {
            rawText = rawText + String.fromCharCode(theKeyCode);
            IMLookUp(rawText, 0, kLookUpModeRestart)
        } else if ((rawText.length == 2) && (theKeyCode != 48) && (rawText.charAt(0) != '0') && (option == 4) && (Q9StrokeNextPageMode == 0)) {
            if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
            }
        } else if ((rawText.length == 2) && (theKeyCode == 48) && (rawText.charAt(0) != '0')) {
            Q9StrokeNextPageMode = 1;
            IMLookUp(rawText, 0, kLookUpModeNext)
        } else if ((rawText.length == 3) && (theKeyCode != 48) && (rawText == '010')) {
            DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
        } else if ((rawText.length == 3) && (theKeyCode != 48) && (rawText.charAt(0) != '0')) {
            if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
            }
        } else if ((rawText.length == 3) && (theKeyCode == 48) && (rawText.charAt(0) != '0')) {
            IMLookUp(rawText, 0, kLookUpModeNext)
        } else if ((rawText.length == 4) && (theKeyCode != 48) && (rawText.charAt(0) != '0') && Q9StrokeDifficultCharacterMode == 1) {
            if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
            }
        } else if ((rawText.length == 4) && (theKeyCode != 48) && (rawText.charAt(0) != '0') && (option == 0)) {
            if (Q9StrokeNextPageMode == 1) {
                if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                    Q9StrokeNextPageMode = 0;
                    DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
                }
            } else if (selectCharMode == 1) {
                if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                    Q9StrokeNextPageMode = 0;
                    DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
                }
            } else {
                rawText = Number(rawText) + Number(reverse(String.fromCharCode(theKeyCode)));
                rawText = rawText.toString();
                Q9StrokeDifficultCharacterMode = 1;
                IMLookUp(rawText, 0, kLookUpModeRestart)
            }
        } else if ((rawText.length == 4) && (theKeyCode != 48) && (rawText.charAt(0) != '0') && (option == 4)) {
            if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                if (GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49) != "") {
                    Q9StrokeNextPageMode = 0;
                    DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
                }
            }
        } else if ((rawText.length == 4) && (theKeyCode == 48) && (rawText.charAt(0) != '0')) {
            if (eventType == 1 && PreviousKeyCode.charAt(3) == '0') {
                Q9StrokeNextPageMode = 1;
                IMLookUp(rawText, 0, kLookUpModeNext)
            } else if (eventType == 1 && PreviousKeyCode.charAt(3) == "") {
                Q9StrokeNextPageMode = 1;
                selectCharMode = 1;
                DoRedraw()
            } else {
                Q9StrokeNextPageMode = 1;
                IMLookUp(rawText, 0, kLookUpModeNext)
            }
        } else if ((rawText.length == 0) && (theKeyCode == 48)) {
            rawText = '010';
            Q9StrokeDifficultCharacterMode = 1;
            IMLookUp(rawText, 0, kLookUpModeRestart)
        } else {}
    } else if ((theKeyCode == 110) || (theKeyCode == 46)) {
        if (rawText.length == 0) {
            rawText = rawText + String.fromCharCode(theKeyCode);
            DoRedraw()
        } else {
            rawText = "";
            Q9StrokeNextPageMode = 0;
            Q9StrokeDifficultCharacterMode = 0;
            Q9StrokeNonFiveStrokeMode = 0;
            keypadEventMode = 0;
            klookUpModeNextLoopBackIndex = 0;
            PreviousKeyCode = "";
            selectCharMode = 0;
            DoRedraw()
        }
    } else if ((theKeyCode == 8) || (theKeyCode == 106) || (theKeyCode == 42)) {
        if (rawText.length > 0) {
            rawText = rawText.substr(0, rawText.length - 1);
            DoRedraw()
        } else if (theKeyCode == 8) {
            DoFixText(-1, 0)
        }
    } else if ((theKeyCode == 109) || (theKeyCode == 45)) {
        if (keypadEventMode == 1) {
            keypadEventMode = 0;
            selectCharMode = 1;
            ActionQ9StrokeKeyUp(theKeyCode, option)
        } else {
            selectCharMode = 1;
            IMLookUp(rawText, 0, kLookUpModePrevious)
        }
    } else if ((theKeyCode == 107) || (theKeyCode == 43)) {
        if (keypadEventMode == 1) {
            keypadEventMode = 0;
            selectCharMode = 1;
            ActionQ9StrokeKeyUp(theKeyCode, option)
        } else {
            selectCharMode = 1;
            IMLookUp(rawText, 0, kLookUpModeNext)
        }
    } else {}
}

function ActionQ9KeyUp(theKeyCode) {
    var temp;
    if ((theKeyCode >= 96) && (theKeyCode <= 105)) {
        theKeyCode = theKeyCode - 48
    }
    if ((theKeyCode >= 48) && (theKeyCode <= 57)) {
        if ((rawText.length == 1) && (rawText.charAt(0) == '0') && (theKeyCode == 48)) {} else if (((rawText.length == 2) && ((rawText.charAt(0) == '0') || (rawText.charAt(1) == '0'))) || (rawText.length >= 3)) {
            if (theKeyCode == 48) {
                IMLookUp(rawText, 0, kLookUpModeNext)
            } else {
                if (GetLen(seekText) > (curPage - 1) * 9 + theKeyCode - 49) {
                    DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
                }
            }
        } else if (rawText.length == 1 && rawText.charAt(0) == '0' && theKeyCode != 57) {
            rawText = rawText + String.fromCharCode(theKeyCode);
            temp = q9data.substring(rawText.charAt(1) - 1, rawText.charAt(1));
            DoFixText(1, temp)
        } else {
            rawText = rawText + String.fromCharCode(theKeyCode);
            IMLookUp(rawText, 0, kLookUpModeRestart)
        }
    } else if ((theKeyCode == 110) || (theKeyCode == 46)) {
        rawText = "";
        DoRedraw()
    } else if ((theKeyCode == 8) || (theKeyCode == 106) || (theKeyCode == 42)) {
        if (rawText.length > 0) {
            rawText = rawText.substr(0, rawText.length - 1);
            DoRedraw()
        } else if (theKeyCode == 8) {
            DoFixText(-1, 0)
        }
    } else if ((theKeyCode == 109) || (theKeyCode == 45)) {
        IMLookUp(rawText, 0, kLookUpModePrevious)
    } else if ((theKeyCode == 107) || (theKeyCode == 43)) {
        IMLookUp(rawText, 0, kLookUpModeNext)
    } else {}
}

function ActionPYKeyUp(theKeyCode, ywIndex) {
    var temp;
    if ((!q9coreok) || (!q9dataok)) return;
    if ((theKeyCode >= 48) && (theKeyCode <= 57)) {
        if ((theKeyCode == 55) && (rawText.length == 0)) {
            return
        } else if ((theKeyCode == 48) && (rawText.length == 0)) {
            pyIndex = 1;
            rawText = rawText + String.fromCharCode(theKeyCode);
            DoRedraw()
        } else if ((rawText.length == 1) && (rawText.charAt(0) == '0') && (theKeyCode == 48)) {} else if ((rawText.length == 1) && (rawText.charAt(0) == '0') && (theKeyCode != 57)) {
            rawText = rawText + String.fromCharCode(theKeyCode);
            if (rawText == '01') {
                temp = q9data.substring(2, 3)
            }
            if (rawText == '02') {
                temp = q9data.substring(1, 2)
            }
            if (rawText == '03') {
                temp = q9data.substring(7, 8)
            }
            if (rawText == '04') {
                temp = q9data.substring(23, 24)
            }
            if (rawText == '05') {
                temp = q9data.substring(4, 5)
            }
            if (rawText == '06') {
                temp = q9data.substring(24, 25)
            }
            if (rawText == '07') {
                temp = q9data.substring(25, 26)
            }
            if (rawText == '08') {
                temp = q9data.substring(0, 1)
            }
            DoFixText(1, temp);
            rawText = '';
            return
        } else if ((rawText.length == 1) && (rawText.charAt(0) == '0') && (theKeyCode == 57)) {
            rawText = rawText + String.fromCharCode(theKeyCode);
            rawText = rawText + String.fromCharCode(theKeyCode);
            IMLookUp(rawText, 0, kLookUpModeRestart)
        } else if ((rawText.length == 1) && (theKeyCode == 48) && ((rawText.charAt(0) > '3' && rawText.charAt(0) < '7') || (rawText.charAt(0) == '0'))) {} else if (rawText.length >= 3) {
            if (theKeyCode == 48) {
                IMLookUp(rawText, ywIndex, kLookUpModeNext)
            } else {
                if (GetLen(seekText) > (curPage - 1) * 9 + theKeyCode - 49) {
                    DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
                }
            }
        } else {
            theKey = String.fromCharCode(theKeyCode);
            if ((rawText.length == 1) && ((theKey == '1') || (theKey == '3') || (theKey == '7') || (theKey == '9'))) rawText = '0' + theKey + '0';
            else if ((rawText.length == 1) && (ywIndex)) rawText = rawText + String.fromCharCode(theKeyCode) + '0';
            else {
                rawText = rawText + String.fromCharCode(theKeyCode)
            }
            IMLookUp(rawText, ywIndex, kLookUpModeRestart)
        }
    } else if ((theKeyCode == 110) || (theKeyCode == 46)) {
        rawText = "";
        DoRedraw()
    } else if ((theKeyCode == 8) || (theKeyCode == 106) || (theKeyCode == 42)) {
        if (rawText.length > 0) {
            rawText = rawText.substr(0, rawText.length - 1);
            DoRedraw()
        } else if (theKeyCode == 8) {
            DoFixText(-1, 0)
        }
    } else if ((theKeyCode == 109) || (theKeyCode == 45)) {
        IMLookUp(rawText, ywIndex, kLookUpModePrevious)
    } else if ((theKeyCode == 107) || (theKeyCode == 43)) {
        IMLookUp(rawText, ywIndex, kLookUpModeNext)
    } else {}
}

function ActionCYKeyUp(theKeyCode) {
    var temp;
    if ((!q9coreok) || (!q9dataok)) return;
    if ((theKeyCode >= 48) && (theKeyCode <= 57)) {
        if ((rawText.length == 1) && (theKeyCode == 48) && (rawText.charAt(0) == '0')) {} else if (rawText.length >= 3) {
            if (theKeyCode == 48) {
                IMLookUp(rawText, 0, kLookUpModeNext)
            } else {
                if (GetLen(seekText) > (curPage - 1) * 9 + theKeyCode - 49) {
                    DoFixText(1, GetCharAt(seekText, (curPage - 1) * 9 + theKeyCode - 49))
                }
            }
        } else {
            theKey = String.fromCharCode(theKeyCode);
            if (rawText.length == 1 && theKeyCode <= 54) {
                rawText = rawText + '0' + String.fromCharCode(theKeyCode)
            } else {
                rawText = rawText + String.fromCharCode(theKeyCode)
            }
            IMLookUp(rawText, 0, kLookUpModeRestart)
        }
    } else if ((theKeyCode == 110) || (theKeyCode == 46)) {
        rawText = "";
        DoRedraw()
    } else if ((theKeyCode == 8) || (theKeyCode == 106) || (theKeyCode == 42)) {
        if (rawText.length > 0) {
            rawText = rawText.substr(0, rawText.length - 1);
            DoRedraw()
        } else if (theKeyCode == 8) {
            DoFixText(-1, 0)
        }
    } else if ((theKeyCode == 109) || (theKeyCode == 45)) {
        IMLookUp(rawText, 0, kLookUpModePrevious)
    } else if ((theKeyCode == 107) || (theKeyCode == 43)) {
        IMLookUp(rawText, 0, kLookUpModeNext)
    } else {}
}

function GetTargetControl() {
    target = eval(q9formSwitch + ".targetcontrol.value")
}
var scdata = new Array(0x4E00, 0x4E01, 0x0, 0x4E03, 0x0, 0x0, 0x0, 0x4E07, 0x4E08, 0x4E09, 0x4E0A, 0x4E0B, 0x4E0C, 0x4E0D, 0x4E0E, 0x4E0F, 0x4E10, 0x4E11, 0x0, 0x0, 0x4E14, 0x4E15, 0x4E16, 0x0, 0x4E18, 0x4E19, 0x0, 0x0, 0x0, 0x0, 0x4E1E, 0x4E22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5E76, 0x0, 0x0, 0x0, 0x0, 0x4E2B, 0x0, 0x4E2D, 0x4E2E, 0x0, 0x4E30, 0x4E31, 0x4E32, 0x4E33, 0x0, 0x0, 0x0, 0x0, 0x4E38, 0x4E39, 0x0, 0x4E3B, 0x4E3C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4E42, 0x4E43, 0x0, 0x4E45, 0x0, 0x4E47, 0x4E48, 0x0, 0x0, 0x4E4B, 0x0, 0x4E4D, 0x4E4E, 0x4E4F, 0x0, 0x0, 0x4E52, 0x4E53, 0x0, 0x0, 0x4E56, 0x0, 0x4E58, 0x4E59, 0x0, 0x0, 0x4E5C, 0x4E5D, 0x4E5E, 0x4E5F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4E69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4E73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5E72, 0x4E7F, 0x0, 0x0, 0x4E71, 0x4E83, 0x4E84, 0x0, 0x4E86, 0x0, 0x4E88, 0x0, 0x0, 0x4E8B, 0x4E8C, 0x4E8D, 0x4E8E, 0x0, 0x0, 0x4E91, 0x4E92, 0x4E93, 0x4E94, 0x4E95, 0x0, 0x0, 0x0, 0x4E98, 0x0, 0x4E9B, 0x0, 0x0, 0x4E9A, 0x4E9F, 0x0, 0x4EA1, 0x4EA2, 0x0, 0x4EA4, 0x4EA5, 0x4EA6, 0x0, 0x4EA8, 0x0, 0x0, 0x4EAB, 0x4EAC, 0x4EAD, 0x4EAE, 0x0, 0x0, 0x0, 0x0, 0x4EB3, 0x0, 0x0, 0x4EB6, 0x0, 0x0, 0x4EB9, 0x4EBA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4EC0, 0x4EC1, 0x4EC2, 0x4EC3, 0x4EC4, 0x0, 0x4EC6, 0x4EC7, 0x4EC8, 0x4EC9, 0x4ECA, 0x4ECB, 0x0, 0x4ECD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4ED4, 0x4ED5, 0x4ED6, 0x4ED7, 0x4ED8, 0x4ED9, 0x4EDA, 0x0, 0x4EDC, 0x4EDD, 0x4EDE, 0x4EDF, 0x0, 0x4EE1, 0x0, 0x4EE3, 0x4EE4, 0x4EE5, 0x0, 0x0, 0x4EE8, 0x4EE9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4EF0, 0x4EF1, 0x4EF2, 0x4EF3, 0x4EF4, 0x4EF5, 0x4EF6, 0x4EF7, 0x0, 0x0, 0x0, 0x4EFB, 0x0, 0x4EFD, 0x0, 0x4EFF, 0x4F00, 0x4F01, 0x4F02, 0x0, 0x4F04, 0x4F05, 0x0, 0x0, 0x4F08, 0x4F09, 0x4F0A, 0x4F0B, 0x0, 0x4F0D, 0x4F0E, 0x4F0F, 0x4F10, 0x4F11, 0x4F12, 0x4F13, 0x4F14, 0x592B, 0x0, 0x0, 0x4F18, 0x4F19, 0x0, 0x0, 0x0, 0x4F1D, 0x0, 0x0, 0x0, 0x0, 0x4F22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4F2C, 0x4F2D, 0x0, 0x4F2F, 0x4F30, 0x0, 0x0, 0x4F33, 0x4F34, 0x0, 0x4F36, 0x0, 0x4F38, 0x0, 0x4F3A, 0x4F3B, 0x4F3C, 0x4F3D, 0x4F3E, 0x4F3F, 0x0, 0x4F41, 0x0, 0x4F43, 0x0, 0x0, 0x4F46, 0x4F2B, 0x5E03, 0x4F49, 0x0, 0x0, 0x4F4C, 0x4F4D, 0x4F4E, 0x4F4F, 0x4F50, 0x4F51, 0x4F52, 0x4F53, 0x5360, 0x4F55, 0x4F56, 0x4F57, 0x7572, 0x4F59, 0x4F5A, 0x4F5B, 0x4F5C, 0x4F5D, 0x4F5E, 0x4F5F, 0x4F60, 0x4F61, 0x4F62, 0x4F63, 0x4F64, 0x0, 0x0, 0x4F67, 0x0, 0x4F69, 0x4F6A, 0x4F6B, 0x4F6C, 0x0, 0x4F6E, 0x4F6F, 0x4F70, 0x0, 0x0, 0x4F73, 0x4F74, 0x5E76, 0x4F76, 0x4F77, 0x4F78, 0x4F79, 0x4F7A, 0x4F7B, 0x4F7C, 0x4F7D, 0x4F7E, 0x4F7F, 0x4F80, 0x4F81, 0x4F82, 0x4F83, 0x4F84, 0x4F85, 0x6765, 0x4F87, 0x4F88, 0x4F89, 0x0, 0x4F8B, 0x0, 0x4F8D, 0x0, 0x4F8F, 0x4F90, 0x4F91, 0x4F92, 0x0, 0x4F94, 0x4F95, 0x4ED1, 0x4F97, 0x4F98, 0x0, 0x4F9A, 0x4F9B, 0x4F9C, 0x4F9D, 0x4F9E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4FAE, 0x4FAF, 0x0, 0x0, 0x4FB2, 0x4FB3, 0x0, 0x4FB5, 0x4FA3, 0x5C40, 0x0, 0x4FB9, 0x4FBA, 0x4FBB, 0x0, 0x0, 0x0, 0x4FBF, 0x4FC0, 0x4FE3, 0x7CFB, 0x4FC3, 0x4FC4, 0x4FC5, 0x0, 0x4FC7, 0x0, 0x4FC9, 0x4FCA, 0x4FCB, 0x0, 0x4FCD, 0x4FCE, 0x4FCF, 0x4FD0, 0x4FD1, 0x0, 0x4FD3, 0x4FD4, 0x0, 0x4FD6, 0x4FD7, 0x4FD8, 0x4FD9, 0x4FDA, 0x4FDB, 0x4FDC, 0x4FDD, 0x4FDE, 0x4FDF, 0x4FA0, 0x4FE1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4FEC, 0x0, 0x4FEE, 0x4FEF, 0x0, 0x4FF1, 0x0, 0x4FF3, 0x4FF4, 0x4FF5, 0x4FF6, 0x4FF7, 0x4FF8, 0x0, 0x4FFA, 0x0, 0x0, 0x0, 0x4FFE, 0x0, 0x4F25, 0x0, 0x0, 0x0, 0x0, 0x5005, 0x4FE9, 0x5007, 0x0, 0x4ED3, 0x0, 0x4E2A, 0x500C, 0x500D, 0x500E, 0x500F, 0x0, 0x4EEC, 0x5012, 0x5013, 0x5014, 0x5015, 0x5E78, 0x5017, 0x5018, 0x5019, 0x501A, 0x501B, 0x501C, 0x0, 0x501E, 0x501F, 0x5020, 0x5021, 0x5022, 0x4EFF, 0x0, 0x5025, 0x5026, 0x5027, 0x5028, 0x5029, 0x502A, 0x4F26, 0x502C, 0x502D, 0x0, 0x502F, 0x5030, 0x5031, 0x0, 0x5033, 0x0, 0x5035, 0x0, 0x5037, 0x0, 0x0, 0x0, 0x0, 0x503C, 0x0, 0x0, 0x0, 0x5040, 0x5041, 0x0, 0x5043, 0x0, 0x5045, 0x5046, 0x5047, 0x5048, 0x4F1F, 0x504A, 0x504B, 0x504C, 0x504D, 0x504E, 0x504F, 0x0, 0x5051, 0x0, 0x5053, 0x0, 0x5055, 0x0, 0x5057, 0x0, 0x0, 0x505A, 0x505B, 0x505C, 0x505D, 0x505E, 0x505F, 0x5060, 0x5061, 0x5062, 0x5063, 0x5064, 0x5065, 0x0, 0x0, 0x5068, 0x5069, 0x506A, 0x506B, 0x0, 0x506D, 0x506E, 0x506F, 0x5070, 0x0, 0x5072, 0x5073, 0x4FA7, 0x4FA6, 0x5076, 0x5077, 0x0, 0x0, 0x54B1, 0x0, 0x0, 0x4F2A, 0x0, 0x0, 0x5080, 0x0, 0x5082, 0x5083, 0x0, 0x5085, 0x0, 0x5087, 0x0, 0x0, 0x0, 0x508B, 0x508C, 0x508D, 0x508E, 0x0, 0x0, 0x6770, 0x5092, 0x0, 0x5094, 0x5095, 0x4F27, 0x0, 0x4F1E, 0x5907, 0x6548, 0x509B, 0x509C, 0x509D, 0x509E, 0x0, 0x0, 0x0, 0x5BB6, 0x50A3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50AC, 0x4F63, 0x50AE, 0x506C, 0x50B0, 0x50B1, 0x50B2, 0x4F20, 0x4F1B, 0x503A, 0x50B6, 0x4F24, 0x50B8, 0x0, 0x50BA, 0x50BB, 0x0, 0x50BD, 0x503E, 0x50BF, 0x0, 0x50C1, 0x507B, 0x0, 0x50C4, 0x4EC5, 0x50C6, 0x50C7, 0x50C8, 0x4F65, 0x50CA, 0x50CB, 0x0, 0x0, 0x50CE, 0x50CF, 0x0, 0x4FA8, 0x0, 0x50D3, 0x50D4, 0x4EC6, 0x50D6, 0x50D7, 0x0, 0x0, 0x50DA, 0x50DB, 0x0, 0x50DD, 0x0, 0x0, 0x50E0, 0x0, 0x0, 0x50E3, 0x50E4, 0x4FA5, 0x50E6, 0x50E7, 0x507E, 0x50E9, 0x50EA, 0x0, 0x50EC, 0x50ED, 0x50EE, 0x50EF, 0x50F0, 0x96C7, 0x0, 0x50F3, 0x0, 0x50F5, 0x50F6, 0x0, 0x50F8, 0x4EF7, 0x0, 0x50FB, 0x0, 0x50FD, 0x50FE, 0x50FF, 0x4EEA, 0x0, 0x4FAC, 0x5103, 0x4EBF, 0x5F53, 0x5106, 0x5107, 0x4FA9, 0x4FED, 0x510A, 0x510B, 0x510C, 0x0, 0x0, 0x0, 0x50A7, 0x5111, 0x5112, 0x5113, 0x4FE6, 0x4FAA, 0x0, 0x5117, 0x5C3D, 0x0, 0x511A, 0x0, 0x511C, 0x0, 0x0, 0x507F, 0x5120, 0x5121, 0x5122, 0x0, 0x5124, 0x5125, 0x5126, 0x0, 0x0, 0x5129, 0x4F18, 0x0, 0x0, 0x512D, 0x512E, 0x0, 0x5130, 0x5131, 0x50A8, 0x5133, 0x5134, 0x5135, 0x0, 0x4FEA, 0x7F57, 0x6512, 0x50A9, 0x50A5, 0x4FE8, 0x513D, 0x0, 0x513F, 0x5140, 0x5141, 0x0, 0x5143, 0x5144, 0x5145, 0x5146, 0x51F6, 0x5148, 0x5149, 0x0, 0x514B, 0x5151, 0x514D, 0x0, 0x0, 0x0, 0x0, 0x513F, 0x0, 0x5154, 0x5155, 0x0, 0x5156, 0x0, 0x0, 0x515A, 0x0, 0x515C, 0x0, 0x0, 0x515F, 0x0, 0x0, 0x5162, 0x0, 0x0, 0x5165, 0x0, 0x5185, 0x5168, 0x4E24, 0x0, 0x516B, 0x516C, 0x516D, 0x516E, 0x0, 0x0, 0x5171, 0x0, 0x0, 0x0, 0x5175, 0x5176, 0x5177, 0x5178, 0x0, 0x0, 0x0, 0x517C, 0x0, 0x0, 0x0, 0x5180, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5187, 0x0, 0x5189, 0x518C, 0x0, 0x0, 0x518D, 0x0, 0x518F, 0x0, 0x5191, 0x5192, 0x5193, 0x5194, 0x5195, 0x0, 0x5197, 0x5198, 0x0, 0x0, 0x0, 0x0, 0x0, 0x519E, 0x0, 0x51A0, 0x0, 0x51A2, 0x0, 0x51A4, 0x51A5, 0x0, 0x0, 0x0, 0x0, 0x5E42, 0x0, 0x51AC, 0x0, 0x0, 0x0, 0x51B0, 0x51B1, 0x0, 0x0, 0x0, 0x0, 0x51B6, 0x51B7, 0x0, 0x51B9, 0x0, 0x0, 0x51BC, 0x51BD, 0x51BE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x51C4, 0x51C5, 0x51C6, 0x0, 0x51C8, 0x0, 0x51CA, 0x51CB, 0x51CC, 0x51BB, 0x51CE, 0x0, 0x51D0, 0x0, 0x0, 0x0, 0x51D4, 0x0, 0x0, 0x51D7, 0x51D8, 0x0, 0x0, 0x0, 0x51DB, 0x51DD, 0x51DE, 0x0, 0x51E0, 0x51E1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x51F0, 0x51EF, 0x0, 0x51F3, 0x0, 0x51F5, 0x51F6, 0x0, 0x51F8, 0x51F9, 0x51FA, 0x0, 0x0, 0x51FD, 0x0, 0x0, 0x5200, 0x5201, 0x0, 0x5203, 0x0, 0x0, 0x5206, 0x5207, 0x5208, 0x5209, 0x520A, 0x0, 0x520C, 0x0, 0x520E, 0x0, 0x5210, 0x5211, 0x5212, 0x5213, 0x0, 0x0, 0x5216, 0x5217, 0x0, 0x0, 0x0, 0x0, 0x521C, 0x521D, 0x521E, 0x0, 0x0, 0x5221, 0x0, 0x0, 0x5224, 0x522B, 0x0, 0x0, 0x5228, 0x5229, 0x5220, 0x0, 0x0, 0x0, 0x522E, 0x0, 0x5230, 0x5231, 0x5232, 0x5233, 0x0, 0x5235, 0x5236, 0x5237, 0x5238, 0x0, 0x523A, 0x523B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5241, 0x0, 0x5243, 0x522D, 0x0, 0x5246, 0x5219, 0x0, 0x5249, 0x524A, 0x514B, 0x524C, 0x524D, 0x524E, 0x0, 0x0, 0x0, 0x5252, 0x0, 0x5254, 0x5255, 0x5256, 0x0, 0x0, 0x0, 0x525A, 0x521A, 0x525C, 0x5265, 0x525E, 0x525F, 0x0, 0x5261, 0x5262, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5269, 0x526A, 0x526B, 0x526C, 0x526D, 0x5250, 0x526F, 0x0, 0x0, 0x5272, 0x0, 0x5240, 0x521B, 0x0, 0x94F2, 0x5278, 0x0, 0x527A, 0x527B, 0x527C, 0x527D, 0x0, 0x527F, 0x5280, 0x5281, 0x5282, 0x5212, 0x672D, 0x0, 0x0, 0x5267, 0x5288, 0x5218, 0x523D, 0x528B, 0x523F, 0x5251, 0x0, 0x0, 0x0, 0x5242, 0x0, 0x5293, 0x0, 0x0, 0x5296, 0x5297, 0x5298, 0x5299, 0x0, 0x529B, 0x0, 0x0, 0x0, 0x529F, 0x52A0, 0x0, 0x0, 0x52A3, 0x0, 0x0, 0x52A6, 0x0, 0x0, 0x52A9, 0x52AA, 0x52AB, 0x52AC, 0x52AD, 0x52AE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x52BB, 0x52BC, 0x0, 0x52BE, 0x0, 0x52C0, 0x52B2, 0x52C2, 0x52C3, 0x0, 0x0, 0x0, 0x52C7, 0x0, 0x52C9, 0x0, 0x0, 0x0, 0x52CD, 0x0, 0x0, 0x0, 0x0, 0x52D2, 0x52D3, 0x0, 0x52A8, 0x52D6, 0x52D6, 0x52D8, 0x52A1, 0x0, 0x52CB, 0x0, 0x80DC, 0x52B3, 0x52DF, 0x0, 0x0, 0x52BF, 0x7EE9, 0x52E4, 0x0, 0x527F, 0x0, 0x0, 0x52DA, 0x0, 0x52EB, 0x0, 0x0, 0x0, 0x52EF, 0x52F0, 0x52A2, 0x0, 0x52CB, 0x52F4, 0x52B1, 0x0, 0x52F7, 0x529D, 0x0, 0x52FA, 0x5300, 0x52FC, 0x0, 0x52FE, 0x52FF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5305, 0x5306, 0x0, 0x5308, 0x5309, 0x530A, 0x530B, 0x0, 0x530D, 0x530E, 0x530F, 0x5310, 0x5311, 0x5312, 0x0, 0x0, 0x5315, 0x5316, 0x5317, 0x0, 0x5319, 0x531A, 0x0, 0x531C, 0x531D, 0x0, 0x531F, 0x5320, 0x5321, 0x5322, 0x5323, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x532A, 0x0, 0x0, 0x5326, 0x0, 0x6C47, 0x5330, 0x532E, 0x0, 0x0, 0x5334, 0x0, 0x0, 0x5337, 0x0, 0x5339, 0x0, 0x0, 0x533C, 0x533D, 0x533E, 0x533F, 0x533A, 0x5341, 0x0, 0x5343, 0x0, 0x5345, 0x0, 0x5347, 0x5348, 0x5349, 0x534A, 0x0, 0x534C, 0x534D, 0x0, 0x0, 0x0, 0x5351, 0x5352, 0x5353, 0x534F, 0x0, 0x0, 0x5357, 0x0, 0x0, 0x535A, 0x0, 0x535C, 0x0, 0x535E, 0x0, 0x5360, 0x5361, 0x0, 0x5363, 0x0, 0x0, 0x5366, 0x0, 0x0, 0x0, 0x0, 0x0, 0x536C, 0x0, 0x536E, 0x536F, 0x5370, 0x5371, 0x5372, 0x5373, 0x0, 0x5375, 0x0, 0x5377, 0x5378, 0x6064, 0x0, 0x5374, 0x537C, 0x0, 0x0, 0x537F, 0x0, 0x0, 0x5382, 0x0, 0x5384, 0x0, 0x0, 0x0, 0x0, 0x0, 0x538A, 0x0, 0x0, 0x0, 0x538E, 0x538F, 0x0, 0x0, 0x5392, 0x0, 0x5394, 0x0, 0x5396, 0x5397, 0x5398, 0x538D, 0x539A, 0x0, 0x539C, 0x539D, 0x539E, 0x539F, 0x0, 0x0, 0x0, 0x0, 0x5386, 0x53A5, 0x0, 0x53A7, 0x0, 0x0, 0x0, 0x0, 0x53AC, 0x538C, 0x0, 0x0, 0x0, 0x0, 0x5389, 0x0, 0x53A3, 0x0, 0x0, 0x0, 0x0, 0x53B9, 0x0, 0x53BB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x53C2, 0x0, 0x0, 0x0, 0x0, 0x53C8, 0x53C9, 0x53CA, 0x53CB, 0x0, 0x53CD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x53D4, 0x0, 0x53D6, 0x53D7, 0x0, 0x0, 0x0, 0x53DB, 0x0, 0x0, 0x0, 0x53DF, 0x0, 0x53E1, 0x4E1B, 0x53E3, 0x53E4, 0x53E5, 0x53E6, 0x0, 0x53E8, 0x53E9, 0x53EA, 0x53EB, 0x53EC, 0x53ED, 0x53EE, 0x53EF, 0x53F0, 0x53F1, 0x53F2, 0x53F3, 0x0, 0x53F5, 0x0, 0x0, 0x53F8, 0x0, 0x0, 0x53FB, 0x53FC, 0x0, 0x0, 0x0, 0x0, 0x5401, 0x0, 0x5403, 0x5404, 0x0, 0x5406, 0x5407, 0x5408, 0x5409, 0x540A, 0x540B, 0x540C, 0x540D, 0x540E, 0x540F, 0x5410, 0x5411, 0x54A4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5418, 0x5419, 0x0, 0x541B, 0x541C, 0x541D, 0x541E, 0x541F, 0x5420, 0x0, 0x0, 0x0, 0x5424, 0x5425, 0x5426, 0x5427, 0x5428, 0x5429, 0x542A, 0x542B, 0x542C, 0x542D, 0x542E, 0x0, 0x5430, 0x5431, 0x0, 0x5434, 0x0, 0x5435, 0x5436, 0x5437, 0x5438, 0x5439, 0x0, 0x543B, 0x543C, 0x543D, 0x543E, 0x0, 0x5440, 0x5441, 0x5415, 0x5443, 0x0, 0x5445, 0x5446, 0x5447, 0x5448, 0x0, 0x544A, 0x0, 0x0, 0x0, 0x544E, 0x544F, 0x0, 0x0, 0x0, 0x0, 0x5454, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5460, 0x5461, 0x5462, 0x5463, 0x5464, 0x5465, 0x5466, 0x5467, 0x5468, 0x0, 0x0, 0x546B, 0x546C, 0x0, 0x0, 0x546F, 0x5470, 0x5471, 0x5472, 0x5473, 0x5474, 0x5475, 0x5476, 0x5477, 0x5478, 0x0, 0x547A, 0x547B, 0x547C, 0x547D, 0x547E, 0x547F, 0x5480, 0x5481, 0x5482, 0x0, 0x5484, 0x0, 0x5486, 0x5487, 0x5488, 0x0, 0x0, 0x548B, 0x548C, 0x548D, 0x548E, 0x0, 0x5490, 0x5491, 0x5492, 0x0, 0x0, 0x5495, 0x5496, 0x0, 0x5498, 0x0, 0x549A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54A0, 0x54A1, 0x54A2, 0x0, 0x0, 0x54A5, 0x54A6, 0x54A7, 0x54A8, 0x54A9, 0x54AA, 0x54AB, 0x54AC, 0x54AD, 0x54AE, 0x54AF, 0x54B0, 0x54B1, 0x0, 0x54B3, 0x0, 0x0, 0x54B6, 0x54B7, 0x54B8, 0x0, 0x54BA, 0x54BB, 0x5459, 0x54BD, 0x54BE, 0x54BF, 0x54C0, 0x54C1, 0x54C2, 0x54C3, 0x54C4, 0x54C5, 0x54C6, 0x54C7, 0x54C8, 0x54C9, 0x0, 0x0, 0x0, 0x0, 0x54CE, 0x54CF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54D6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54DE, 0x0, 0x54E0, 0x5458, 0x5494, 0x0, 0x54E4, 0x54E5, 0x54E6, 0x54E7, 0x54E8, 0x54E9, 0x54EA, 0x54EB, 0x0, 0x54ED, 0x54EE, 0x0, 0x0, 0x54F1, 0x54F2, 0x54F3, 0x0, 0x0, 0x0, 0x54F7, 0x54F8, 0x0, 0x54FA, 0x54FB, 0x54FC, 0x54FD, 0x0, 0x54FF, 0x0, 0x5501, 0x0, 0x5503, 0x5457, 0x5505, 0x5506, 0x5507, 0x5508, 0x5509, 0x550A, 0x550B, 0x550C, 0x0, 0x550E, 0x550F, 0x5510, 0x5511, 0x5512, 0x0, 0x5514, 0x0, 0x0, 0x5517, 0x0, 0x0, 0x5423, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5526, 0x5527, 0x0, 0x0, 0x552A, 0x0, 0x552C, 0x552D, 0x552E, 0x552F, 0x5530, 0x5531, 0x5532, 0x5533, 0x5534, 0x5535, 0x5536, 0x5537, 0x5FF5, 0x5539, 0x0, 0x553B, 0x553C, 0x0, 0x553E, 0x0, 0x5540, 0x5541, 0x0, 0x5543, 0x5544, 0x5545, 0x5546, 0x0, 0x5548, 0x0, 0x554A, 0x554B, 0x0, 0x554D, 0x554E, 0x95EE, 0x5550, 0x5551, 0x5552, 0x0, 0x0, 0x5555, 0x5556, 0x5556, 0x0, 0x0, 0x0, 0x0, 0x555C, 0x0, 0x54D1, 0x542F, 0x0, 0x5561, 0x5521, 0x8854, 0x5564, 0x5565, 0x5566, 0x0, 0x0, 0x0, 0x556A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5575, 0x5576, 0x5577, 0x0, 0x0, 0x0, 0x557B, 0x557C, 0x557D, 0x557E, 0x557F, 0x5580, 0x5581, 0x5582, 0x5583, 0x5584, 0x0, 0x0, 0x5587, 0x5588, 0x5589, 0x558A, 0x558B, 0x558C, 0x558D, 0x558E, 0x558F, 0x0, 0x5591, 0x54B1, 0x5593, 0x5594, 0x5595, 0x0, 0x0, 0x5598, 0x5599, 0x5524, 0x0, 0x559C, 0x559D, 0x0, 0x559F, 0x0, 0x55A1, 0x55A2, 0x55A3, 0x55A4, 0x55A5, 0x5CA9, 0x55A7, 0x55A8, 0x0, 0x4E27, 0x5403, 0x4E54, 0x55AD, 0x5355, 0x0, 0x0, 0x55B1, 0x54DF, 0x55B3, 0x0, 0x55B5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x55BB, 0x0, 0x0, 0x0, 0x55BF, 0x55C0, 0x0, 0x55C2, 0x55C3, 0x55C4, 0x55C5, 0x545B, 0x556C, 0x55C8, 0x55C9, 0x551D, 0x55CB, 0x55CC, 0x55CD, 0x5417, 0x55CF, 0x55D0, 0x55D1, 0x55D2, 0x55D3, 0x55D4, 0x55D5, 0x55D6, 0x0, 0x0, 0x55D9, 0x545C, 0x55DB, 0x55DC, 0x55DD, 0x0, 0x55DF, 0x0, 0x55E1, 0x55E2, 0x55E3, 0x55E4, 0x55E5, 0x55E6, 0x0, 0x55E8, 0x5522, 0x0, 0x0, 0x0, 0x0, 0x0, 0x55EF, 0x0, 0x0, 0x55F2, 0x0, 0x0, 0x0, 0x54D4, 0x55F7, 0x0, 0x55F9, 0x55FA, 0x0, 0x55FC, 0x55FD, 0x55FE, 0x55FF, 0x5600, 0x5601, 0x5602, 0x0, 0x5604, 0x0, 0x53F9, 0x0, 0x5608, 0x5609, 0x0, 0x0, 0x560C, 0x55BD, 0x560E, 0x560F, 0x5610, 0x0, 0x5612, 0x5613, 0x5455, 0x5615, 0x5567, 0x5C1D, 0x0, 0x0, 0x0, 0x561B, 0x551B, 0x561D, 0x0, 0x561F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5627, 0x0, 0x54D7, 0x562A, 0x0, 0x562C, 0x0, 0x5520, 0x5578, 0x53FD, 0x0, 0x5632, 0x5633, 0x5634, 0x54D3, 0x5636, 0x0, 0x5452, 0x5639, 0x563A, 0x563B, 0x0, 0x5574, 0x563E, 0x563F, 0x5640, 0x6076, 0x5642, 0x0, 0x0, 0x54B4, 0x5646, 0x0, 0x5648, 0x5649, 0x564A, 0x0, 0x564C, 0x0, 0x564E, 0x0, 0x0, 0x0, 0x0, 0x5618, 0x0, 0x0, 0x0, 0x5657, 0x5658, 0x5659, 0x565A, 0x0, 0x0, 0x0, 0x565E, 0x0, 0x54D2, 0x0, 0x5662, 0x5663, 0x5664, 0x54DD, 0x54D5, 0x0, 0x5668, 0x5669, 0x566A, 0x566B, 0x566C, 0x566D, 0x566E, 0x55F3, 0x5670, 0x5671, 0x54D9, 0x5673, 0x55B7, 0x0, 0x5676, 0x5677, 0x5428, 0x5F53, 0x0, 0x0, 0x0, 0x0, 0x567E, 0x567F, 0x549B, 0x5681, 0x5682, 0x5683, 0x5684, 0x5685, 0x5686, 0x5413, 0x0, 0x0, 0x0, 0x0, 0x54DC, 0x568D, 0x568E, 0x568F, 0x5C1D, 0x0, 0x0, 0x5693, 0x0, 0x565C, 0x0, 0x5697, 0x5698, 0x556E, 0x569A, 0x0, 0x569C, 0x569D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54BD, 0x5456, 0x56A7, 0x5499, 0x0, 0x56AA, 0x56AB, 0x56AC, 0x56AD, 0x5411, 0x0, 0x0, 0x0, 0x4EB8, 0x55BE, 0x4E25, 0x56B5, 0x5624, 0x56B7, 0x0, 0x0, 0x0, 0x0, 0x56BC, 0x56BD, 0x56BE, 0x0, 0x556D, 0x55EB, 0x56A3, 0x56C3, 0x0, 0x5181, 0x56C6, 0x0, 0x5453, 0x5570, 0x56CA, 0x56CB, 0x82CF, 0x56CD, 0x0, 0x0, 0x0, 0x5631, 0x0, 0x56D3, 0x56D4, 0x0, 0x0, 0x56D7, 0x0, 0x0, 0x56DA, 0x56DB, 0x0, 0x56DD, 0x56DE, 0x56DF, 0x56E0, 0x56E1, 0x0, 0x0, 0x56E4, 0x56E5, 0x0, 0x56E7, 0x0, 0x0, 0x56F1, 0x56EB, 0x0, 0x0, 0x56EE, 0x0, 0x56F0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56F7, 0x0, 0x56F9, 0x56FA, 0x0, 0x0, 0x0, 0x0, 0x56FF, 0x0, 0x5701, 0x5702, 0x5703, 0x5704, 0x0, 0x0, 0x56F5, 0x5708, 0x5709, 0x570A, 0x56FD, 0x570C, 0x56F4, 0x0, 0x0, 0x0, 0x0, 0x56ED, 0x5706, 0x5714, 0x0, 0x56FE, 0x0, 0x56E2, 0x0, 0x571A, 0x571B, 0x571C, 0x0, 0x571E, 0x571F, 0x5720, 0x0, 0x5722, 0x5723, 0x0, 0x0, 0x0, 0x0, 0x5728, 0x5729, 0x572A, 0x0, 0x572C, 0x572D, 0x572E, 0x572F, 0x5730, 0x0, 0x0, 0x5733, 0x5734, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x573B, 0x0, 0x0, 0x573E, 0x0, 0x5740, 0x5741, 0x0, 0x0, 0x0, 0x5745, 0x0, 0x5747, 0x0, 0x5749, 0x574A, 0x574B, 0x574C, 0x574D, 0x574E, 0x574F, 0x5750, 0x5751, 0x5752, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5761, 0x5762, 0x0, 0x5764, 0x0, 0x5766, 0x0, 0x5768, 0x5769, 0x576A, 0x576B, 0x0, 0x576D, 0x0, 0x576F, 0x57A7, 0x5771, 0x5772, 0x5773, 0x5774, 0x5775, 0x5776, 0x5777, 0x0, 0x0, 0x0, 0x577B, 0x577C, 0x577D, 0x0, 0x0, 0x5780, 0x0, 0x5782, 0x5783, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x578B, 0x578C, 0x0, 0x0, 0x578F, 0x0, 0x0, 0x0, 0x5793, 0x5794, 0x5795, 0x0, 0x5797, 0x5798, 0x5799, 0x579A, 0x579B, 0x0, 0x579D, 0x579E, 0x579F, 0x57A0, 0x0, 0x57A2, 0x57A3, 0x57A4, 0x57A5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x57AE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x57EF, 0x57B6, 0x0, 0x57B8, 0x57B9, 0x57BA, 0x0, 0x57BC, 0x57BD, 0x0, 0x57BF, 0x0, 0x57C1, 0x57C2, 0x57C3, 0x0, 0x0, 0x57C6, 0x57C7, 0x0, 0x0, 0x0, 0x57CB, 0x57CC, 0x0, 0x57CE, 0x57CF, 0x57D0, 0x0, 0x57D2, 0x0, 0x57D4, 0x57D5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x57DC, 0x0, 0x0, 0x57DF, 0x57E0, 0x57AD, 0x57E2, 0x57E3, 0x57E4, 0x57E5, 0x0, 0x57E7, 0x0, 0x57E9, 0x0, 0x0, 0x57EC, 0x57ED, 0x57EE, 0x0, 0x91C7, 0x57F1, 0x57F2, 0x57F3, 0x57F4, 0x57F5, 0x57F6, 0x6267, 0x57F8, 0x57F9, 0x57FA, 0x57FB, 0x57FC, 0x57FD, 0x0, 0x0, 0x5800, 0x5801, 0x5802, 0x0, 0x5804, 0x575A, 0x5806, 0x5807, 0x5808, 0x5809, 0x57A9, 0x580B, 0x580C, 0x580D, 0x580E, 0x0, 0x5810, 0x0, 0x0, 0x0, 0x5814, 0x0, 0x0, 0x0, 0x0, 0x5819, 0x0, 0x581B, 0x581C, 0x57DA, 0x581E, 0x0, 0x5820, 0x5821, 0x0, 0x5823, 0x5824, 0x5825, 0x0, 0x5827, 0x5828, 0x5829, 0x582A, 0x0, 0x582C, 0x582D, 0x582E, 0x5C27, 0x5830, 0x62A5, 0x5832, 0x5833, 0x573A, 0x5835, 0x5836, 0x5837, 0x5838, 0x5839, 0x0, 0x583B, 0x0, 0x583D, 0x0, 0x78B1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5848, 0x5849, 0x5757, 0x8314, 0x584C, 0x584D, 0x584E, 0x57B2, 0x0, 0x5851, 0x57D8, 0x5853, 0x5854, 0x5855, 0x0, 0x6D82, 0x5858, 0x5859, 0x51A2, 0x585B, 0x0, 0x585D, 0x585E, 0x0, 0x0, 0x0, 0x575E, 0x5863, 0x57D9, 0x5865, 0x0, 0x0, 0x5868, 0x0, 0x0, 0x586B, 0x0, 0x586D, 0x0, 0x586F, 0x0, 0x5871, 0x0, 0x0, 0x5874, 0x5C18, 0x5876, 0x0, 0x0, 0x5811, 0x587A, 0x587B, 0x7816, 0x587D, 0x587E, 0x587F, 0x5880, 0x5881, 0x5882, 0x5883, 0x0, 0x5885, 0x5886, 0x5887, 0x5888, 0x5889, 0x57AB, 0x588B, 0x0, 0x0, 0x588E, 0x588F, 0x5890, 0x5891, 0x0, 0x5893, 0x5894, 0x0, 0x0, 0x0, 0x5898, 0x0, 0x0, 0x0, 0x5760, 0x7857, 0x589E, 0x589F, 0x58A0, 0x58A1, 0x0, 0x58A3, 0x0, 0x58A5, 0x58A6, 0x0, 0x58A8, 0x58A9, 0x0, 0x58AB, 0x58AC, 0x0, 0x5815, 0x58AF, 0x0, 0x58B1, 0x0, 0x575F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58BA, 0x0, 0x58BC, 0x58BD, 0x57A6, 0x58BF, 0x0, 0x58C1, 0x58C2, 0x0, 0x0, 0x58C5, 0x58C6, 0x575B, 0x58C8, 0x58C9, 0x0, 0x0, 0x0, 0x0, 0x57D9, 0x58CF, 0x0, 0x58D1, 0x58D2, 0x538B, 0x58D4, 0x58D5, 0x58D6, 0x0, 0x5792, 0x5739, 0x5786, 0x58DB, 0x0, 0x58DD, 0x574F, 0x5784, 0x0, 0x0, 0x575C, 0x58E3, 0x58E4, 0x0, 0x0, 0x58E7, 0x58E8, 0x575D, 0x0, 0x58EB, 0x58EC, 0x0, 0x0, 0x58EE, 0x0, 0x0, 0x0, 0x0, 0x58F4, 0x0, 0x0, 0x0, 0x0, 0x58F9, 0x58F6, 0x0, 0x58F8, 0x5BFF, 0x58FE, 0x58FF, 0x0, 0x0, 0x0, 0x5903, 0x0, 0x0, 0x5906, 0x0, 0x0, 0x0, 0x0, 0x0, 0x590C, 0x590D, 0x590E, 0x590F, 0x0, 0x0, 0x5912, 0x0, 0x5914, 0x5915, 0x5916, 0x5917, 0x0, 0x5919, 0x591A, 0x0, 0x591C, 0x0, 0x0, 0x0, 0x591F, 0x0, 0x68A6, 0x0, 0x5924, 0x4F19, 0x0, 0x5927, 0x0, 0x5929, 0x592A, 0x592B, 0x592C, 0x592D, 0x592E, 0x592F, 0x0, 0x5931, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5937, 0x5938, 0x0, 0x0, 0x0, 0x593C, 0x0, 0x5939, 0x0, 0x5940, 0x0, 0x0, 0x0, 0x5944, 0x5945, 0x0, 0x5947, 0x5948, 0x5949, 0x594A, 0x0, 0x0, 0x0, 0x594E, 0x594F, 0x5942, 0x5951, 0x0, 0x5953, 0x5954, 0x5955, 0x0, 0x5957, 0x5958, 0x0, 0x595A, 0x0, 0x595C, 0x0, 0x0, 0x0, 0x5960, 0x5961, 0x5962, 0x0, 0x0, 0x0, 0x0, 0x5965, 0x0, 0x5941, 0x593A, 0x596B, 0x0, 0x596D, 0x594B, 0x0, 0x5970, 0x5971, 0x5972, 0x5973, 0x5974, 0x0, 0x5976, 0x5977, 0x5978, 0x5979, 0x0, 0x597B, 0x597C, 0x597D, 0x597E, 0x597F, 0x5980, 0x5981, 0x5982, 0x5983, 0x5984, 0x5985, 0x0, 0x0, 0x0, 0x0, 0x598A, 0x0, 0x0, 0x598D, 0x598E, 0x598F, 0x5990, 0x0, 0x5992, 0x5993, 0x0, 0x0, 0x5996, 0x5997, 0x5998, 0x5999, 0x0, 0x0, 0x0, 0x5986, 0x599E, 0x0, 0x59A0, 0x59A1, 0x59A2, 0x59A3, 0x59A4, 0x59A5, 0x59A6, 0x59A7, 0x59A8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x59AE, 0x59AF, 0x0, 0x59B1, 0x59B2, 0x59B3, 0x59B4, 0x59B5, 0x59B6, 0x0, 0x0, 0x59B9, 0x59BA, 0x59BB, 0x59BC, 0x59BD, 0x59BE, 0x0, 0x59C0, 0x59C1, 0x0, 0x59C3, 0x0, 0x59C5, 0x59C6, 0x59C7, 0x59C8, 0x0, 0x59CA, 0x59CB, 0x59CC, 0x59D7, 0x59CE, 0x59CF, 0x59D0, 0x59D1, 0x59D2, 0x59D3, 0x59D4, 0x0, 0x59D6, 0x0, 0x59D8, 0x0, 0x59DA, 0x59DB, 0x59DC, 0x59DD, 0x59DE, 0x0, 0x59E0, 0x59E1, 0x0, 0x59E3, 0x59E4, 0x59E5, 0x5978, 0x0, 0x59E8, 0x59E9, 0x4F84, 0x0, 0x59EC, 0x59ED, 0x59EE, 0x0, 0x0, 0x59F1, 0x59F2, 0x59F3, 0x59F4, 0x59F5, 0x59F6, 0x59F7, 0x0, 0x0, 0x59FA, 0x59FB, 0x59FC, 0x59FD, 0x59FE, 0x59FF, 0x5A00, 0x5A01, 0x0, 0x5A03, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5A09, 0x5A0A, 0x0, 0x5A0C, 0x0, 0x0, 0x5A0F, 0x0, 0x5A11, 0x0, 0x5A13, 0x0, 0x5A15, 0x5A16, 0x5A17, 0x5A18, 0x5A19, 0x0, 0x5A31, 0x5A1C, 0x0, 0x5A1E, 0x5A1F, 0x5A20, 0x0, 0x0, 0x5A23, 0x0, 0x5A25, 0x0, 0x0, 0x0, 0x5A29, 0x0, 0x0, 0x0, 0x5A2D, 0x5A2E, 0x0, 0x0, 0x0, 0x0, 0x5A33, 0x0, 0x5A35, 0x5A36, 0x5A37, 0x5A38, 0x5A39, 0x0, 0x0, 0x5A3C, 0x0, 0x5A3E, 0x0, 0x5A40, 0x5A04, 0x5A42, 0x5A43, 0x5A44, 0x0, 0x5A46, 0x5A47, 0x5A48, 0x5A49, 0x5A4A, 0x0, 0x5A4C, 0x5A4D, 0x0, 0x0, 0x5A50, 0x5A51, 0x5A52, 0x5A53, 0x0, 0x5A55, 0x5A56, 0x5A57, 0x5A58, 0x0, 0x5A5A, 0x5A5B, 0x5A5C, 0x5A5D, 0x5A5E, 0x5A5F, 0x5A60, 0x0, 0x5A62, 0x0, 0x5A64, 0x5A65, 0x5987, 0x5A67, 0x0, 0x5A69, 0x5A6A, 0x0, 0x6DEB, 0x5A05, 0x0, 0x0, 0x5A70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5A77, 0x5A78, 0x0, 0x5A7A, 0x5A7B, 0x5A7C, 0x5A7D, 0x0, 0x5A7F, 0x0, 0x0, 0x0, 0x5A83, 0x5A84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5A8A, 0x5A8B, 0x5A8C, 0x0, 0x5A8E, 0x5A8F, 0x5A90, 0x0, 0x5A92, 0x5A93, 0x5A94, 0x5A95, 0x0, 0x5A97, 0x0, 0x0, 0x5A9A, 0x5A9B, 0x5A9C, 0x5A9D, 0x5A9E, 0x5A9F, 0x0, 0x0, 0x5AA2, 0x0, 0x0, 0x5AA5, 0x5AA6, 0x5A32, 0x0, 0x5AA9, 0x0, 0x0, 0x5AAC, 0x0, 0x5077, 0x59AB, 0x5AB0, 0x5AB1, 0x5AB2, 0x5AB3, 0x5AB4, 0x5AB5, 0x5AB6, 0x5AB7, 0x5AB8, 0x5AB9, 0x5ABA, 0x5ABB, 0x5AAA, 0x5988, 0x5ABE, 0x5ABF, 0x5AC0, 0x5AC1, 0x5AC2, 0x0, 0x5AC4, 0x0, 0x5AC6, 0x5AC7, 0x5AC8, 0x5AC9, 0x5ACA, 0x8885, 0x5ACC, 0x5ACD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5AD5, 0x5AD6, 0x59AA, 0x5AD8, 0x5AD9, 0x5ADA, 0x5ADB, 0x5ADC, 0x5ADD, 0x5ADE, 0x5ADF, 0x5AE0, 0x5AE1, 0x5AE2, 0x5AE3, 0x0, 0x5AE5, 0x5AE6, 0x0, 0x5AE8, 0x5AE9, 0x5AEA, 0x5AEB, 0x5AEC, 0x5AED, 0x5AEE, 0x0, 0x0, 0x0, 0x0, 0x5AF3, 0x5AF4, 0x59A9, 0x5AF6, 0x5AF7, 0x5AF8, 0x5AF9, 0x0, 0x5A34, 0x0, 0x5AFD, 0x0, 0x5A73, 0x0, 0x5B01, 0x5B02, 0x5B03, 0x0, 0x5B05, 0x0, 0x5B07, 0x5A06, 0x5B09, 0x0, 0x5A75, 0x5A07, 0x0, 0x0, 0x5B0F, 0x5B10, 0x0, 0x0, 0x5B13, 0x5B14, 0x0, 0x5B16, 0x5B17, 0x0, 0x5AF1, 0x5B1A, 0x5B1B, 0x0, 0x8885, 0x5B1E, 0x0, 0x5B20, 0x5AD2, 0x0, 0x5B23, 0x5B37, 0x5B25, 0x5B26, 0x5B27, 0x5B28, 0x0, 0x5AD4, 0x0, 0x5B2C, 0x5976, 0x5B2E, 0x5B2F, 0x5A74, 0x0, 0x5B32, 0x0, 0x5B34, 0x0, 0x0, 0x0, 0x5A76, 0x0, 0x0, 0x0, 0x5B3C, 0x5B3D, 0x61D2, 0x5B3F, 0x5B40, 0x0, 0x0, 0x5A18, 0x0, 0x5B45, 0x0, 0x5B47, 0x5B48, 0x0, 0x0, 0x5B4B, 0x5A08, 0x5B4D, 0x5B4E, 0x0, 0x5B50, 0x5B51, 0x0, 0x5B53, 0x5B54, 0x5B55, 0x5B56, 0x5B57, 0x5B58, 0x0, 0x5B5A, 0x5B5B, 0x5B5C, 0x5B5D, 0x0, 0x5B5F, 0x0, 0x0, 0x5B62, 0x5B63, 0x5B64, 0x5B65, 0x0, 0x0, 0x0, 0x5B69, 0x0, 0x5B59, 0x5B6C, 0x0, 0x5B6E, 0x0, 0x5B70, 0x5B71, 0x5B72, 0x5B73, 0x0, 0x5B75, 0x0, 0x5B77, 0x5B66, 0x0, 0x5B7A, 0x5B7B, 0x0, 0x5B7D, 0x0, 0x5B6A, 0x0, 0x5B81, 0x0, 0x5B83, 0x5B84, 0x5B85, 0x0, 0x5B87, 0x5B88, 0x5B89, 0x0, 0x5B8B, 0x5B8C, 0x0, 0x5B8E, 0x5B8F, 0x0, 0x0, 0x5B92, 0x5B93, 0x0, 0x5B95, 0x0, 0x5B97, 0x5B98, 0x5B99, 0x5B9A, 0x5B9B, 0x5B9C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5BA2, 0x5BA3, 0x5BA4, 0x5BA5, 0x5BA6, 0x5BA7, 0x5BA8, 0x0, 0x0, 0x0, 0x5BAC, 0x5BAD, 0x5BAB, 0x0, 0x5BB0, 0x0, 0x0, 0x5BB3, 0x5BB4, 0x5BB5, 0x5BB6, 0x0, 0x5BB8, 0x5BB9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5BBF, 0x5BC0, 0x5BC1, 0x5BC2, 0x0, 0x5BC4, 0x5BC5, 0x5BC6, 0x5BC7, 0x0, 0x0, 0x5BCA, 0x5BCB, 0x5BCC, 0x5BCD, 0x5BCE, 0x0, 0x5BD0, 0x5BD1, 0x5BD2, 0x5BD3, 0x5BD4, 0x0, 0x5BD6, 0x0, 0x5BD8, 0x5BD9, 0x0, 0x0, 0x0, 0x0, 0x5BDE, 0x5BDF, 0x5BE0, 0x5BE1, 0x5BDD, 0x5BE3, 0x5BE4, 0x5BE5, 0x5B9E, 0x5B81, 0x5BE8, 0x5BA1, 0x5BEA, 0x5199, 0x5BBD, 0x0, 0x5BEE, 0x5BEF, 0x5BF0, 0x5BF1, 0x5BF2, 0x0, 0x0, 0x5BA0, 0x5B9D, 0x0, 0x5BF8, 0x0, 0x5BFA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5C01, 0x0, 0x5C03, 0x5C04, 0x0, 0x0, 0x5C06, 0x4E13, 0x5C09, 0x5C0A, 0x5BFB, 0x5C0C, 0x5BF9, 0x5BFC, 0x5C0F, 0x5C10, 0x5C11, 0x5C12, 0x0, 0x0, 0x5C15, 0x5C16, 0x0, 0x0, 0x0, 0x5C1A, 0x0, 0x0, 0x0, 0x0, 0x5C1F, 0x0, 0x0, 0x5C22, 0x0, 0x5C24, 0x5C25, 0x0, 0x0, 0x5C28, 0x0, 0x5C2A, 0x0, 0x5C2C, 0x0, 0x0, 0x0, 0x5C30, 0x5C31, 0x0, 0x5C33, 0x0, 0x0, 0x0, 0x5C34, 0x5C38, 0x5C39, 0x5C3A, 0x5C3B, 0x5C3C, 0x0, 0x5C3E, 0x5C3F, 0x5C40, 0x5C41, 0x0, 0x0, 0x5C44, 0x5C45, 0x5C4A, 0x5C47, 0x5C48, 0x0, 0x0, 0x5C4B, 0x5C4C, 0x5C38, 0x5C4E, 0x5C4F, 0x5C50, 0x5C51, 0x0, 0x0, 0x5C54, 0x5C55, 0x5C56, 0x0, 0x5C58, 0x5C59, 0x0, 0x0, 0x5C49, 0x5C5D, 0x0, 0x0, 0x5C60, 0x0, 0x5C61, 0x5C63, 0x5C42, 0x5C65, 0x0, 0x5C67, 0x5C66, 0x5C69, 0x5C6A, 0x0, 0x5C5E, 0x5C43, 0x5C6E, 0x5C6F, 0x0, 0x5C71, 0x0, 0x5C73, 0x5C74, 0x0, 0x0, 0x0, 0x0, 0x5C79, 0x5C7A, 0x5C7B, 0x5C7C, 0x0, 0x5C7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5C86, 0x0, 0x5C88, 0x5C89, 0x5C8A, 0x5C8B, 0x5C8C, 0x5C8D, 0x0, 0x5C8F, 0x5C90, 0x5C91, 0x5C92, 0x5C93, 0x5C94, 0x5C95, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5C9D, 0x0, 0x5C9F, 0x5CA0, 0x5188, 0x5CA2, 0x5CA3, 0x5CA4, 0x5CA5, 0x5CA6, 0x5CA7, 0x5CA8, 0x5CA9, 0x5CAA, 0x5CAB, 0x5CAC, 0x5CAD, 0x5CAE, 0x5CAF, 0x5CB0, 0x5CB1, 0x0, 0x5CB3, 0x0, 0x5CB5, 0x5CB6, 0x5CB7, 0x5CB8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5CC6, 0x5CC7, 0x5CC8, 0x5CC9, 0x5CCA, 0x5CCB, 0x5CCC, 0x0, 0x5CCE, 0x5CCF, 0x5CD0, 0x0, 0x5CD2, 0x5CD3, 0x5CD4, 0x0, 0x5CD6, 0x5CD7, 0x5CD8, 0x5CD9, 0x5CDA, 0x5CDB, 0x0, 0x0, 0x5CDE, 0x5CDF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5CE8, 0x0, 0x5CEA, 0x0, 0x5CEC, 0x5CED, 0x5CEE, 0x0, 0x5CF0, 0x5CF1, 0x0, 0x0, 0x5C98, 0x0, 0x5C9B, 0x5CF7, 0x5CF8, 0x5CF9, 0x0, 0x5CFB, 0x0, 0x5CE1, 0x0, 0x5CFF, 0x5D00, 0x5D01, 0x0, 0x0, 0x0, 0x0, 0x5D06, 0x5D07, 0x0, 0x0, 0x0, 0x5D0B, 0x5D0C, 0x5D03, 0x5D0E, 0x5D0F, 0x0, 0x6606, 0x5D12, 0x0, 0x5D14, 0x0, 0x5D16, 0x5C97, 0x0, 0x4ED1, 0x5D1A, 0x5D1B, 0x0, 0x5D1D, 0x5D1E, 0x5D1F, 0x5CBD, 0x0, 0x5CE5, 0x5D23, 0x5D24, 0x5D25, 0x5D26, 0x5D27, 0x5D28, 0x5D29, 0x0, 0x0, 0x0, 0x0, 0x5D2E, 0x0, 0x5D30, 0x5D31, 0x5D32, 0x5D5B, 0x5D34, 0x5D35, 0x5D36, 0x5D37, 0x5D38, 0x5D39, 0x5D3A, 0x0, 0x5D3C, 0x5D3D, 0x0, 0x5D3F, 0x5D40, 0x5D41, 0x5D42, 0x5D43, 0x0, 0x5D45, 0x0, 0x5D47, 0x0, 0x5D49, 0x5D4A, 0x5D4B, 0x5D4C, 0x0, 0x5D4E, 0x0, 0x5C9A, 0x5D51, 0x5D52, 0x0, 0x0, 0x5D55, 0x0, 0x0, 0x0, 0x5D59, 0x0, 0x0, 0x0, 0x0, 0x5D5E, 0x0, 0x0, 0x0, 0x5D62, 0x5D63, 0x0, 0x5D65, 0x0, 0x5D67, 0x5D68, 0x5D69, 0x0, 0x5D6B, 0x5D6C, 0x0, 0x0, 0x5D6F, 0x0, 0x5D71, 0x5D72, 0x0, 0x0, 0x0, 0x0, 0x5D77, 0x0, 0x5D79, 0x5D7A, 0x0, 0x5D7C, 0x5D7D, 0x5D7E, 0x5D7F, 0x5D80, 0x5D5D, 0x5D82, 0x0, 0x5D2D, 0x0, 0x5D86, 0x5C96, 0x5D88, 0x5D89, 0x5D8A, 0x0, 0x0, 0x5D8D, 0x0, 0x0, 0x0, 0x0, 0x5D92, 0x5D93, 0x5D5A, 0x5D95, 0x0, 0x5D02, 0x0, 0x5D99, 0x5D9A, 0x0, 0x5D9C, 0x5D9D, 0x5D9E, 0x5D9F, 0x5CE4, 0x5DA1, 0x5CE3, 0x0, 0x0, 0x0, 0x0, 0x5CC4, 0x5CC3, 0x5DA9, 0x5DAA, 0x0, 0x5DAC, 0x5DAD, 0x5D04, 0x5DAF, 0x5DB0, 0x5DB1, 0x5DB2, 0x0, 0x5C99, 0x5DB5, 0x0, 0x5DB7, 0x5D58, 0x0, 0x5CAD, 0x0, 0x5C7F, 0x5CB3, 0x0, 0x0, 0x5DC0, 0x0, 0x5DC2, 0x5DC3, 0x0, 0x0, 0x5DC6, 0x5DC7, 0x0, 0x5DC9, 0x0, 0x5CBF, 0x0, 0x5DCD, 0x0, 0x5DCF, 0x0, 0x5DD1, 0x5CE6, 0x0, 0x5DC5, 0x5DD5, 0x5CA9, 0x0, 0x5DD8, 0x0, 0x0, 0x0, 0x0, 0x5DDD, 0x5DDE, 0x5DDF, 0x5DE0, 0x5DE1, 0x5DE2, 0x0, 0x0, 0x5DE5, 0x5DE6, 0x5DE7, 0x5DE8, 0x0, 0x0, 0x5DEB, 0x0, 0x0, 0x5DEE, 0x0, 0x5DEF, 0x5DF1, 0x5DF2, 0x5DF3, 0x5DF4, 0x0, 0x0, 0x5DF7, 0x0, 0x537A, 0x0, 0x0, 0x0, 0x5DFD, 0x5DFE, 0x5DFF, 0x0, 0x0, 0x5E02, 0x5E03, 0x5E04, 0x0, 0x5E06, 0x0, 0x0, 0x0, 0x5E0A, 0x0, 0x5E0C, 0x0, 0x5E0E, 0x0, 0x0, 0x5E11, 0x0, 0x0, 0x5E14, 0x5E15, 0x5E16, 0x5E17, 0x5E18, 0x5E19, 0x5E1A, 0x5E1B, 0x0, 0x5E1D, 0x0, 0x5E1F, 0x5E20, 0x5E21, 0x5E22, 0x5E23, 0x5E24, 0x5E05, 0x0, 0x0, 0x5E28, 0x5E29, 0x0, 0x5E08, 0x0, 0x5E2D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5E10, 0x5E34, 0x0, 0x5E26, 0x5E37, 0x5E38, 0x0, 0x0, 0x0, 0x0, 0x5E3D, 0x5E3E, 0x0, 0x5E27, 0x5E41, 0x0, 0x5E0F, 0x5E44, 0x5E45, 0x0, 0x0, 0x0, 0x0, 0x5E4A, 0x5E4B, 0x5E4C, 0x5E4D, 0x5E4E, 0x5E4F, 0x0, 0x0, 0x0, 0x5E53, 0x5E54, 0x5E55, 0x0, 0x5E3C, 0x5E3B, 0x5E59, 0x0, 0x5E5B, 0x5E5C, 0x5E5D, 0x0, 0x5E1C, 0x5E60, 0x5E61, 0x5E62, 0x5E01, 0x0, 0x0, 0x5E66, 0x5E67, 0x5E68, 0x5E69, 0x5E6A, 0x5E2E, 0x5E31, 0x5E6D, 0x5E6E, 0x5E6F, 0x5E70, 0x0, 0x5E72, 0x5E73, 0x5E74, 0x5E75, 0x5E76, 0x0, 0x5E78, 0x5E72, 0x0, 0x5E7B, 0x5E7C, 0x5E7D, 0x51E0, 0x0, 0x5E80, 0x0, 0x5E82, 0x0, 0x5E84, 0x0, 0x0, 0x5E87, 0x5E88, 0x5E89, 0x5E8A, 0x5E8B, 0x5E8C, 0x5E8D, 0x0, 0x5E8F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5E95, 0x5E96, 0x5E97, 0x0, 0x0, 0x5E9A, 0x5E9B, 0x5E9C, 0x0, 0x0, 0x0, 0x5EA0, 0x0, 0x5EA2, 0x5EA3, 0x5EA4, 0x5EA5, 0x5EA6, 0x5EA7, 0x5EA8, 0x0, 0x5EAA, 0x5E93, 0x5EAC, 0x5EAD, 0x5EAE, 0x0, 0x5EB0, 0x5EB1, 0x5EB2, 0x5EB3, 0x5EB4, 0x5EB5, 0x5EB6, 0x5EB7, 0x5EB8, 0x5EB9, 0x0, 0x0, 0x0, 0x0, 0x5EBE, 0x0, 0x0, 0x5395, 0x53A2, 0x0, 0x53A9, 0x5EC5, 0x5EC6, 0x5EC7, 0x53A6, 0x5EC9, 0x5ECA, 0x5ECB, 0x5ECC, 0x0, 0x5EBC, 0x0, 0x0, 0x5ED1, 0x5ED2, 0x5ED3, 0x5ED4, 0x836B, 0x5ED6, 0x5ED7, 0x5ED8, 0x5ED9, 0x53A8, 0x5EDB, 0x5EDC, 0x53AE, 0x5EDE, 0x5E99, 0x5382, 0x5E91, 0x5E9F, 0x5E7F, 0x0, 0x5EE5, 0x5EE6, 0x5EE7, 0x5EE8, 0x5EEA, 0x0, 0x0, 0x5E90, 0x0, 0x5EEE, 0x5EEF, 0x0, 0x5EF1, 0x5EF2, 0x5385, 0x0, 0x0, 0x5EF6, 0x5EF7, 0x0, 0x0, 0x5EFA, 0x0, 0x0, 0x0, 0x5EFE, 0x5EFF, 0x0, 0x5F01, 0x5F02, 0x0, 0x5F04, 0x5F05, 0x0, 0x5F07, 0x5F08, 0x0, 0x5F0A, 0x5F0B, 0x0, 0x0, 0x0, 0x5F0F, 0x0, 0x0, 0x5F12, 0x5F13, 0x540A, 0x5F15, 0x0, 0x5F17, 0x5F18, 0x0, 0x5F1A, 0x5F1B, 0x0, 0x5F1D, 0x0, 0x5F1F, 0x0, 0x0, 0x5F22, 0x5F23, 0x5F24, 0x0, 0x5F26, 0x5F27, 0x5F28, 0x5F29, 0x0, 0x0, 0x0, 0x5F2D, 0x5F2E, 0x0, 0x5F30, 0x5F31, 0x0, 0x5F2A, 0x0, 0x5F20, 0x5F36, 0x5F3A, 0x5F38, 0x0, 0x0, 0x0, 0x5F3C, 0x0, 0x0, 0x0, 0x5F40, 0x0, 0x0, 0x5F43, 0x5F44, 0x0, 0x522B, 0x0, 0x5F39, 0x5F49, 0x5F3A, 0x5F4B, 0x5F25, 0x0, 0x5F2F, 0x5F4F, 0x0, 0x0, 0x0, 0x0, 0x5F54, 0x0, 0x5F56, 0x5F57, 0x5F58, 0x6C47, 0x0, 0x0, 0x0, 0x5F5D, 0x0, 0x0, 0x0, 0x0, 0x5F62, 0x0, 0x5F64, 0x5F66, 0x0, 0x5F67, 0x0, 0x5F69, 0x5F6A, 0x96D5, 0x5F6C, 0x5F6D, 0x0, 0x5F6F, 0x5F70, 0x5F71, 0x0, 0x5F73, 0x5F74, 0x0, 0x5F76, 0x5F77, 0x5F78, 0x5F79, 0x0, 0x0, 0x5F7C, 0x5F7D, 0x5F7E, 0x4F5B, 0x5F80, 0x5F81, 0x5F82, 0x0, 0x0, 0x5F85, 0x5F86, 0x5F87, 0x5F88, 0x5F89, 0x5F8A, 0x5F8B, 0x540E, 0x0, 0x0, 0x0, 0x5F90, 0x5F84, 0x5F92, 0x0, 0x0, 0x0, 0x5F96, 0x5F97, 0x5F98, 0x5F99, 0x0, 0x5F9B, 0x5F9C, 0x0, 0x4ECE, 0x5F9F, 0x5F95, 0x5FA1, 0x0, 0x0, 0x0, 0x5FA5, 0x5FA6, 0x0, 0x5FA8, 0x590D, 0x5FAA, 0x5FAB, 0x5F77, 0x5FAD, 0x5FAE, 0x5FAF, 0x0, 0x0, 0x5FB2, 0x0, 0x0, 0x5F81, 0x5FB6, 0x5FB7, 0x0, 0x5F7B, 0x0, 0x5FBB, 0x5FBC, 0x5FBD, 0x5FBE, 0x5FBF, 0x5FC0, 0x5FC1, 0x0, 0x5FC3, 0x0, 0x5FC5, 0x0, 0x0, 0x0, 0x5FC9, 0x0, 0x0, 0x5FCC, 0x5FCD, 0x0, 0x5FCF, 0x5FD0, 0x5FD1, 0x5FD2, 0x0, 0x5FD4, 0x5FD5, 0x5FD6, 0x5FD7, 0x5FD8, 0x5FD9, 0x0, 0x0, 0x0, 0x5FDD, 0x5FDE, 0x0, 0x5FE0, 0x5FE1, 0x0, 0x5FE3, 0x5FE4, 0x5FE5, 0x0, 0x0, 0x5FE8, 0x0, 0x5FEA, 0x5FEB, 0x0, 0x5FED, 0x5FEE, 0x5FEF, 0x0, 0x5FF1, 0x0, 0x5FF3, 0x5FF4, 0x5FF5, 0x0, 0x5FF7, 0x5FF8, 0x0, 0x5FFA, 0x5FFB, 0x0, 0x5FFD, 0x0, 0x5FFF, 0x6000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6009, 0x600A, 0x600B, 0x600C, 0x600D, 0x600E, 0x600F, 0x6010, 0x6011, 0x6012, 0x6013, 0x6014, 0x6015, 0x6016, 0x6017, 0x0, 0x6019, 0x601A, 0x601B, 0x601C, 0x601D, 0x601E, 0x0, 0x6020, 0x6021, 0x6022, 0x0, 0x6024, 0x6025, 0x6026, 0x6027, 0x6028, 0x6029, 0x602A, 0x602B, 0x602C, 0x602D, 0x602E, 0x602F, 0x0, 0x0, 0x6032, 0x6033, 0x6034, 0x6035, 0x0, 0x6037, 0x0, 0x6039, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6040, 0x6041, 0x6042, 0x6043, 0x6044, 0x6045, 0x6052, 0x6047, 0x0, 0x6049, 0x0, 0x0, 0x604C, 0x604D, 0x0, 0x0, 0x6050, 0x0, 0x0, 0x6053, 0x6054, 0x6055, 0x0, 0x0, 0x6058, 0x6059, 0x605A, 0x605B, 0x0, 0x605D, 0x605E, 0x605F, 0x0, 0x0, 0x6062, 0x6063, 0x6064, 0x803B, 0x6066, 0x6067, 0x6068, 0x6069, 0x606A, 0x606B, 0x606C, 0x606D, 0x606E, 0x606F, 0x6070, 0x0, 0x6072, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x607F, 0x6080, 0x6081, 0x0, 0x6083, 0x6084, 0x60A6, 0x6086, 0x6087, 0x6088, 0x6089, 0x608A, 0x0, 0x608C, 0x608D, 0x608E, 0x0, 0x6090, 0x0, 0x6092, 0x0, 0x6094, 0x6095, 0x6096, 0x6097, 0x0, 0x0, 0x609A, 0x609B, 0x609C, 0x609D, 0x0, 0x609F, 0x60A0, 0x0, 0x60A2, 0x60A3, 0x0, 0x0, 0x0, 0x0, 0x60A8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60B0, 0x60B1, 0x60B2, 0x0, 0x60B4, 0x6005, 0x95F7, 0x60B7, 0x60B8, 0x60B9, 0x60BA, 0x60BB, 0x60BC, 0x51C4, 0x60BE, 0x60BF, 0x60C0, 0x60C1, 0x0, 0x60C3, 0x60C4, 0x60C5, 0x60C6, 0x60C7, 0x60C8, 0x60C9, 0x60CA, 0x60CB, 0x60CC, 0x60CD, 0x60CE, 0x60CF, 0x0, 0x60D1, 0x0, 0x60D3, 0x60D4, 0x60D5, 0x0, 0x0, 0x60D8, 0x60D9, 0x60DA, 0x60DB, 0x60DC, 0x60DD, 0x0, 0x60DF, 0x60E0, 0x6076, 0x60E2, 0x0, 0x60E4, 0x0, 0x60E6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60F0, 0x607C, 0x607D, 0x60F3, 0x60F4, 0x60F5, 0x60F6, 0x60F7, 0x60F8, 0x60F9, 0x60FA, 0x607B, 0x60FC, 0x0, 0x60FE, 0x60FF, 0x6100, 0x6101, 0x0, 0x6103, 0x6104, 0x6105, 0x6106, 0x0, 0x6108, 0x6109, 0x610A, 0x610B, 0x0, 0x610D, 0x610E, 0x610F, 0x6110, 0x0, 0x6112, 0x6113, 0x6114, 0x6115, 0x6116, 0x0, 0x6118, 0x0, 0x611A, 0x7231, 0x60EC, 0x611D, 0x0, 0x611F, 0x0, 0x0, 0x0, 0x6123, 0x0, 0x0, 0x0, 0x6127, 0x60AB, 0x6129, 0x0, 0x612B, 0x612C, 0x0, 0x612E, 0x612F, 0x0, 0x0, 0x6132, 0x0, 0x6006, 0x0, 0x6136, 0x607A, 0x0, 0x0, 0x0, 0x613B, 0x0, 0x0, 0x5FFE, 0x613F, 0x6140, 0x6141, 0x0, 0x0, 0x6817, 0x6145, 0x6146, 0x6BB7, 0x6148, 0x6149, 0x614A, 0x6001, 0x614C, 0x6120, 0x614E, 0x614F, 0x0, 0x0, 0x6152, 0x6153, 0x6154, 0x6155, 0x6156, 0x0, 0x60E8, 0x0, 0x60ED, 0x615B, 0x0, 0x615D, 0x615E, 0x6078, 0x0, 0x6161, 0x6162, 0x60EF, 0x0, 0x6165, 0x6166, 0x6167, 0x6168, 0x0, 0x6004, 0x6002, 0x616C, 0x0, 0x8651, 0x0, 0x6170, 0x6171, 0x6172, 0x60AD, 0x6151, 0x6175, 0x5E86, 0x6177, 0x0, 0x6179, 0x617A, 0x0, 0x621A, 0x0, 0x6B32, 0x0, 0x6180, 0x0, 0x5FE7, 0x6183, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6189, 0x60EB, 0x618B, 0x618C, 0x618D, 0x618E, 0x0, 0x601C, 0x51ED, 0x6126, 0x6193, 0x6194, 0x0, 0x616D, 0x0, 0x0, 0x0, 0x60EE, 0x619B, 0x0, 0x619D, 0x0, 0x619F, 0x0, 0x61A1, 0x61A2, 0x0, 0x6124, 0x0, 0x0, 0x61A7, 0x61A8, 0x61A9, 0x61AA, 0x60AF, 0x61AC, 0x61AD, 0x6003, 0x61AF, 0x61B0, 0x61B1, 0x5BAA, 0x61B3, 0x61B4, 0x61B5, 0x5FC6, 0x0, 0x61B8, 0x0, 0x61BA, 0x0, 0x61BC, 0x0, 0x61BE, 0x61BF, 0x0, 0x61C1, 0x61C2, 0x61C3, 0x0, 0x61C5, 0x61C6, 0x6073, 0x61C8, 0x5E94, 0x61CA, 0x61CB, 0x603F, 0x61D4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61D6, 0x0, 0x61D8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8499, 0x603C, 0x61E0, 0x0, 0x0, 0x61D1, 0x61E4, 0x61E5, 0x61E6, 0x61E7, 0x6079, 0x61E9, 0x61EA, 0x61EB, 0x0, 0x61ED, 0x61EE, 0x0, 0x61F0, 0x61F1, 0x60E9, 0x0, 0x0, 0x61F5, 0x61D2, 0x6000, 0x60AC, 0x61F9, 0x5FCF, 0x61FB, 0x60E7, 0x6B22, 0x6151, 0x61FF, 0x604B, 0x6201, 0x0, 0x6203, 0x6204, 0x0, 0x0, 0x6206, 0x6208, 0x6209, 0x620A, 0x0, 0x620C, 0x620D, 0x620E, 0x0, 0x6210, 0x6211, 0x6212, 0x0, 0x620B, 0x6215, 0x6216, 0x0, 0x0, 0x6219, 0x621A, 0x621B, 0x0, 0x0, 0x0, 0x621F, 0x6220, 0x6221, 0x6222, 0x6223, 0x6224, 0x6225, 0x0, 0x6217, 0x0, 0x622C, 0x622A, 0x622B, 0x0, 0x622D, 0x622E, 0x0, 0x6218, 0x0, 0x620F, 0x6233, 0x6234, 0x0, 0x6237, 0x0, 0x0, 0x0, 0x623A, 0x0, 0x0, 0x623D, 0x623E, 0x623F, 0x6240, 0x6241, 0x6242, 0x6243, 0x0, 0x0, 0x6246, 0x6247, 0x6248, 0x6249, 0x624A, 0x624B, 0x0, 0x624D, 0x624E, 0x0, 0x6250, 0x6251, 0x6252, 0x6253, 0x6254, 0x0, 0x0, 0x0, 0x6258, 0x6259, 0x625A, 0x625B, 0x625C, 0x0, 0x625E, 0x0, 0x6260, 0x6266, 0x6262, 0x6263, 0x6264, 0x6265, 0x6266, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x626D, 0x626E, 0x626F, 0x6270, 0x6271, 0x6272, 0x6273, 0x6274, 0x0, 0x6276, 0x6277, 0x0, 0x6279, 0x627A, 0x627B, 0x627C, 0x627D, 0x627E, 0x627F, 0x6280, 0x6281, 0x0, 0x6283, 0x6284, 0x0, 0x6286, 0x6287, 0x6288, 0x6289, 0x628A, 0x0, 0x628C, 0x0, 0x628E, 0x628F, 0x0, 0x6291, 0x6292, 0x6293, 0x6294, 0x6295, 0x6296, 0x6297, 0x6298, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62A8, 0x62A9, 0x62AA, 0x62AB, 0x62AC, 0x62AD, 0x62AE, 0x62AF, 0x62B0, 0x62B1, 0x0, 0x62B3, 0x62B4, 0x62B5, 0x62B6, 0x0, 0x62B8, 0x62B9, 0x0, 0x62BB, 0x62BC, 0x62BD, 0x62BE, 0x62BF, 0x0, 0x0, 0x62C2, 0x0, 0x62C4, 0x0, 0x62C6, 0x62C7, 0x62C8, 0x62C9, 0x62CA, 0x629B, 0x62CC, 0x62CD, 0x62CE, 0x62CF, 0x62D0, 0x62D1, 0x62D2, 0x62D3, 0x62D4, 0x0, 0x62D6, 0x62D7, 0x62D8, 0x62D9, 0x62DA, 0x62DB, 0x62DC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62EB, 0x62EC, 0x62ED, 0x62EE, 0x62EF, 0x62F0, 0x62F1, 0x62F2, 0x62F3, 0x62F4, 0x62F5, 0x62F6, 0x62F7, 0x62F8, 0x62F9, 0x62FA, 0x62FB, 0x62FC, 0x62FD, 0x62FE, 0x62FF, 0x6300, 0x6301, 0x6302, 0x6303, 0x0, 0x0, 0x0, 0x6307, 0x6308, 0x6309, 0x0, 0x630B, 0x630C, 0x630D, 0x630E, 0x630F, 0x6310, 0x6311, 0x0, 0x6313, 0x6314, 0x6315, 0x6316, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6328, 0x6329, 0x632A, 0x632B, 0x632C, 0x632D, 0x0, 0x632F, 0x0, 0x0, 0x6332, 0x6333, 0x6334, 0x0, 0x6336, 0x0, 0x6338, 0x6339, 0x633A, 0x633B, 0x633C, 0x633D, 0x631F, 0x0, 0x6340, 0x6341, 0x6342, 0x6343, 0x6344, 0x6345, 0x6346, 0x6347, 0x6348, 0x6349, 0x634A, 0x634B, 0x634C, 0x634D, 0x634E, 0x634F, 0x6350, 0x6351, 0x0, 0x0, 0x6354, 0x6355, 0x6356, 0x6357, 0x6358, 0x6359, 0x635A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6365, 0x0, 0x6367, 0x820D, 0x6369, 0x0, 0x626A, 0x0, 0x636D, 0x636E, 0x636F, 0x6370, 0x6371, 0x5377, 0x0, 0x0, 0x6375, 0x6376, 0x6377, 0x6378, 0x0, 0x637A, 0x637B, 0x637C, 0x637D, 0x0, 0x0, 0x6380, 0x6381, 0x6382, 0x626B, 0x62A1, 0x6385, 0x0, 0x6387, 0x6388, 0x6389, 0x638A, 0x0, 0x638C, 0x638D, 0x638E, 0x638F, 0x6390, 0x6391, 0x6392, 0x0, 0x6394, 0x0, 0x6396, 0x631C, 0x6398, 0x6323, 0x0, 0x6302, 0x639C, 0x639D, 0x639E, 0x639F, 0x63A0, 0x91C7, 0x63A2, 0x63A3, 0x63A4, 0x63A5, 0x0, 0x63A7, 0x63A8, 0x63A9, 0x63AA, 0x63AB, 0x63AC, 0x63AD, 0x63AE, 0x63AF, 0x63B0, 0x63B1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63BD, 0x63BE, 0x0, 0x62E3, 0x0, 0x63C2, 0x63C3, 0x63C4, 0x63C5, 0x63C6, 0x63C7, 0x63C8, 0x63C9, 0x63CA, 0x63CB, 0x63CC, 0x63CD, 0x63CE, 0x63CF, 0x63D0, 0x0, 0x63D2, 0x63D3, 0x0, 0x63D5, 0x63D6, 0x63D7, 0x63D8, 0x63D9, 0x626C, 0x6362, 0x63DC, 0x63DD, 0x0, 0x63DF, 0x63E0, 0x63E1, 0x0, 0x63E3, 0x63E4, 0x63E5, 0x0, 0x63E7, 0x63E8, 0x63E9, 0x63EA, 0x63EB, 0x0, 0x63ED, 0x6325, 0x63EF, 0x63F0, 0x63F1, 0x63F2, 0x63F3, 0x63F4, 0x63F5, 0x63F6, 0x0, 0x0, 0x80CC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6784, 0x0, 0x0, 0x6409, 0x640A, 0x640B, 0x640C, 0x635F, 0x640E, 0x640F, 0x6410, 0x0, 0x6412, 0x6413, 0x6414, 0x6415, 0x6447, 0x6363, 0x6418, 0x0, 0x641A, 0x641B, 0x641C, 0x0, 0x641E, 0x641F, 0x6420, 0x6421, 0x6422, 0x6423, 0x6424, 0x6425, 0x6426, 0x6427, 0x6428, 0x0, 0x642A, 0x642B, 0x642C, 0x642D, 0x642E, 0x642F, 0x6430, 0x0, 0x0, 0x6433, 0x6434, 0x6435, 0x62A2, 0x6437, 0x0, 0x6439, 0x0, 0x0, 0x0, 0x643D, 0x69A8, 0x643F, 0x6440, 0x6441, 0x0, 0x6443, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x644B, 0x0, 0x644D, 0x644E, 0x0, 0x6450, 0x63B4, 0x6452, 0x6453, 0x6454, 0x0, 0x0, 0x0, 0x6458, 0x6459, 0x0, 0x645B, 0x63BC, 0x645D, 0x645E, 0x6402, 0x6460, 0x6461, 0x0, 0x0, 0x0, 0x6465, 0x6466, 0x6467, 0x6468, 0x6469, 0x0, 0x646B, 0x646C, 0x646D, 0x646E, 0x631A, 0x6470, 0x0, 0x6472, 0x62A0, 0x6474, 0x6475, 0x629F, 0x6477, 0x6478, 0x6479, 0x6298, 0x63BA, 0x0, 0x647D, 0x0, 0x647F, 0x0, 0x0, 0x6482, 0x0, 0x0, 0x6485, 0x0, 0x6487, 0x635E, 0x6489, 0x648A, 0x648B, 0x648C, 0x0, 0x0, 0x6326, 0x6491, 0x0, 0x6492, 0x6320, 0x0, 0x6495, 0x6496, 0x6497, 0x6498, 0x6499, 0x637B, 0x0, 0x649C, 0x649D, 0x649E, 0x6322, 0x64A0, 0x0, 0x64A2, 0x63B8, 0x64A4, 0x62E8, 0x64A6, 0x0, 0x0, 0x64A9, 0x0, 0x629A, 0x64AC, 0x64AD, 0x64AE, 0x0, 0x64B0, 0x64B1, 0x6251, 0x63FF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x631E, 0x64BC, 0x64BD, 0x631D, 0x6361, 0x0, 0x62E5, 0x64C2, 0x64C3, 0x63B3, 0x64C5, 0x0, 0x62E9, 0x0, 0x64C9, 0x51FB, 0x6321, 0x0, 0x64CD, 0x64CE, 0x64CF, 0x64D0, 0x0, 0x64D2, 0x0, 0x62C5, 0x0, 0x64D6, 0x64D7, 0x64D8, 0x64D9, 0x636E, 0x64DB, 0x0, 0x0, 0x0, 0x0, 0x6324, 0x0, 0x64E2, 0x6363, 0x64E4, 0x0, 0x64E6, 0x0, 0x64E8, 0x64E9, 0x0, 0x64EB, 0x62DF, 0x64ED, 0x0, 0x6448, 0x62E7, 0x6401, 0x63B7, 0x64F3, 0x6269, 0x0, 0x0, 0x64B7, 0x64F8, 0x0, 0x6446, 0x64DE, 0x64B8, 0x64FD, 0x6270, 0x64FF, 0x6500, 0x6501, 0x0, 0x6503, 0x6445, 0x0, 0x64B5, 0x6507, 0x0, 0x6509, 0x0, 0x0, 0x650C, 0x650D, 0x650E, 0x62E2, 0x6510, 0x0, 0x0, 0x6513, 0x62E6, 0x6515, 0x6484, 0x6517, 0x6518, 0x6400, 0x0, 0x64BA, 0x643A, 0x6444, 0x0, 0x0, 0x6520, 0x6521, 0x6512, 0x631B, 0x644A, 0x6525, 0x6526, 0x0, 0x0, 0x6321, 0x6405, 0x652B, 0x63FD, 0x652D, 0x652E, 0x652F, 0x0, 0x0, 0x6532, 0x6533, 0x0, 0x0, 0x6536, 0x8003, 0x6538, 0x6539, 0x0, 0x653B, 0x0, 0x653D, 0x653E, 0x653F, 0x0, 0x6541, 0x0, 0x6543, 0x0, 0x6545, 0x6546, 0x0, 0x6548, 0x6549, 0x654A, 0x0, 0x0, 0x0, 0x0, 0x654F, 0x0, 0x6551, 0x0, 0x6553, 0x6554, 0x6555, 0x6556, 0x8D25, 0x53D9, 0x6559, 0x0, 0x0, 0x655C, 0x655D, 0x655E, 0x0, 0x0, 0x0, 0x6562, 0x6563, 0x6564, 0x6565, 0x6566, 0x6567, 0x6568, 0x0, 0x656A, 0x0, 0x656C, 0x0, 0x0, 0x656F, 0x0, 0x0, 0x6572, 0x6573, 0x6574, 0x654C, 0x6576, 0x6577, 0x6570, 0x6579, 0x9A71, 0x657B, 0x657C, 0x0, 0x0, 0x657F, 0x6580, 0x6581, 0x655B, 0x6BD9, 0x6584, 0x0, 0x0, 0x6587, 0x0, 0x0, 0x0, 0x0, 0x658C, 0x0, 0x0, 0x0, 0x6590, 0x6591, 0x6592, 0x0, 0x6594, 0x6593, 0x6596, 0x6597, 0x0, 0x6599, 0x0, 0x659B, 0x659C, 0x659D, 0x659E, 0x659F, 0x65A0, 0x65A1, 0x65A2, 0x0, 0x65A4, 0x65A5, 0x0, 0x65A7, 0x65A8, 0x0, 0x65AA, 0x65AB, 0x65A9, 0x0, 0x65AE, 0x65AF, 0x65B0, 0x0, 0x65B2, 0x65B3, 0x0, 0x0, 0x65B6, 0x65AD, 0x65B8, 0x65B9, 0x0, 0x65BB, 0x4E8E, 0x65BD, 0x0, 0x65BF, 0x0, 0x65C1, 0x65D7, 0x65C3, 0x65C4, 0x65C5, 0x65C6, 0x0, 0x0, 0x0, 0x0, 0x65CB, 0x65CC, 0x65CD, 0x65CE, 0x65CF, 0x65D0, 0x0, 0x65D2, 0x65D3, 0x0, 0x0, 0x65D6, 0x65D7, 0x0, 0x0, 0x65DA, 0x65DB, 0x0, 0x65DD, 0x65DE, 0x65DF, 0x0, 0x65E1, 0x65E2, 0x0, 0x0, 0x65E5, 0x65E6, 0x0, 0x65E8, 0x65E9, 0x0, 0x0, 0x65EC, 0x65ED, 0x65EE, 0x65EF, 0x65F0, 0x65F1, 0x65F2, 0x65F3, 0x65F4, 0x65F5, 0x0, 0x0, 0x0, 0x0, 0x65FA, 0x65FB, 0x65FC, 0x65FD, 0x0, 0x0, 0x6600, 0x0, 0x6602, 0x6603, 0x6604, 0x6605, 0x6606, 0x5347, 0x6608, 0x6609, 0x660A, 0x660B, 0x660C, 0x660D, 0x660E, 0x660F, 0x6610, 0x6611, 0x6612, 0x6613, 0x6614, 0x6615, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x661C, 0x661D, 0x0, 0x661F, 0x6620, 0x6621, 0x6622, 0x0, 0x6624, 0x6625, 0x6626, 0x6627, 0x6628, 0x0, 0x0, 0x662B, 0x0, 0x662D, 0x662E, 0x662F, 0x0, 0x6631, 0x6632, 0x6633, 0x6634, 0x6635, 0x6636, 0x0, 0x0, 0x6639, 0x663A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6641, 0x65F6, 0x6643, 0x0, 0x6645, 0x0, 0x6647, 0x0, 0x664B, 0x664A, 0x0, 0x664C, 0x0, 0x0, 0x664F, 0x0, 0x6651, 0x6652, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6659, 0x665A, 0x665B, 0x665C, 0x663C, 0x665E, 0x665F, 0x0, 0x6661, 0x6662, 0x0, 0x6664, 0x6665, 0x6666, 0x0, 0x6668, 0x0, 0x666A, 0x0, 0x666C, 0x0, 0x666E, 0x666F, 0x6670, 0x6671, 0x6672, 0x0, 0x6674, 0x0, 0x6676, 0x6677, 0x6678, 0x6679, 0x667A, 0x667B, 0x667C, 0x0, 0x667E, 0x0, 0x6680, 0x0, 0x0, 0x0, 0x6684, 0x0, 0x6686, 0x6687, 0x6655, 0x6656, 0x668A, 0x668B, 0x668C, 0x668D, 0x0, 0x0, 0x6690, 0x6691, 0x0, 0x0, 0x6694, 0x6695, 0x6696, 0x6697, 0x65F8, 0x6699, 0x0, 0x0, 0x0, 0x669D, 0x0, 0x669F, 0x66A0, 0x66A1, 0x7545, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66A8, 0x66A9, 0x66AA, 0x6682, 0x0, 0x0, 0x66AE, 0x66AF, 0x66B0, 0x6635, 0x66B2, 0x0, 0x66B4, 0x66B5, 0x0, 0x66B7, 0x66B8, 0x66B9, 0x66BA, 0x66BB, 0x0, 0x66BD, 0x66BE, 0x0, 0x66C0, 0x0, 0x0, 0x0, 0x6654, 0x0, 0x5386, 0x6619, 0x66C8, 0x6653, 0x66CA, 0x66CB, 0x66CC, 0x0, 0x0, 0x5411, 0x0, 0x0, 0x66D2, 0x0, 0x0, 0x0, 0x66A7, 0x0, 0x66D8, 0x66D9, 0x66DA, 0x66DB, 0x66DC, 0x66DD, 0x66DE, 0x0, 0x65F7, 0x0, 0x0, 0x66E3, 0x66E4, 0x0, 0x66E6, 0x0, 0x663D, 0x66E9, 0x0, 0x66EB, 0x6652, 0x66ED, 0x66EE, 0x0, 0x66F0, 0x0, 0x66F2, 0x66F3, 0x66F4, 0x0, 0x66F6, 0x66F7, 0x4E66, 0x66F9, 0x0, 0x0, 0x66FC, 0x0, 0x66FE, 0x66FF, 0x6700, 0x6701, 0x0, 0x4F1A, 0x6704, 0x6705, 0x0, 0x0, 0x6708, 0x6709, 0x670A, 0x670B, 0x0, 0x670D, 0x0, 0x670F, 0x6710, 0x0, 0x6712, 0x6713, 0x6714, 0x6715, 0x0, 0x6717, 0x6718, 0x0, 0x0, 0x671B, 0x0, 0x671D, 0x0, 0x671F, 0x6720, 0x6721, 0x6722, 0x6723, 0x0, 0x0, 0x6726, 0x80E7, 0x6728, 0x0, 0x672A, 0x672B, 0x672C, 0x672D, 0x672E, 0x0, 0x0, 0x6731, 0x0, 0x6733, 0x6734, 0x6735, 0x0, 0x0, 0x6738, 0x6739, 0x673A, 0x673B, 0x673C, 0x673D, 0x673E, 0x673F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6745, 0x6746, 0x6747, 0x6748, 0x6749, 0x0, 0x674B, 0x674C, 0x674D, 0x674E, 0x674F, 0x6750, 0x6751, 0x0, 0x6753, 0x0, 0x6755, 0x6756, 0x6757, 0x0, 0x6759, 0x675A, 0x0, 0x675C, 0x675D, 0x675E, 0x675F, 0x6760, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x676A, 0x0, 0x676C, 0x676D, 0x0, 0x676F, 0x6770, 0x4E1C, 0x6772, 0x6773, 0x6774, 0x6775, 0x6776, 0x6777, 0x6778, 0x6779, 0x677A, 0x677B, 0x677C, 0x677D, 0x677E, 0x677F, 0x0, 0x6781, 0x0, 0x6783, 0x6784, 0x6785, 0x6786, 0x6787, 0x0, 0x6789, 0x0, 0x678B, 0x678C, 0x678D, 0x678E, 0x0, 0x6790, 0x6791, 0x6792, 0x6793, 0x6794, 0x6795, 0x0, 0x6797, 0x6798, 0x6799, 0x679A, 0x0, 0x679C, 0x679D, 0x0, 0x679F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67AE, 0x67AF, 0x67B0, 0x0, 0x67B2, 0x67B3, 0x62D0, 0x67B5, 0x67B6, 0x67B7, 0x67B8, 0x67B9, 0x67BA, 0x67BB, 0x0, 0x0, 0x0, 0x0, 0x67C0, 0x67C1, 0x67C2, 0x67C3, 0x67C4, 0x67C5, 0x67C6, 0x0, 0x67C8, 0x67C9, 0x67CA, 0x67CB, 0x67CC, 0x67CD, 0x67CE, 0x67CF, 0x67D0, 0x67D1, 0x67D2, 0x67D3, 0x67D4, 0x0, 0x0, 0x0, 0x67D8, 0x67D9, 0x67DA, 0x67DB, 0x67DC, 0x67DD, 0x67DE, 0x67DF, 0x0, 0x0, 0x67E2, 0x67E3, 0x67E4, 0x67E5, 0x67E6, 0x67E7, 0x0, 0x67E9, 0x67EA, 0x67EB, 0x67EC, 0x67ED, 0x67EE, 0x67EF, 0x67F0, 0x67F1, 0x67F2, 0x67F3, 0x67F4, 0x6805, 0x67F6, 0x67F7, 0x67F8, 0x0, 0x62D0, 0x0, 0x67FC, 0x0, 0x0, 0x67FF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6812, 0x6813, 0x6814, 0x0, 0x6816, 0x6817, 0x6818, 0x0, 0x681A, 0x0, 0x681C, 0x681D, 0x0, 0x681F, 0x6820, 0x6821, 0x0, 0x0, 0x0, 0x6825, 0x6826, 0x0, 0x6828, 0x6829, 0x682A, 0x682B, 0x0, 0x682D, 0x682E, 0x682F, 0x0, 0x6831, 0x6832, 0x6833, 0x6834, 0x6835, 0x0, 0x0, 0x6838, 0x6839, 0x683A, 0x683B, 0x683C, 0x683D, 0x0, 0x0, 0x6840, 0x6841, 0x6842, 0x6843, 0x6844, 0x6845, 0x6846, 0x0, 0x6848, 0x6849, 0x0, 0x684B, 0x684C, 0x684D, 0x684E, 0x684F, 0x6850, 0x6851, 0x0, 0x6853, 0x6854, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x686B, 0x0, 0x686D, 0x686E, 0x686F, 0x0, 0x6871, 0x6872, 0x0, 0x6874, 0x6875, 0x6876, 0x6877, 0x6878, 0x6879, 0x0, 0x687B, 0x687C, 0x687D, 0x687E, 0x6746, 0x6880, 0x6881, 0x6882, 0x6883, 0x0, 0x6885, 0x6886, 0x6887, 0x0, 0x6889, 0x688A, 0x688B, 0x688C, 0x0, 0x0, 0x688F, 0x6890, 0x6891, 0x6892, 0x6893, 0x6800, 0x0, 0x6896, 0x6897, 0x0, 0x0, 0x0, 0x689B, 0x689C, 0x6761, 0x0, 0x67AD, 0x68A0, 0x68A1, 0x68A2, 0x68A3, 0x68A4, 0x0, 0x0, 0x68A7, 0x68A8, 0x68A9, 0x68AA, 0x68AB, 0x68AC, 0x68AD, 0x68AE, 0x68AF, 0x68B0, 0x6346, 0x68B2, 0x68B3, 0x68B4, 0x68B5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5F03, 0x0, 0x68C6, 0x68C7, 0x68C8, 0x68C9, 0x0, 0x68CB, 0x68CC, 0x68CD, 0x68CE, 0x0, 0x68D0, 0x68D1, 0x68D2, 0x68D3, 0x68D4, 0x68D5, 0x67A8, 0x67A3, 0x68D8, 0x0, 0x68DA, 0x0, 0x68DC, 0x68DD, 0x68DE, 0x680B, 0x68E0, 0x68E1, 0x0, 0x68E3, 0x68E4, 0x0, 0x68E6, 0x6808, 0x68E8, 0x68E9, 0x68EA, 0x68EB, 0x684A, 0x0, 0x68EE, 0x68EF, 0x68F0, 0x68F1, 0x6816, 0x68F3, 0x68F4, 0x68F5, 0x68BE, 0x68F7, 0x68F8, 0x68F9, 0x68FA, 0x68FB, 0x68FC, 0x68FD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6904, 0x6905, 0x6906, 0x6907, 0x6908, 0x0, 0x690A, 0x690B, 0x690C, 0x690D, 0x690E, 0x6860, 0x6910, 0x6911, 0x6912, 0x6913, 0x6914, 0x6915, 0x0, 0x6917, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6925, 0x0, 0x0, 0x0, 0x0, 0x692A, 0x0, 0x0, 0x0, 0x0, 0x692F, 0x6930, 0x0, 0x6932, 0x6933, 0x6934, 0x6935, 0x0, 0x6937, 0x6938, 0x6939, 0x0, 0x693B, 0x693C, 0x693D, 0x0, 0x693F, 0x6940, 0x6941, 0x6942, 0x0, 0x6944, 0x6945, 0x0, 0x0, 0x6948, 0x6949, 0x6768, 0x694B, 0x694C, 0x0, 0x694E, 0x694F, 0x0, 0x6951, 0x6952, 0x67AB, 0x6954, 0x0, 0x6956, 0x6957, 0x6958, 0x6959, 0x695A, 0x695B, 0x695C, 0x695D, 0x695E, 0x695F, 0x6960, 0x0, 0x6962, 0x6963, 0x0, 0x6965, 0x6966, 0x0, 0x6862, 0x6969, 0x696A, 0x696B, 0x696C, 0x4E1A, 0x696E, 0x696F, 0x6970, 0x6971, 0x0, 0x0, 0x6974, 0x6781, 0x6976, 0x6977, 0x6978, 0x6979, 0x697A, 0x697B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6982, 0x6983, 0x0, 0x0, 0x6986, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x698D, 0x698E, 0x0, 0x6990, 0x6991, 0x0, 0x6993, 0x6994, 0x6995, 0x6996, 0x6997, 0x0, 0x6999, 0x699A, 0x699B, 0x699C, 0x0, 0x699E, 0x0, 0x69A0, 0x69A1, 0x0, 0x69A3, 0x69A4, 0x69A5, 0x5E72, 0x69A7, 0x69A8, 0x69A9, 0x6769, 0x69AB, 0x69AC, 0x69AD, 0x8363, 0x69AF, 0x69B0, 0x69B1, 0x0, 0x69B3, 0x69B4, 0x69B5, 0x69B6, 0x69B7, 0x0, 0x69B9, 0x0, 0x69BB, 0x69BC, 0x69BD, 0x69BE, 0x6864, 0x0, 0x69C1, 0x69C2, 0x76D8, 0x69C4, 0x0, 0x69C6, 0x0, 0x0, 0x69C9, 0x69CA, 0x6784, 0x69CC, 0x67AA, 0x69CE, 0x69CF, 0x69D0, 0x0, 0x0, 0x6760, 0x69D4, 0x0, 0x0, 0x0, 0x0, 0x69D9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69E2, 0x0, 0x69E4, 0x69E5, 0x69E6, 0x6920, 0x6901, 0x0, 0x0, 0x69EB, 0x69EC, 0x69ED, 0x69EE, 0x0, 0x0, 0x69F1, 0x69F2, 0x6868, 0x69F4, 0x0, 0x69F6, 0x69F7, 0x69F8, 0x0, 0x0, 0x69FB, 0x89C4, 0x69FD, 0x69FE, 0x69FF, 0x6A00, 0x6869, 0x4E50, 0x0, 0x6A04, 0x679E, 0x6A06, 0x6A07, 0x6A08, 0x6A09, 0x6A0A, 0x0, 0x0, 0x6A0D, 0x0, 0x6A0F, 0x0, 0x6881, 0x0, 0x697C, 0x6A14, 0x6A15, 0x6A16, 0x6A17, 0x6A18, 0x6807, 0x0, 0x6A1B, 0x0, 0x6A1D, 0x67A2, 0x6A1F, 0x6A20, 0x6A21, 0x0, 0x6837, 0x0, 0x6A25, 0x6A26, 0x6A27, 0x6A28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6A32, 0x0, 0x6A34, 0x6A35, 0x0, 0x0, 0x6734, 0x6811, 0x6866, 0x6A3B, 0x6A3C, 0x6A3D, 0x6A3E, 0x6A3F, 0x6A40, 0x6A41, 0x0, 0x0, 0x6A44, 0x0, 0x6A46, 0x6A47, 0x6861, 0x6A49, 0x0, 0x6865, 0x0, 0x6A4D, 0x6A4E, 0x6A4F, 0x6A50, 0x6A51, 0x0, 0x0, 0x6A54, 0x6A55, 0x6A56, 0x0, 0x6A58, 0x6A59, 0x6A5A, 0x6A5B, 0x0, 0x6A5D, 0x6A5E, 0x673A, 0x6A60, 0x6A61, 0x692D, 0x0, 0x6A64, 0x0, 0x6A66, 0x6A67, 0x6A68, 0x6A69, 0x6A6A, 0x6A2A, 0x0, 0x6A6D, 0x0, 0x6A6F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6A76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6A7E, 0x6A7F, 0x6A80, 0x6AA9, 0x0, 0x6A83, 0x6A84, 0x6A85, 0x0, 0x6A87, 0x0, 0x67FD, 0x0, 0x0, 0x6A8C, 0x6A8D, 0x6A8E, 0x0, 0x6A90, 0x6A91, 0x6A92, 0x6A93, 0x6A94, 0x6A95, 0x6A96, 0x6A97, 0x0, 0x0, 0x6A9A, 0x6A9B, 0x6867, 0x0, 0x6A9E, 0x69DA, 0x6AA0, 0x6AA1, 0x68C0, 0x6A2F, 0x6AA4, 0x6AA5, 0x6AA6, 0x0, 0x6AA8, 0x0, 0x0, 0x0, 0x6AAC, 0x6AAD, 0x68BC, 0x53F0, 0x0, 0x0, 0x0, 0x69DF, 0x6AB4, 0x0, 0x6AB6, 0x6AB7, 0x67E0, 0x6AB9, 0x6ABA, 0x69DB, 0x0, 0x6ABD, 0x0, 0x0, 0x0, 0x0, 0x68F9, 0x67DC, 0x0, 0x6AC5, 0x6AC6, 0x6AC7, 0x0, 0x0, 0x0, 0x6ACB, 0x6ACC, 0x6ACD, 0x0, 0x6ACF, 0x6AD0, 0x6AD1, 0x0, 0x6A79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6AD9, 0x6988, 0x6809, 0x6ADC, 0x691F, 0x6A7C, 0x680E, 0x6AE0, 0x6AE1, 0x0, 0x0, 0x0, 0x6A71, 0x0, 0x69E0, 0x680C, 0x0, 0x67A5, 0x6A65, 0x6987, 0x0, 0x6AEE, 0x6AEF, 0x6AF0, 0x6AF1, 0x0, 0x680A, 0x0, 0x0, 0x0, 0x0, 0x6989, 0x6AF9, 0x68C2, 0x6A31, 0x6AFC, 0x0, 0x0, 0x0, 0x6B00, 0x0, 0x6B02, 0x6B03, 0x680F, 0x0, 0x0, 0x0, 0x6B08, 0x6B09, 0x6743, 0x6B0B, 0x0, 0x0, 0x0, 0x6924, 0x6B10, 0x6512, 0x683E, 0x6B13, 0x0, 0x0, 0x6984, 0x6B17, 0x6B18, 0x6B19, 0x6B1A, 0x0, 0x0, 0x0, 0x68C2, 0x0, 0x6B20, 0x6B21, 0x0, 0x6B23, 0x0, 0x6B25, 0x0, 0x0, 0x6B28, 0x0, 0x0, 0x0, 0x6B2C, 0x6B2D, 0x0, 0x6B2F, 0x0, 0x6B31, 0x6B32, 0x6B33, 0x6B34, 0x0, 0x6B36, 0x6B37, 0x6B38, 0x6B39, 0x6B3A, 0x6B3B, 0x6B3C, 0x94A6, 0x6B3E, 0x6B3F, 0x0, 0x6B41, 0x6B42, 0x6B43, 0x0, 0x6B45, 0x6B46, 0x6B47, 0x6B48, 0x6B49, 0x6B4A, 0x6B4B, 0x6B4C, 0x6B4D, 0x53F9, 0x0, 0x6B27, 0x6B51, 0x0, 0x0, 0x6B54, 0x6B55, 0x6B56, 0x0, 0x0, 0x6B59, 0x0, 0x655B, 0x6B5C, 0x0, 0x6B5E, 0x6B24, 0x6B60, 0x6B22, 0x6B62, 0x6B63, 0x6B64, 0x6B65, 0x6B66, 0x6B67, 0x0, 0x0, 0x6B6A, 0x0, 0x0, 0x6B6D, 0x0, 0x0, 0x0, 0x0, 0x5C81, 0x0, 0x0, 0x0, 0x6B76, 0x5386, 0x5F52, 0x6B79, 0x0, 0x6B7B, 0x0, 0x0, 0x6B7E, 0x6B81, 0x6B80, 0x0, 0x6B82, 0x6B83, 0x6B84, 0x0, 0x6B86, 0x0, 0x6B88, 0x6B89, 0x6B8A, 0x0, 0x6B8C, 0x6B8D, 0x6B8E, 0x6B8F, 0x0, 0x6B91, 0x0, 0x0, 0x6B94, 0x6B95, 0x6B96, 0x6B97, 0x6B8B, 0x6B99, 0x0, 0x6B9B, 0x0, 0x0, 0x6B92, 0x6B9F, 0x6BA0, 0x0, 0x6BA2, 0x6BA3, 0x6B87, 0x6BA5, 0x6BA6, 0x6BA7, 0x0, 0x0, 0x6BAA, 0x6B9A, 0x0, 0x6BAD, 0x6B93, 0x6BA1, 0x6BB0, 0x0, 0x6B7C, 0x6BB3, 0x0, 0x6BB5, 0x6BB6, 0x6BB7, 0x0, 0x0, 0x6740, 0x0, 0x58F3, 0x6BBD, 0x0, 0x6BBF, 0x6BC1, 0x0, 0x0, 0x6BC3, 0x6BC4, 0x6BC5, 0x6BB4, 0x6BC7, 0x6BC8, 0x533B, 0x6BCA, 0x6BCB, 0x6BCC, 0x6BCD, 0x0, 0x6BCF, 0x6BD0, 0x0, 0x6BD2, 0x6BD3, 0x6BD4, 0x0, 0x6BD6, 0x6BD7, 0x6BD8, 0x0, 0x6BDA, 0x6BDB, 0x0, 0x0, 0x6BDE, 0x0, 0x6BE0, 0x0, 0x6BE2, 0x6BE3, 0x6BE4, 0x0, 0x6BE6, 0x7ED2, 0x6BE8, 0x0, 0x0, 0x6BEB, 0x7403, 0x0, 0x0, 0x6BEF, 0x6BF0, 0x0, 0x6BF2, 0x6BF3, 0x0, 0x0, 0x0, 0x6BF7, 0x6BF8, 0x6BF9, 0x0, 0x6BFB, 0x6BFC, 0x6BFD, 0x6BFE, 0x6BF5, 0x6C00, 0x6C01, 0x7266, 0x6C03, 0x6C04, 0x6C05, 0x6C06, 0x0, 0x6BE1, 0x6C09, 0x0, 0x6C0B, 0x6C07, 0x6C0D, 0x0, 0x6C0F, 0x6C10, 0x6C11, 0x0, 0x6C13, 0x6C14, 0x6C15, 0x6C16, 0x0, 0x6C18, 0x6C19, 0x6C1A, 0x6C1B, 0x0, 0x6C1D, 0x0, 0x6C1F, 0x6C20, 0x6C21, 0x0, 0x6C14, 0x6C24, 0x6C25, 0x6C26, 0x6C27, 0x6C28, 0x0, 0x6C2A, 0x6C22, 0x6C29, 0x0, 0x6C2E, 0x6C2F, 0x6C30, 0x0, 0x0, 0x6C32, 0x6C34, 0x0, 0x6C36, 0x0, 0x6C38, 0x0, 0x0, 0x6C3B, 0x0, 0x0, 0x6CDB, 0x6C3F, 0x6C40, 0x6C41, 0x6C42, 0x6C43, 0x0, 0x0, 0x6C46, 0x0, 0x0, 0x0, 0x6C4A, 0x6C4B, 0x6C4C, 0x6C4D, 0x6CDB, 0x6C4F, 0x6C50, 0x0, 0x6C52, 0x0, 0x6C54, 0x6C55, 0x0, 0x6C57, 0x0, 0x6C61, 0x0, 0x6C5B, 0x6C5C, 0x6C5D, 0x6C5E, 0x6C5F, 0x6C60, 0x6C61, 0x0, 0x0, 0x0, 0x6C65, 0x6C66, 0x6C67, 0x6C68, 0x6C69, 0x6C6A, 0x6C6B, 0x0, 0x6C6D, 0x0, 0x6C6F, 0x6C70, 0x6C71, 0x6C72, 0x6C73, 0x6C74, 0x0, 0x6C76, 0x0, 0x6C78, 0x0, 0x51B3, 0x6C7B, 0x0, 0x6C7D, 0x6C7E, 0x0, 0x6C80, 0x6C81, 0x6C82, 0x6C83, 0x6C84, 0x6C85, 0x6C86, 0x6C87, 0x6C88, 0x6C89, 0x6C8A, 0x6C8B, 0x6C8C, 0x51B1, 0x6C8E, 0x6C8F, 0x6C90, 0x0, 0x6CA1, 0x6C93, 0x6C94, 0x6C95, 0x51B2, 0x0, 0x6C98, 0x6C99, 0x6C9A, 0x6C9B, 0x6C9C, 0x6C9D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6CAB, 0x6CAC, 0x6CAD, 0x6CAE, 0x0, 0x6CB0, 0x6CB1, 0x0, 0x6CB3, 0x6CB4, 0x0, 0x6CB6, 0x6CB7, 0x6CB8, 0x6CB9, 0x6CBA, 0x6CBB, 0x6CBC, 0x6CBD, 0x6CBE, 0x6CBF, 0x6CC0, 0x51B5, 0x6CC2, 0x6CC3, 0x6CC4, 0x6CC5, 0x6CC6, 0x6CC7, 0x0, 0x6CC9, 0x6CCA, 0x0, 0x6CCC, 0x6CCD, 0x0, 0x6CCF, 0x6CD0, 0x6CD1, 0x6CD2, 0x6CD3, 0x6CD4, 0x6CD5, 0x6CD6, 0x6CD7, 0x0, 0x6CD9, 0x6CDA, 0x6CDB, 0x6CDC, 0x6CDD, 0x6CDE, 0x0, 0x6CE0, 0x6CE1, 0x6CE2, 0x6CE3, 0x0, 0x6CE5, 0x0, 0x6CE7, 0x6CE8, 0x6CE9, 0x0, 0x6CEB, 0x6CEC, 0x6CED, 0x6CEE, 0x6CEF, 0x6CF0, 0x6CF1, 0x6CF2, 0x6CF3, 0x0, 0x6CF5, 0x0, 0x0, 0x0, 0x6CF9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6D00, 0x6D01, 0x0, 0x6D03, 0x6D04, 0x0, 0x0, 0x6D07, 0x6D08, 0x6D09, 0x6D0A, 0x6D0B, 0x6D0C, 0x6D0D, 0x6D0E, 0x6D0F, 0x6D10, 0x6D11, 0x6D12, 0x0, 0x0, 0x0, 0x6D16, 0x6D17, 0x6D18, 0x6D19, 0x6D1A, 0x6D1B, 0x0, 0x6D1D, 0x6D1E, 0x6D1F, 0x6D20, 0x0, 0x6D22, 0x0, 0x0, 0x6D25, 0x0, 0x6D27, 0x6D28, 0x6CC4, 0x6D2A, 0x6D2B, 0x6D2C, 0x6D2D, 0x6D2E, 0x6D2F, 0x6D30, 0x6D31, 0x6D32, 0x6D33, 0x6D34, 0x6D35, 0x6C79, 0x6D37, 0x6D38, 0x6D39, 0x6D3A, 0x6D3B, 0x6D3C, 0x6D3D, 0x6D3E, 0x6D3F, 0x6D40, 0x6D41, 0x6D42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6D58, 0x6D59, 0x6D5A, 0x0, 0x0, 0x0, 0x6D5E, 0x6D5F, 0x6D60, 0x6D61, 0x6D62, 0x6D63, 0x6D64, 0x6D65, 0x6D66, 0x6D67, 0x6D68, 0x6D69, 0x6D6A, 0x0, 0x6D6C, 0x6D6D, 0x6D6E, 0x6D6F, 0x6D70, 0x0, 0x0, 0x0, 0x6D74, 0x6D75, 0x6D76, 0x6D77, 0x6D78, 0x6D43, 0x6D7A, 0x6D7B, 0x6D7C, 0x6D7D, 0x6D7E, 0x6D7F, 0x6D80, 0x0, 0x6D82, 0x6D83, 0x6D84, 0x6D85, 0x6D86, 0x6CFE, 0x6D88, 0x6D89, 0x6D8A, 0x6D8B, 0x6D8C, 0x6D8D, 0x6D8E, 0x0, 0x6D90, 0x6D91, 0x6D92, 0x6D93, 0x6D94, 0x6D95, 0x0, 0x6D97, 0x6D98, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6DAA, 0x6DAB, 0x6DAC, 0x0, 0x6DAE, 0x6DAF, 0x0, 0x0, 0x6DB2, 0x6DB3, 0x6DB4, 0x6DB5, 0x0, 0x6DB7, 0x6DB8, 0x0, 0x6DBA, 0x6DBB, 0x51C9, 0x6DBD, 0x6DBE, 0x6DBF, 0x6DC0, 0x0, 0x6DC2, 0x0, 0x6DC4, 0x6DC5, 0x6DC6, 0x6DC7, 0x6DC8, 0x6DC9, 0x6DCA, 0x6DCB, 0x6DCC, 0x6DCD, 0x0, 0x6DCF, 0x6DD0, 0x6DD1, 0x51C4, 0x6DD3, 0x6DD4, 0x6DD5, 0x6DD6, 0x6DD7, 0x6DD8, 0x6DD9, 0x6CEA, 0x6DDB, 0x6DDC, 0x6DDD, 0x6DDE, 0x6DDF, 0x6DE0, 0x6DE1, 0x6DE2, 0x6DE3, 0x6DE4, 0x6E0C, 0x6DE6, 0x0, 0x51C0, 0x51CC, 0x6CA6, 0x6DEB, 0x6DEC, 0x6DED, 0x6DEE, 0x6DEF, 0x6DF0, 0x6DF1, 0x6DF2, 0x6DF3, 0x6DF4, 0x6E0A, 0x6D9E, 0x6DF7, 0x0, 0x6DF9, 0x6D45, 0x6DFB, 0x6DFC, 0x6DFD, 0x0, 0x0, 0x6E00, 0x0, 0x0, 0x6E03, 0x0, 0x6E05, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6DA3, 0x6E1A, 0x51CF, 0x6E1C, 0x6E1D, 0x0, 0x6E1F, 0x6E20, 0x6E21, 0x6CA8, 0x6E23, 0x6E24, 0x6E25, 0x6DA1, 0x6E27, 0x6E28, 0x0, 0x0, 0x6E2B, 0x6D4B, 0x6E2D, 0x6E2E, 0x6E2F, 0x6E30, 0x6E31, 0x6E32, 0x6E33, 0x6E34, 0x6E35, 0x6E36, 0x0, 0x6E38, 0x6E39, 0x6E3A, 0x6E3B, 0x6E3C, 0x6E3D, 0x6D51, 0x6E3F, 0x6E40, 0x6E41, 0x0, 0x6E43, 0x6E44, 0x6E45, 0x6E46, 0x6E47, 0x0, 0x6E49, 0x51D1, 0x6E4B, 0x0, 0x6E4D, 0x6E4E, 0x0, 0x0, 0x6E51, 0x6E52, 0x6E53, 0x6E54, 0x6E55, 0x6E56, 0x0, 0x6E58, 0x0, 0x6E5A, 0x6E5B, 0x6E5C, 0x6E5D, 0x6D48, 0x6E5F, 0x6E60, 0x6E61, 0x6E62, 0x610D, 0x6E64, 0x6E65, 0x6E66, 0x6D8C, 0x6E68, 0x6E69, 0x0, 0x6E6B, 0x0, 0x0, 0x6E6E, 0x6C64, 0x0, 0x6E71, 0x6E72, 0x6E73, 0x6E74, 0x0, 0x0, 0x6E77, 0x6E78, 0x6E79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6CA9, 0x6E89, 0x0, 0x0, 0x0, 0x6E8D, 0x6E8E, 0x6E8F, 0x6E90, 0x0, 0x6E92, 0x6E93, 0x6E94, 0x0, 0x51C6, 0x6E97, 0x6E98, 0x6E99, 0x0, 0x6E9B, 0x6E9C, 0x6C9F, 0x6E9E, 0x6E9F, 0x6EA0, 0x6EA1, 0x6EA2, 0x6EA3, 0x6EA4, 0x6EA5, 0x6EA6, 0x6EA7, 0x0, 0x0, 0x6EAA, 0x6E29, 0x0, 0x0, 0x6D49, 0x6EAF, 0x6EB0, 0x6EB1, 0x6EB2, 0x6DA2, 0x6EB4, 0x0, 0x6EB6, 0x6EB7, 0x0, 0x6EB9, 0x6EBA, 0x0, 0x6E7F, 0x6EBD, 0x6EBE, 0x6EBF, 0x6EC0, 0x6EC1, 0x6EC2, 0x6EC3, 0x6CA7, 0x706D, 0x6EC6, 0x6EC7, 0x6EC8, 0x6EC9, 0x6ECA, 0x6ECB, 0x6DA4, 0x6ECD, 0x8365, 0x6ECF, 0x6ED0, 0x6ED1, 0x6ED2, 0x6ED3, 0x6ED4, 0x6ED5, 0x6ED6, 0x0, 0x6ED8, 0x0, 0x0, 0x0, 0x6EDC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6EEB, 0x6CAA, 0x6EED, 0x6EEE, 0x6EDE, 0x0, 0x6EF1, 0x6E17, 0x0, 0x6EF4, 0x6EF5, 0x6EF6, 0x5364, 0x6D52, 0x6EF9, 0x0, 0x6D50, 0x6EFC, 0x6EFD, 0x6EDA, 0x6EE1, 0x6F00, 0x6E14, 0x6F02, 0x6F03, 0x0, 0x6F05, 0x6F06, 0x6F07, 0x6F08, 0x6F09, 0x6E87, 0x0, 0x0, 0x6F0D, 0x6F0E, 0x6F0F, 0x0, 0x0, 0x6F12, 0x6F13, 0x6F14, 0x6F15, 0x0, 0x0, 0x6F18, 0x6F19, 0x6CA4, 0x0, 0x6F1C, 0x0, 0x6F1E, 0x6F1F, 0x6F20, 0x6F21, 0x6C49, 0x6D9F, 0x0, 0x6F25, 0x6F26, 0x6F27, 0x0, 0x6F29, 0x6F2A, 0x6F2B, 0x6E0D, 0x6F2D, 0x6F2E, 0x6F2F, 0x6F30, 0x6F31, 0x6DA8, 0x6F33, 0x0, 0x6E86, 0x6F36, 0x6F37, 0x6E10, 0x6F39, 0x6F3A, 0x6F3B, 0x6F3C, 0x0, 0x6F3E, 0x6D46, 0x6F40, 0x988D, 0x0, 0x6F43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6F4E, 0x6F4F, 0x6F50, 0x6CFC, 0x6F52, 0x6F53, 0x6D01, 0x6F55, 0x0, 0x6F57, 0x6F58, 0x0, 0x6F5A, 0x6F5C, 0x0, 0x6F5D, 0x6F5E, 0x8204, 0x6F60, 0x6F61, 0x6F62, 0x6F63, 0x6DA6, 0x0, 0x6F66, 0x6F67, 0x0, 0x6F69, 0x6F6A, 0x6F6B, 0x6F6C, 0x6F6D, 0x6F6E, 0x6D54, 0x6E83, 0x0, 0x6F72, 0x6F73, 0x0, 0x0, 0x6F76, 0x6ED7, 0x6F78, 0x0, 0x6F7A, 0x6F7B, 0x6F7C, 0x6F7D, 0x6F7E, 0x6DA0, 0x6DA9, 0x0, 0x6F84, 0x0, 0x6F84, 0x6F85, 0x6D47, 0x6D9D, 0x6F88, 0x6F89, 0x0, 0x6F8B, 0x6F8C, 0x6F8D, 0x6F8E, 0x0, 0x6F90, 0x0, 0x6F92, 0x6F93, 0x6F94, 0x6F95, 0x6F96, 0x6DA7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6F9E, 0x0, 0x6E11, 0x6FA1, 0x6FA2, 0x6FA3, 0x6CFD, 0x6FA5, 0x6EEA, 0x6FA7, 0x6FA8, 0x6CF6, 0x6FAA, 0x6FAB, 0x6FAC, 0x6FAD, 0x6D4D, 0x6FAF, 0x6FB0, 0x6DC0, 0x6FB2, 0x6FB3, 0x6FB4, 0x0, 0x6FB6, 0x0, 0x6FB8, 0x6FB9, 0x6FBA, 0x0, 0x6FBC, 0x6FBD, 0x0, 0x6FBF, 0x6FC0, 0x6D4A, 0x6FC2, 0x6D53, 0x6FC4, 0x0, 0x6FC6, 0x6FC7, 0x6FC8, 0x6FC9, 0x6FCA, 0x6FCB, 0x6FCC, 0x6FCD, 0x6FCE, 0x6FCF, 0x0, 0x0, 0x0, 0x0, 0x6CB5, 0x6E7F, 0x0, 0x0, 0x6CDE, 0x0, 0x0, 0x8499, 0x6D55, 0x6FDD, 0x6FDE, 0x6D4E, 0x6FE0, 0x6FE1, 0x6FE2, 0x6FE3, 0x6D9B, 0x0, 0x6FE6, 0x6FE7, 0x6FE8, 0x6FE9, 0x0, 0x6EE5, 0x6D5A, 0x6FED, 0x6FEE, 0x6FEF, 0x6F4D, 0x6EE8, 0x6FF2, 0x0, 0x6FF4, 0x0, 0x0, 0x6FF7, 0x0, 0x0, 0x6E85, 0x6FFB, 0x6CFA, 0x0, 0x6EE4, 0x6FFF, 0x7000, 0x7001, 0x0, 0x0, 0x7004, 0x6EE2, 0x6E0E, 0x7007, 0x0, 0x6CFB, 0x700A, 0x6E16, 0x700C, 0x700D, 0x700E, 0x6D4F, 0x0, 0x7011, 0x0, 0x0, 0x7014, 0x6FD2, 0x7016, 0x7017, 0x6CF8, 0x7019, 0x701A, 0x701B, 0x701C, 0x6CA5, 0x0, 0x6F47, 0x6F46, 0x7021, 0x7022, 0x7023, 0x7024, 0x0, 0x6F74, 0x6CF7, 0x6FD1, 0x7029, 0x702A, 0x702B, 0x0, 0x0, 0x0, 0x702F, 0x5F25, 0x7031, 0x6F4B, 0x7033, 0x7034, 0x7035, 0x0, 0x7037, 0x7038, 0x7039, 0x703A, 0x703B, 0x703C, 0x0, 0x6F9C, 0x703F, 0x7040, 0x7041, 0x7042, 0x6CA3, 0x6EE0, 0x7045, 0x7046, 0x0, 0x7048, 0x7049, 0x704A, 0x0, 0x704C, 0x0, 0x0, 0x0, 0x0, 0x6D12, 0x7052, 0x0, 0x0, 0x6F13, 0x7056, 0x7057, 0x6EE9, 0x0, 0x705A, 0x705B, 0x0, 0x704F, 0x705E, 0x705F, 0x7060, 0x7061, 0x7062, 0x6E7E, 0x6EE6, 0x7065, 0x7066, 0x0, 0x7068, 0x6EDF, 0x706A, 0x706B, 0x0, 0x0, 0x0, 0x0, 0x7070, 0x7071, 0x0, 0x0, 0x7074, 0x0, 0x7076, 0x0, 0x7078, 0x0, 0x707A, 0x0, 0x707C, 0x707E, 0x0, 0x0, 0x0, 0x0, 0x7082, 0x7083, 0x7084, 0x7085, 0x7086, 0x0, 0x0, 0x0, 0x708A, 0x0, 0x0, 0x0, 0x708E, 0x0, 0x0, 0x7091, 0x7092, 0x7093, 0x7094, 0x7095, 0x7096, 0x0, 0x7098, 0x7099, 0x709A, 0x0, 0x0, 0x0, 0x0, 0x709F, 0x0, 0x70A1, 0x0, 0x0, 0x7167, 0x0, 0x0, 0x0, 0x0, 0x70A9, 0x0, 0x70AB, 0x70AC, 0x70AD, 0x70AE, 0x70AF, 0x70B0, 0x70B1, 0x0, 0x70B3, 0x70B4, 0x70B5, 0x0, 0x70B7, 0x70B8, 0x0, 0x4E3A, 0x0, 0x0, 0x0, 0x70BE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70C5, 0x70C6, 0x70C7, 0x70C8, 0x0, 0x70CA, 0x70CB, 0x0, 0x70CD, 0x70CE, 0x4E4C, 0x0, 0x70D1, 0x70D2, 0x70D3, 0x70D4, 0x0, 0x0, 0x70D7, 0x70D8, 0x70D9, 0x70DA, 0x0, 0x70DC, 0x70DD, 0x70DE, 0x0, 0x70E0, 0x70E1, 0x70E2, 0x0, 0x70E4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70EF, 0x70F0, 0x0, 0x0, 0x70F3, 0x70C3, 0x0, 0x70F6, 0x70F7, 0x70F8, 0x70F9, 0x70FA, 0x70FB, 0x70FC, 0x70FD, 0x0, 0x70FF, 0x7100, 0x0, 0x7102, 0x0, 0x7104, 0x0, 0x7106, 0x0, 0x0, 0x7109, 0x710A, 0x710B, 0x710C, 0x710D, 0x710E, 0x0, 0x7110, 0x0, 0x0, 0x7113, 0x0, 0x0, 0x0, 0x7117, 0x0, 0x7119, 0x711A, 0x711B, 0x711C, 0x0, 0x711E, 0x711F, 0x7120, 0x65E0, 0x7122, 0x7123, 0x0, 0x7125, 0x7126, 0x0, 0x7128, 0x0, 0x0, 0x0, 0x0, 0x0, 0x712E, 0x712F, 0x7130, 0x7131, 0x7132, 0x0, 0x0, 0x0, 0x7136, 0x0, 0x0, 0x0, 0x713A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7141, 0x7142, 0x7143, 0x7144, 0x0, 0x7145, 0x8F89, 0x0, 0x70BC, 0x0, 0x714B, 0x714C, 0x714D, 0x714E, 0x0, 0x7150, 0x0, 0x709C, 0x7153, 0x7154, 0x0, 0x6696, 0x0, 0x7158, 0x70DF, 0x715A, 0x0, 0x715C, 0x715D, 0x715E, 0x715F, 0x7160, 0x7161, 0x8315, 0x7163, 0x7164, 0x7115, 0x7166, 0x7167, 0x7168, 0x70E6, 0x716A, 0x0, 0x7080, 0x0, 0x716E, 0x0, 0x7170, 0x0, 0x7172, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7178, 0x0, 0x0, 0x717B, 0x0, 0x717D, 0x0, 0x0, 0x7180, 0x7181, 0x7182, 0x0, 0x7184, 0x7185, 0x7186, 0x7187, 0x0, 0x7189, 0x718A, 0x0, 0x0, 0x0, 0x0, 0x718F, 0x7190, 0x0, 0x8367, 0x0, 0x7194, 0x0, 0x0, 0x709D, 0x0, 0x7199, 0x719A, 0x719B, 0x719C, 0x719D, 0x719E, 0x719F, 0x71A0, 0x71A1, 0x0, 0x0, 0x71A4, 0x71A5, 0x0, 0x71A7, 0x71A8, 0x71A9, 0x71AA, 0x0, 0x71AC, 0x0, 0x0, 0x71AF, 0x71B0, 0x70ED, 0x988E, 0x71B3, 0x0, 0x71B5, 0x0, 0x0, 0x71B8, 0x71B9, 0x0, 0x0, 0x71BC, 0x71BD, 0x70BD, 0x71BF, 0x71C0, 0x70E8, 0x71C2, 0x71C3, 0x7130, 0x71C5, 0x71C6, 0x71C7, 0x706F, 0x7096, 0x71CA, 0x71CB, 0x0, 0x0, 0x71CE, 0x71CF, 0x78F7, 0x0, 0x70E7, 0x0, 0x71D4, 0x71D5, 0x71D6, 0x0, 0x71D8, 0x70EB, 0x71DA, 0x71DB, 0x7116, 0x0, 0x0, 0x8425, 0x71E0, 0x71E1, 0x71E2, 0x0, 0x71E4, 0x71E5, 0x707F, 0x71E7, 0x71E8, 0x0, 0x0, 0x0, 0x6BC1, 0x70DB, 0x71EE, 0x0, 0x71F0, 0x71F1, 0x71F2, 0x0, 0x70E9, 0x0, 0x0, 0x0, 0x71F8, 0x71F9, 0x0, 0x718F, 0x70EC, 0x71FD, 0x7118, 0x8000, 0x0, 0x7201, 0x7202, 0x7203, 0x0, 0x7205, 0x7206, 0x7207, 0x0, 0x0, 0x720A, 0x0, 0x720C, 0x70C1, 0x0, 0x0, 0x7089, 0x0, 0x0, 0x7213, 0x7214, 0x0, 0x0, 0x0, 0x0, 0x7219, 0x721A, 0x70C2, 0x0, 0x721D, 0x721E, 0x721F, 0x0, 0x0, 0x7222, 0x7223, 0x0, 0x0, 0x7226, 0x7227, 0x7228, 0x7229, 0x722A, 0x0, 0x722C, 0x4E89, 0x0, 0x0, 0x7230, 0x0, 0x0, 0x0, 0x0, 0x7235, 0x7236, 0x0, 0x7238, 0x7239, 0x7237, 0x723B, 0x0, 0x723D, 0x5C14, 0x4E2C, 0x0, 0x7241, 0x7242, 0x0, 0x7244, 0x0, 0x5899, 0x7247, 0x7248, 0x7249, 0x724A, 0x7B3A, 0x724C, 0x0, 0x0, 0x724F, 0x0, 0x0, 0x7252, 0x7253, 0x0, 0x0, 0x7256, 0x0, 0x724D, 0x7259, 0x725A, 0x725B, 0x0, 0x725D, 0x725E, 0x725F, 0x7260, 0x7261, 0x7262, 0x7263, 0x0, 0x0, 0x0, 0x7267, 0x0, 0x7269, 0x726A, 0x0, 0x726C, 0x0, 0x726E, 0x726F, 0x7270, 0x0, 0x7272, 0x7273, 0x62B5, 0x0, 0x7276, 0x7277, 0x7278, 0x7279, 0x0, 0x727B, 0x727C, 0x7275, 0x727E, 0x727F, 0x7280, 0x7281, 0x0, 0x0, 0x7284, 0x7285, 0x7286, 0x0, 0x7288, 0x7289, 0x0, 0x728B, 0x728C, 0x728D, 0x728E, 0x0, 0x7290, 0x7291, 0x7292, 0x7293, 0x0, 0x7295, 0x8366, 0x7297, 0x7298, 0x0, 0x729A, 0x7266, 0x0, 0x729D, 0x729E, 0x0, 0x0, 0x72A1, 0x728A, 0x72A3, 0x72A4, 0x72A5, 0x72A6, 0x727A, 0x72A8, 0x72A9, 0x72AA, 0x0, 0x72AC, 0x0, 0x72AE, 0x72AF, 0x72B0, 0x0, 0x0, 0x0, 0x72B4, 0x72B5, 0x0, 0x0, 0x0, 0x0, 0x72BA, 0x0, 0x0, 0x72BD, 0x0, 0x72BF, 0x72B6, 0x72C1, 0x72C2, 0x72C3, 0x72C4, 0x72C5, 0x72C6, 0x0, 0x0, 0x72C9, 0x72CA, 0x72CB, 0x72CC, 0x0, 0x72CE, 0x0, 0x72D0, 0x72D1, 0x72D2, 0x0, 0x72D4, 0x0, 0x72D6, 0x72D7, 0x72D8, 0x72D9, 0x72DA, 0x0, 0x72DC, 0x0, 0x0, 0x72DF, 0x72E0, 0x72E1, 0x0, 0x72E3, 0x72E4, 0x0, 0x72E6, 0x0, 0x72E8, 0x72E9, 0x72EA, 0x72EB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72F3, 0x72F4, 0x0, 0x72F6, 0x72F7, 0x72F8, 0x72ED, 0x72FA, 0x72FB, 0x72FC, 0x72C8, 0x72FE, 0x72FF, 0x7300, 0x7301, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7307, 0x7308, 0x0, 0x730A, 0x730B, 0x730C, 0x0, 0x0, 0x730F, 0x0, 0x7311, 0x7312, 0x7313, 0x0, 0x0, 0x7316, 0x7317, 0x7318, 0x72F0, 0x0, 0x731B, 0x731C, 0x731D, 0x731E, 0x0, 0x0, 0x0, 0x7322, 0x7323, 0x0, 0x7325, 0x7326, 0x7327, 0x0, 0x7329, 0x0, 0x0, 0x0, 0x732D, 0x0, 0x0, 0x7330, 0x7331, 0x7332, 0x7333, 0x7334, 0x7335, 0x72B9, 0x7337, 0x0, 0x0, 0x733A, 0x72F2, 0x733C, 0x0, 0x733E, 0x733F, 0x7340, 0x0, 0x7342, 0x5446, 0x72F1, 0x72EE, 0x0, 0x0, 0x0, 0x7349, 0x734A, 0x0, 0x734C, 0x734D, 0x5956, 0x0, 0x7350, 0x7351, 0x7352, 0x0, 0x0, 0x0, 0x0, 0x7357, 0x7358, 0x7359, 0x735A, 0x735B, 0x0, 0x735D, 0x735E, 0x735F, 0x7360, 0x7361, 0x7362, 0x0, 0x0, 0x7365, 0x7366, 0x7367, 0x72EC, 0x7369, 0x72EF, 0x7303, 0x736C, 0x0, 0x72DD, 0x736F, 0x72DE, 0x0, 0x83B7, 0x7373, 0x0, 0x730E, 0x7376, 0x72B7, 0x517D, 0x0, 0x736D, 0x732E, 0x7315, 0x737D, 0x737E, 0x737F, 0x7321, 0x7381, 0x7382, 0x7383, 0x7384, 0x7385, 0x5179, 0x7387, 0x7388, 0x7389, 0x738A, 0x738B, 0x0, 0x0, 0x738E, 0x0, 0x0, 0x0, 0x7392, 0x7393, 0x7394, 0x7395, 0x7396, 0x7397, 0x0, 0x0, 0x0, 0x0, 0x0, 0x739D, 0x0, 0x739F, 0x73A0, 0x73A1, 0x73A2, 0x0, 0x73A4, 0x73A5, 0x73A6, 0x0, 0x73CF, 0x73A9, 0x0, 0x73AB, 0x73AC, 0x73AD, 0x0, 0x0, 0x0, 0x0, 0x73B2, 0x73B3, 0x73B4, 0x73B5, 0x73B6, 0x73B7, 0x73B8, 0x73B9, 0x0, 0x73BB, 0x73BC, 0x0, 0x73BE, 0x73BF, 0x73C0, 0x0, 0x73C2, 0x73C3, 0x0, 0x73C5, 0x73C6, 0x73C7, 0x73C8, 0x0, 0x73CA, 0x73CB, 0x73CC, 0x73CD, 0x0, 0x0, 0x0, 0x0, 0x73D2, 0x73D3, 0x73D4, 0x0, 0x73D6, 0x73D7, 0x73D8, 0x73D9, 0x73DA, 0x73DB, 0x73DC, 0x73DD, 0x73DE, 0x0, 0x73E0, 0x0, 0x0, 0x73E3, 0x0, 0x73E5, 0x0, 0x73E7, 0x73E8, 0x73E9, 0x73EA, 0x73EB, 0x0, 0x73ED, 0x4F69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73F4, 0x73F5, 0x73F6, 0x0, 0x73F8, 0x0, 0x73FA, 0x0, 0x73FC, 0x73FD, 0x73B0, 0x73FF, 0x7400, 0x7401, 0x0, 0x7403, 0x7404, 0x7405, 0x7406, 0x7407, 0x7408, 0x7409, 0x740A, 0x740B, 0x740C, 0x7483, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7416, 0x0, 0x0, 0x0, 0x741A, 0x741B, 0x0, 0x741D, 0x0, 0x0, 0x7420, 0x7421, 0x7422, 0x7423, 0x7424, 0x7425, 0x7426, 0x0, 0x7428, 0x7429, 0x742A, 0x742B, 0x742C, 0x742D, 0x742E, 0x7BA1, 0x7430, 0x7431, 0x7432, 0x7433, 0x7434, 0x7435, 0x7436, 0x0, 0x0, 0x0, 0x73D0, 0x0, 0x0, 0x0, 0x0, 0x73F2, 0x7440, 0x7441, 0x7442, 0x0, 0x7444, 0x0, 0x7446, 0x0, 0x0, 0x0, 0x744A, 0x73AE, 0x0, 0x744D, 0x744E, 0x744F, 0x7450, 0x7451, 0x739A, 0x0, 0x7454, 0x7455, 0x0, 0x7457, 0x0, 0x7459, 0x745A, 0x745B, 0x745C, 0x0, 0x745E, 0x745F, 0x0, 0x0, 0x7462, 0x7410, 0x7476, 0x0, 0x0, 0x7467, 0x0, 0x83B9, 0x739B, 0x0, 0x0, 0x746D, 0x746E, 0x7405, 0x7470, 0x7471, 0x73B1, 0x7473, 0x0, 0x7475, 0x0, 0x0, 0x0, 0x7479, 0x0, 0x0, 0x747C, 0x747D, 0x747E, 0x747F, 0x7480, 0x7481, 0x0, 0x7483, 0x0, 0x7485, 0x7486, 0x7487, 0x7488, 0x740F, 0x748A, 0x748B, 0x0, 0x0, 0x0, 0x0, 0x7490, 0x0, 0x7492, 0x0, 0x7494, 0x7495, 0x0, 0x7497, 0x7498, 0x0, 0x749A, 0x0, 0x749C, 0x0, 0x749E, 0x749F, 0x74A0, 0x740E, 0x0, 0x7391, 0x0, 0x74A5, 0x7477, 0x74A7, 0x74A8, 0x74A9, 0x74AA, 0x73F0, 0x0, 0x74AD, 0x0, 0x74AF, 0x73AF, 0x74B1, 0x74B2, 0x0, 0x0, 0x7399, 0x74B6, 0x74B7, 0x74B8, 0x0, 0x74BA, 0x74BB, 0x0, 0x73BA, 0x74BE, 0x7487, 0x74C0, 0x74C1, 0x74C2, 0x74C3, 0x0, 0x74C5, 0x0, 0x0, 0x0, 0x0, 0x743C, 0x74CB, 0x0, 0x0, 0x0, 0x73D1, 0x0, 0x0, 0x0, 0x0, 0x748E, 0x74D5, 0x74D6, 0x74D7, 0x74D8, 0x74D9, 0x74D2, 0x74DB, 0x74DC, 0x74DD, 0x74DE, 0x74DF, 0x74E0, 0x74E1, 0x74E2, 0x74E3, 0x74E4, 0x74E5, 0x74E6, 0x0, 0x74E8, 0x0, 0x0, 0x0, 0x74EC, 0x0, 0x74EE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74F4, 0x74F5, 0x74F6, 0x74F7, 0x0, 0x0, 0x0, 0x74FB, 0x0, 0x74FD, 0x74FE, 0x74FF, 0x7500, 0x0, 0x7502, 0x7503, 0x7504, 0x0, 0x0, 0x7507, 0x7508, 0x0, 0x0, 0x750B, 0x74EF, 0x750D, 0x0, 0x750F, 0x7510, 0x7511, 0x7512, 0x7513, 0x7514, 0x74EE, 0x7F42, 0x7517, 0x7518, 0x0, 0x751A, 0x0, 0x751C, 0x751D, 0x0, 0x751F, 0x0, 0x7521, 0x4EA7, 0x0, 0x0, 0x7525, 0x82CF, 0x0, 0x7528, 0x7529, 0x752A, 0x752B, 0x752C, 0x752D, 0x752E, 0x5B81, 0x7530, 0x7531, 0x7532, 0x7533, 0x0, 0x0, 0x0, 0x7537, 0x7538, 0x7539, 0x753A, 0x0, 0x0, 0x753D, 0x753E, 0x753F, 0x7540, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7547, 0x7548, 0x0, 0x0, 0x754B, 0x754C, 0x0, 0x754E, 0x754F, 0x0, 0x0, 0x0, 0x0, 0x7554, 0x0, 0x0, 0x0, 0x0, 0x7559, 0x755A, 0x755B, 0x755C, 0x4EA9, 0x0, 0x755F, 0x0, 0x0, 0x6BD5, 0x7563, 0x7564, 0x7565, 0x7566, 0x0, 0x0, 0x0, 0x756A, 0x753B, 0x756C, 0x0, 0x0, 0x756F, 0x5F02, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5F53, 0x7577, 0x7578, 0x7579, 0x0, 0x0, 0x0, 0x757D, 0x757E, 0x757F, 0x7580, 0x0, 0x0, 0x0, 0x7584, 0x0, 0x7586, 0x7574, 0x0, 0x0, 0x8FED, 0x758B, 0x758C, 0x0, 0x0, 0x758F, 0x7590, 0x7591, 0x0, 0x0, 0x7594, 0x7595, 0x0, 0x0, 0x7598, 0x7599, 0x759A, 0x0, 0x0, 0x759D, 0x0, 0x0, 0x0, 0x0, 0x75A2, 0x75A3, 0x75A4, 0x75A5, 0x0, 0x75A7, 0x0, 0x0, 0x75AA, 0x75AB, 0x0, 0x0, 0x0, 0x0, 0x75B0, 0x0, 0x75B2, 0x75B3, 0x0, 0x75B5, 0x75B6, 0x0, 0x75B8, 0x75B9, 0x75BA, 0x75BB, 0x75BC, 0x75BD, 0x75BE, 0x75BF, 0x75C0, 0x75C1, 0x75C2, 0x0, 0x75C4, 0x75C5, 0x0, 0x75C7, 0x0, 0x0, 0x75CA, 0x75CB, 0x75CC, 0x75CD, 0x75CE, 0x75CF, 0x75D0, 0x75D1, 0x75D2, 0x0, 0x75D4, 0x75D5, 0x0, 0x75D7, 0x75D8, 0x75C9, 0x75DA, 0x75DB, 0x0, 0x75DD, 0x75DE, 0x75DF, 0x9178, 0x75E1, 0x75E2, 0x75E3, 0x75E4, 0x0, 0x75E6, 0x75E7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75ED, 0x0, 0x75EF, 0x75F0, 0x75F1, 0x75F2, 0x75F3, 0x75F4, 0x75F5, 0x75F6, 0x75F7, 0x75F8, 0x75F9, 0x75F9, 0x75FB, 0x75FC, 0x75FD, 0x75FE, 0x75FF, 0x7600, 0x7601, 0x0, 0x7603, 0x0, 0x0, 0x0, 0x0, 0x7608, 0x6108, 0x760A, 0x75AF, 0x760C, 0x75A1, 0x0, 0x760F, 0x7610, 0x7611, 0x0, 0x75EA, 0x7614, 0x7615, 0x7616, 0x0, 0x0, 0x7619, 0x761A, 0x761B, 0x761C, 0x761D, 0x7617, 0x761F, 0x7620, 0x75AE, 0x7622, 0x7623, 0x7624, 0x7625, 0x7626, 0x759F, 0x7628, 0x7629, 0x0, 0x0, 0x0, 0x762D, 0x0, 0x762F, 0x7630, 0x7631, 0x7632, 0x7633, 0x7634, 0x7635, 0x0, 0x0, 0x7638, 0x0, 0x7618, 0x0, 0x763C, 0x763D, 0x0, 0x0, 0x0, 0x0, 0x7597, 0x7643, 0x0, 0x0, 0x75E8, 0x75EB, 0x7648, 0x7605, 0x0, 0x0, 0x764C, 0x0, 0x0, 0x0, 0x7650, 0x0, 0x6108, 0x7653, 0x0, 0x0, 0x7656, 0x7657, 0x75A0, 0x7659, 0x765A, 0x0, 0x765C, 0x0, 0x0, 0x762A, 0x7660, 0x75F4, 0x75D2, 0x0, 0x7596, 0x75C7, 0x0, 0x0, 0x0, 0x765E, 0x766A, 0x0, 0x7663, 0x763F, 0x763E, 0x0, 0x75C8, 0x762B, 0x766B, 0x0, 0x0, 0x7675, 0x0, 0x0, 0x7678, 0x7679, 0x0, 0x767B, 0x53D1, 0x767D, 0x767E, 0x767F, 0x0, 0x7681, 0x7682, 0x0, 0x7684, 0x0, 0x7686, 0x7687, 0x7688, 0x7689, 0x768A, 0x768B, 0x0, 0x0, 0x768E, 0x768F, 0x0, 0x0, 0x7692, 0x7693, 0x0, 0x7695, 0x7696, 0x0, 0x0, 0x7699, 0x7691, 0x769B, 0x769C, 0x769D, 0x769E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76A4, 0x0, 0x76A6, 0x0, 0x0, 0x0, 0x76AA, 0x76AB, 0x0, 0x76AD, 0x76AE, 0x76AF, 0x75B1, 0x0, 0x0, 0x0, 0x76B4, 0x76B5, 0x0, 0x0, 0x76B2, 0x0, 0x76B1, 0x76BB, 0x0, 0x76BD, 0x76BE, 0x76BF, 0x0, 0x0, 0x76C2, 0x676F, 0x76C4, 0x76C5, 0x76C6, 0x0, 0x76C8, 0x76C9, 0x76CA, 0x0, 0x0, 0x76CD, 0x76CE, 0x0, 0x0, 0x0, 0x76D2, 0x76D3, 0x76D4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76DA, 0x76DB, 0x76D7, 0x76DD, 0x76CF, 0x76DF, 0x0, 0x5C3D, 0x0, 0x76D1, 0x76D8, 0x76E5, 0x76E6, 0x5362, 0x0, 0x76E9, 0x8361, 0x0, 0x76EC, 0x76ED, 0x76EE, 0x76EF, 0x76F0, 0x76F1, 0x76F2, 0x76F3, 0x76F4, 0x76F5, 0x0, 0x76F7, 0x76F8, 0x76F9, 0x76FA, 0x76FB, 0x76FC, 0x0, 0x76FE, 0x0, 0x0, 0x7701, 0x0, 0x7703, 0x7704, 0x7705, 0x0, 0x7707, 0x7708, 0x7709, 0x770A, 0x770B, 0x0, 0x0, 0x0, 0x0, 0x7710, 0x7711, 0x7712, 0x7713, 0x0, 0x7715, 0x0, 0x0, 0x0, 0x7719, 0x771A, 0x771B, 0x0, 0x771D, 0x0, 0x771F, 0x7720, 0x0, 0x7722, 0x7723, 0x0, 0x7726, 0x0, 0x7727, 0x7728, 0x7729, 0x0, 0x0, 0x0, 0x772D, 0x0, 0x772F, 0x0, 0x7731, 0x7732, 0x7733, 0x7734, 0x7735, 0x7736, 0x7737, 0x7738, 0x7739, 0x773A, 0x773B, 0x773C, 0x773D, 0x4F17, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7744, 0x7745, 0x7746, 0x7747, 0x0, 0x0, 0x774A, 0x774B, 0x774C, 0x774D, 0x774E, 0x56F0, 0x0, 0x0, 0x7752, 0x0, 0x7754, 0x7755, 0x7756, 0x0, 0x0, 0x7759, 0x775A, 0x775B, 0x7741, 0x0, 0x7750, 0x775F, 0x7760, 0x7761, 0x7762, 0x7763, 0x0, 0x7765, 0x7766, 0x7767, 0x7768, 0x7769, 0x776A, 0x776B, 0x776C, 0x776D, 0x776E, 0x776F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7779, 0x0, 0x0, 0x777C, 0x777D, 0x777E, 0x777F, 0x7780, 0x7781, 0x7782, 0x7783, 0x7784, 0x7785, 0x0, 0x7787, 0x7788, 0x7789, 0x0, 0x778B, 0x778C, 0x778D, 0x778E, 0x778F, 0x0, 0x7791, 0x0, 0x0, 0x0, 0x7795, 0x0, 0x7797, 0x0, 0x7799, 0x779A, 0x779B, 0x779C, 0x779D, 0x7792, 0x779F, 0x77A0, 0x77A1, 0x77A2, 0x77A3, 0x0, 0x77A5, 0x0, 0x77A7, 0x77A8, 0x0, 0x77AA, 0x77AB, 0x77AC, 0x77AD, 0x0, 0x0, 0x77B0, 0x77B1, 0x77B2, 0x77B3, 0x77B4, 0x77B5, 0x77B6, 0x77B7, 0x0, 0x0, 0x77BA, 0x77BB, 0x7751, 0x77BD, 0x0, 0x77BF, 0x0, 0x0, 0x77C2, 0x0, 0x77C4, 0x0, 0x0, 0x8499, 0x0, 0x77C9, 0x77CA, 0x0, 0x77CC, 0x77CD, 0x77CE, 0x77CF, 0x77D0, 0x0, 0x0, 0x772C, 0x77D4, 0x77D5, 0x0, 0x77D7, 0x77D8, 0x77D9, 0x77A9, 0x77DB, 0x77DC, 0x0, 0x77DE, 0x0, 0x77E0, 0x0, 0x77E2, 0x77E3, 0x0, 0x77E5, 0x0, 0x77E7, 0x77E8, 0x77E9, 0x0, 0x0, 0x77EC, 0x77ED, 0x77EE, 0x77EB, 0x77F0, 0x77F1, 0x77F2, 0x77F3, 0x0, 0x0, 0x0, 0x77F7, 0x77F8, 0x77F9, 0x77FA, 0x77FB, 0x77FC, 0x7845, 0x0, 0x0, 0x0, 0x0, 0x7802, 0x7803, 0x0, 0x7805, 0x7806, 0x0, 0x0, 0x7809, 0x0, 0x0, 0x780C, 0x780D, 0x780E, 0x780F, 0x7810, 0x7811, 0x7812, 0x7813, 0x7814, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x781D, 0x0, 0x781F, 0x7820, 0x7821, 0x7822, 0x7823, 0x0, 0x7825, 0x7826, 0x7827, 0x7828, 0x7829, 0x782A, 0x782B, 0x782C, 0x782D, 0x782E, 0x782F, 0x7830, 0x7831, 0x70AE, 0x7833, 0x7834, 0x7835, 0x0, 0x7837, 0x7838, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6731, 0x0, 0x7845, 0x0, 0x0, 0x7848, 0x7849, 0x784A, 0x0, 0x784C, 0x784D, 0x784E, 0x0, 0x7850, 0x0, 0x7852, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7841, 0x785D, 0x785E, 0x0, 0x7860, 0x0, 0x7862, 0x0, 0x7856, 0x7865, 0x0, 0x0, 0x7817, 0x7869, 0x786A, 0x786B, 0x786C, 0x786D, 0x786E, 0x781A, 0x7870, 0x7871, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7879, 0x0, 0x787B, 0x787C, 0x0, 0x787E, 0x787F, 0x7880, 0x0, 0x0, 0x7883, 0x7884, 0x7885, 0x7886, 0x7887, 0x0, 0x7889, 0x0, 0x0, 0x788C, 0x0, 0x788E, 0x788F, 0x0, 0x7891, 0x0, 0x7893, 0x7894, 0x7895, 0x7896, 0x7897, 0x7898, 0x7899, 0x789A, 0x0, 0x0, 0x0, 0x789E, 0x789F, 0x78A0, 0x78A1, 0x78A2, 0x78A3, 0x78A4, 0x78A5, 0x0, 0x78A7, 0x78A8, 0x7855, 0x78AA, 0x78AB, 0x78AC, 0x7800, 0x0, 0x0, 0x78B0, 0x0, 0x78B2, 0x78B3, 0x78B4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x786E, 0x78BB, 0x7801, 0x0, 0x78BE, 0x0, 0x0, 0x78C1, 0x0, 0x78C3, 0x78C4, 0x78C5, 0x0, 0x0, 0x78C8, 0x78C9, 0x78CA, 0x78CB, 0x78CC, 0x78CD, 0x78CE, 0x78CF, 0x76D8, 0x7859, 0x0, 0x0, 0x78D4, 0x78D5, 0x0, 0x0, 0x0, 0x0, 0x7816, 0x78DB, 0x0, 0x78DD, 0x78DE, 0x78DF, 0x78E0, 0x78E1, 0x78E2, 0x789C, 0x0, 0x78E5, 0x0, 0x789B, 0x78E8, 0x78E9, 0x78EA, 0x0, 0x78EC, 0x78ED, 0x0, 0x77F6, 0x0, 0x0, 0x78F2, 0x78F3, 0x78F4, 0x0, 0x0, 0x78F7, 0x0, 0x78F9, 0x78FA, 0x78FB, 0x78FC, 0x7857, 0x78FE, 0x78FF, 0x0, 0x7901, 0x7902, 0x0, 0x785A, 0x7905, 0x0, 0x0, 0x0, 0x7909, 0x0, 0x0, 0x790C, 0x0, 0x7840, 0x0, 0x7910, 0x7911, 0x7912, 0x7913, 0x7914, 0x0, 0x0, 0x7917, 0x0, 0x788D, 0x0, 0x791B, 0x791C, 0x791D, 0x791E, 0x0, 0x0, 0x7921, 0x0, 0x7923, 0x7924, 0x7925, 0x77FF, 0x7927, 0x7928, 0x7929, 0x783A, 0x783E, 0x77FE, 0x792D, 0x0, 0x792F, 0x0, 0x783B, 0x0, 0x0, 0x0, 0x7935, 0x0, 0x0, 0x7938, 0x7939, 0x793A, 0x0, 0x0, 0x793D, 0x793E, 0x793F, 0x7940, 0x7941, 0x7942, 0x0, 0x7944, 0x7945, 0x7946, 0x7947, 0x7948, 0x7949, 0x794A, 0x794B, 0x794C, 0x0, 0x0, 0x794F, 0x4F51, 0x7951, 0x7952, 0x7953, 0x7954, 0x79D8, 0x7956, 0x7957, 0x0, 0x0, 0x795A, 0x795B, 0x795C, 0x795D, 0x795E, 0x795F, 0x7960, 0x7961, 0x0, 0x7963, 0x7964, 0x7965, 0x0, 0x7967, 0x7968, 0x7969, 0x796A, 0x796B, 0x0, 0x796D, 0x0, 0x0, 0x7970, 0x0, 0x7972, 0x7973, 0x7974, 0x0, 0x0, 0x0, 0x0, 0x7979, 0x797A, 0x0, 0x797C, 0x797D, 0x0, 0x7984, 0x0, 0x7981, 0x7982, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7988, 0x0, 0x798A, 0x798B, 0x0, 0x7978, 0x796F, 0x798F, 0x7990, 0x0, 0x7992, 0x7993, 0x7994, 0x794E, 0x7996, 0x7997, 0x7998, 0x0, 0x799A, 0x799B, 0x799C, 0x0, 0x0, 0x0, 0x79A0, 0x79A1, 0x79A2, 0x0, 0x79A4, 0x0, 0x5FA1, 0x79A7, 0x79A8, 0x0, 0x7985, 0x79AB, 0x79AC, 0x79AD, 0x793C, 0x0, 0x7962, 0x7977, 0x79B2, 0x79B3, 0x79B4, 0x0, 0x79B6, 0x79B7, 0x79B8, 0x79B9, 0x79BA, 0x79BB, 0x0, 0x79BD, 0x79BE, 0x79C3, 0x79C0, 0x79C1, 0x0, 0x0, 0x0, 0x79C5, 0x0, 0x0, 0x7C7C, 0x79C9, 0x0, 0x79CB, 0x0, 0x79CD, 0x79CE, 0x79CF, 0x0, 0x79D1, 0x79D2, 0x0, 0x0, 0x79D5, 0x79D6, 0x0, 0x79D8, 0x0, 0x0, 0x0, 0x79DC, 0x79DD, 0x79DE, 0x79DF, 0x79E0, 0x0, 0x0, 0x79E3, 0x79E4, 0x0, 0x79E6, 0x79E7, 0x0, 0x79E9, 0x79EA, 0x79EB, 0x79EC, 0x79ED, 0x79EE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x79F6, 0x79F7, 0x79F8, 0x0, 0x79FA, 0x79FB, 0x0, 0x0, 0x0, 0x0, 0x7A00, 0x0, 0x7A02, 0x7A03, 0x7A04, 0x7A0E, 0x0, 0x0, 0x79C6, 0x0, 0x7A0A, 0x7A0B, 0x7A0C, 0x7A0D, 0x0, 0x0, 0x7A10, 0x7A11, 0x7A12, 0x7A13, 0x7A14, 0x7A15, 0x0, 0x7A17, 0x7A18, 0x7A19, 0x7A1A, 0x7A1B, 0x68F1, 0x0, 0x7A1E, 0x7980, 0x7A20, 0x0, 0x7A22, 0x0, 0x0, 0x0, 0x7A26, 0x0, 0x7A28, 0x0, 0x0, 0x7A2B, 0x0, 0x0, 0x79CD, 0x7A2F, 0x7A30, 0x79F0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7A37, 0x0, 0x7A39, 0x0, 0x7A3B, 0x7A3C, 0x7A3D, 0x0, 0x7A3F, 0x8C37, 0x0, 0x0, 0x0, 0x7A44, 0x0, 0x7A46, 0x7A47, 0x7A48, 0x0, 0x7A4A, 0x7A4B, 0x7A23, 0x79EF, 0x9896, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7A54, 0x0, 0x7A56, 0x7A57, 0x7A58, 0x0, 0x7A5A, 0x7A5B, 0x7A5C, 0x0, 0x0, 0x7A5F, 0x79FE, 0x7A51, 0x79FD, 0x0, 0x0, 0x0, 0x0, 0x7A67, 0x9893, 0x7A33, 0x0, 0x83B7, 0x7A6C, 0x7A06, 0x7A6E, 0x0, 0x7A70, 0x7A71, 0x0, 0x0, 0x7A74, 0x7A75, 0x7A76, 0x0, 0x7A78, 0x7A79, 0x7A7A, 0x7A7B, 0x0, 0x0, 0x7A7E, 0x7A7F, 0x7A80, 0x7A81, 0x0, 0x0, 0x7A84, 0x7A85, 0x7A86, 0x7A87, 0x7A88, 0x7A89, 0x7A8A, 0x7A8B, 0x7A8C, 0x0, 0x0, 0x7A8F, 0x7A90, 0x0, 0x7A92, 0x0, 0x7A94, 0x7A95, 0x7A96, 0x7A97, 0x7A98, 0x7A99, 0x0, 0x0, 0x0, 0x0, 0x7A9E, 0x7A9F, 0x7AA0, 0x0, 0x7AA2, 0x7AA3, 0x0, 0x0, 0x0, 0x0, 0x7AA8, 0x7A9D, 0x6D3C, 0x7AAB, 0x7AAC, 0x0, 0x7A77, 0x7A91, 0x0, 0x7AB1, 0x7AB2, 0x7AB3, 0x7AB4, 0x7AB5, 0x7AAD, 0x7AB7, 0x7AB8, 0x0, 0x7AA5, 0x0, 0x0, 0x0, 0x7ABE, 0x7ABF, 0x7AC0, 0x7AC1, 0x0, 0x0, 0x7A9C, 0x7A8D, 0x0, 0x7AA6, 0x0, 0x0, 0x7A83, 0x7ACB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7AD1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7AD8, 0x7AD9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7ADF, 0x7AE0, 0x0, 0x0, 0x7AE3, 0x7AE4, 0x7AE5, 0x7AE6, 0x0, 0x0, 0x0, 0x0, 0x7AEB, 0x0, 0x7AED, 0x7AEE, 0x7AEF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7ADE, 0x7AF7, 0x0, 0x7AF9, 0x7AFA, 0x7AFB, 0x0, 0x7AFD, 0x0, 0x7AFF, 0x7B00, 0x7B01, 0x0, 0x0, 0x7B04, 0x7B05, 0x7B06, 0x0, 0x7B08, 0x7B09, 0x7B0A, 0x0, 0x0, 0x0, 0x7B0E, 0x7B0F, 0x7B10, 0x7B11, 0x7B12, 0x7B13, 0x0, 0x0, 0x0, 0x0, 0x7B18, 0x7B19, 0x7B1A, 0x7B1B, 0x0, 0x7B1D, 0x7B1E, 0x0, 0x7B20, 0x0, 0x7B22, 0x7B23, 0x7B24, 0x7B25, 0x7B26, 0x0, 0x7B28, 0x0, 0x7B2A, 0x7B2B, 0x7B2C, 0x7B2D, 0x7B2E, 0x7B2F, 0x7B30, 0x7B31, 0x7B32, 0x7B33, 0x7B34, 0x7B35, 0x0, 0x0, 0x7B38, 0x0, 0x0, 0x7B3B, 0x0, 0x0, 0x0, 0x0, 0x7B40, 0x0, 0x0, 0x0, 0x7B44, 0x7B45, 0x7B14, 0x7B47, 0x7B48, 0x7B49, 0x7B4A, 0x7B4B, 0x7B4C, 0x7B0B, 0x7B4E, 0x7B4F, 0x7B50, 0x7B51, 0x7B52, 0x0, 0x7B54, 0x0, 0x7B56, 0x0, 0x7B58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B60, 0x7B61, 0x0, 0x7B63, 0x7B64, 0x7B65, 0x7B66, 0x7B15, 0x0, 0x7B69, 0x0, 0x0, 0x0, 0x7B6D, 0x7B6E, 0x0, 0x7B70, 0x7B71, 0x7B72, 0x7B73, 0x7B74, 0x7B75, 0x7B76, 0x7B77, 0x7B78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B82, 0x0, 0x7B84, 0x7B85, 0x0, 0x4E2A, 0x7B88, 0x0, 0x7B8A, 0x7B3A, 0x7B8C, 0x7B8D, 0x7B8E, 0x7B5D, 0x7B90, 0x7B91, 0x0, 0x0, 0x7B94, 0x7B95, 0x7B96, 0x7B97, 0x7B98, 0x7B99, 0x0, 0x7B9B, 0x7B9C, 0x7B9D, 0x0, 0x0, 0x68F0, 0x7BA1, 0x0, 0x0, 0x7BA4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7BAC, 0x7BAD, 0x0, 0x7BAF, 0x0, 0x7BB1, 0x0, 0x0, 0x7BB4, 0x7BB5, 0x0, 0x7BB7, 0x7BB8, 0x7BB9, 0x0, 0x0, 0x0, 0x0, 0x7BBE, 0x0, 0x8282, 0x7BC1, 0x0, 0x0, 0x8303, 0x0, 0x7BC6, 0x7BC7, 0x0, 0x7B51, 0x7BCA, 0x7BA7, 0x7BCC, 0x0, 0x7BCE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7BD4, 0x7BD5, 0x0, 0x0, 0x7BD8, 0x7BD9, 0x7BDA, 0x7BAC, 0x7BDC, 0x7BDD, 0x7BDE, 0x7BDF, 0x7B71, 0x7BE1, 0x7BE2, 0x7BE3, 0x7B03, 0x7BE5, 0x7BE6, 0x7BE7, 0x7BE8, 0x7B5B, 0x7BEA, 0x7BEB, 0x0, 0x0, 0x0, 0x0, 0x7BF0, 0x7BF1, 0x7BF2, 0x7B5A, 0x7BF4, 0x0, 0x0, 0x7BF7, 0x7BF8, 0x7BF9, 0x0, 0x7BFB, 0x0, 0x7BFD, 0x7BFE, 0x7BFF, 0x7BA6, 0x7C01, 0x7C02, 0x7C03, 0x0, 0x7C05, 0x7C06, 0x7C07, 0x0, 0x7C09, 0x7C0A, 0x7C0B, 0x7C0C, 0x7BD3, 0x7C0E, 0x7C0F, 0x7C10, 0x84D1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7C19, 0x0, 0x0, 0x7C1C, 0x7C1D, 0x7BAA, 0x7C1F, 0x7C20, 0x7B80, 0x7C22, 0x7BD1, 0x0, 0x7C25, 0x7C26, 0x7C27, 0x7C28, 0x7C29, 0x7C2A, 0x7BAB, 0x7C2C, 0x7C2D, 0x0, 0x0, 0x7C30, 0x0, 0x0, 0x7C33, 0x0, 0x0, 0x0, 0x6A90, 0x7C38, 0x7B5C, 0x0, 0x7C3B, 0x7C3C, 0x7B7E, 0x5E18, 0x7C3F, 0x7C40, 0x0, 0x0, 0x7BEE, 0x0, 0x7C45, 0x0, 0x7C47, 0x7C48, 0x7C49, 0x7C4A, 0x0, 0x7B79, 0x7C4D, 0x0, 0x0, 0x85E4, 0x0, 0x0, 0x7C53, 0x7C54, 0x0, 0x0, 0x7C57, 0x0, 0x7B93, 0x7C5A, 0x7C5B, 0x7BA8, 0x0, 0x0, 0x7C41, 0x7B3C, 0x0, 0x0, 0x7C63, 0x7B7E, 0x94A5, 0x7C66, 0x7C67, 0x0, 0x7B3E, 0x7C16, 0x7C6B, 0x7BF1, 0x0, 0x7BA9, 0x7C6F, 0x0, 0x0, 0x5401, 0x7C73, 0x0, 0x7C75, 0x0, 0x0, 0x7C78, 0x7C79, 0x7C7A, 0x0, 0x0, 0x7C7D, 0x0, 0x7C7F, 0x7C80, 0x7C81, 0x0, 0x0, 0x7C84, 0x7C85, 0x0, 0x0, 0x7C88, 0x7C89, 0x7C8A, 0x0, 0x7C8C, 0x7C8D, 0x0, 0x0, 0x0, 0x7C91, 0x7C92, 0x0, 0x7C94, 0x7C95, 0x7C96, 0x7C97, 0x7C98, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7C9E, 0x7C9F, 0x0, 0x7CA1, 0x7CA2, 0x7CA3, 0x0, 0x7CA5, 0x0, 0x0, 0x7CA8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7CAF, 0x0, 0x7CB1, 0x7CB2, 0x7CB3, 0x7CB4, 0x7CA4, 0x0, 0x0, 0x0, 0x7CB9, 0x7CBA, 0x7CBB, 0x7CBC, 0x7CBD, 0x7CBE, 0x7CBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7CC5, 0x0, 0x0, 0x7CC8, 0x0, 0x7CCA, 0x7CCB, 0x7CCC, 0x0, 0x0, 0x0, 0x7CD0, 0x7CD1, 0x7CD2, 0x0, 0x7CD4, 0x7CD5, 0x7CD6, 0x7CD7, 0x0, 0x7CD9, 0x0, 0x0, 0x7CDC, 0x7CC1, 0x7CAA, 0x7CDF, 0x7CE0, 0x0, 0x6A21, 0x0, 0x0, 0x0, 0x0, 0x7CAE, 0x7CE8, 0x0, 0x7CEA, 0x0, 0x7CEC, 0x0, 0x7CEE, 0x7CEF, 0x56E2, 0x7CF1, 0x7C9D, 0x0, 0x7C74, 0x0, 0x7C9C, 0x7CF7, 0x7E9F, 0x0, 0x0, 0x7CFB, 0x0, 0x7CFD, 0x7EA0, 0x0, 0x7EAA, 0x7D01, 0x7EA3, 0x7D03, 0x7EA6, 0x7EA2, 0x7EA1, 0x7EA5, 0x7EA8, 0x7EAB, 0x7D0A, 0x7EB9, 0x7D0C, 0x7EB3, 0x7D0E, 0x7D0F, 0x7EBD, 0x7D11, 0x7D12, 0x7EBE, 0x7EAF, 0x7EB0, 0x7EBC, 0x7EB1, 0x7EAE, 0x7EB8, 0x7EA7, 0x7EB7, 0x7EAD, 0x7EB4, 0x7D1E, 0x7D1F, 0x7D20, 0x7EBA, 0x7D22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7D28, 0x7D29, 0x0, 0x7D2B, 0x7D2C, 0x0, 0x624E, 0x7D2F, 0x7EC6, 0x7EC2, 0x7EC1, 0x7EC5, 0x0, 0x7EBB, 0x7D36, 0x0, 0x7D38, 0x7ECD, 0x7EC0, 0x7D3B, 0x7ECB, 0x7D3D, 0x7D3E, 0x7ED0, 0x7ECC, 0x7D41, 0x7EC8, 0x5F26, 0x7EC4, 0x7D45, 0x7ECA, 0x7D47, 0x0, 0x0, 0x7D4A, 0x0, 0x0, 0x0, 0x7ED7, 0x7EC1, 0x7ED3, 0x7D51, 0x7D52, 0x7D53, 0x7D54, 0x7EDD, 0x7D56, 0x0, 0x7D58, 0x0, 0x0, 0x7EE6, 0x7D5C, 0x0, 0x7EDE, 0x7D5F, 0x0, 0x7EDC, 0x7EDA, 0x7D63, 0x0, 0x0, 0x7ED9, 0x7D67, 0x7ED2, 0x7D69, 0x7D6A, 0x7D6B, 0x0, 0x7D6D, 0x7D6E, 0x7D6F, 0x7ED6, 0x7EDF, 0x4E1D, 0x7EDB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7EE2, 0x7D7A, 0x7D7B, 0x7D7C, 0x7D7D, 0x0, 0x7D7F, 0x7D80, 0x7ED1, 0x0, 0x7EE1, 0x7D84, 0x7D85, 0x7EE0, 0x0, 0x7EE8, 0x0, 0x0, 0x0, 0x7EE4, 0x7D8D, 0x7D8E, 0x7EE5, 0x0, 0x6346, 0x7D92, 0x7ECF, 0x7D94, 0x0, 0x7D96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7EFC, 0x7D9D, 0x7F0D, 0x7D9F, 0x7EFF, 0x7DA1, 0x7EF8, 0x7EFB, 0x0, 0x0, 0x7DA6, 0x7DA7, 0x0, 0x7DA9, 0x7DAA, 0x0, 0x7EF6, 0x7EF4, 0x7DAE, 0x7EF9, 0x7EFE, 0x7EB2, 0x7F51, 0x0, 0x7F00, 0x5F69, 0x0, 0x7DB7, 0x7EB6, 0x7EFA, 0x7EEE, 0x7EFD, 0x7DBC, 0x7EF0, 0x7EEB, 0x7EF5, 0x7DC0, 0x7DC1, 0x7DC2, 0x0, 0x7EF2, 0x7DC5, 0x7DC6, 0x7F01, 0x0, 0x7DC9, 0x7D27, 0x7EEF, 0x7DCC, 0x0, 0x7DCE, 0x0, 0x0, 0x0, 0x7EEA, 0x0, 0x0, 0x0, 0x0, 0x7F03, 0x7F04, 0x7F02, 0x7EBF, 0x7DDB, 0x0, 0x7F09, 0x7F0E, 0x7DDF, 0x7F14, 0x7F17, 0x0, 0x7F18, 0x0, 0x0, 0x7F0C, 0x7DE7, 0x7F16, 0x7F13, 0x7DEA, 0x0, 0x7F05, 0x0, 0x7DEE, 0x7EAC, 0x7DF0, 0x7F11, 0x7F08, 0x7DF3, 0x7EC3, 0x0, 0x7F0F, 0x7DF7, 0x0, 0x7F07, 0x7DFA, 0x81F4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E03, 0x0, 0x0, 0x0, 0x0, 0x8426, 0x7F19, 0x7F22, 0x7F12, 0x7E0C, 0x7E0D, 0x7E0E, 0x7E0F, 0x7EC9, 0x7F23, 0x7E12, 0x7E13, 0x7E14, 0x7F0A, 0x7E16, 0x7F1E, 0x0, 0x0, 0x7EE6, 0x7F1A, 0x7E1C, 0x7F1C, 0x7F1F, 0x7F1B, 0x7E20, 0x7E21, 0x7E22, 0x53BF, 0x7E24, 0x7E25, 0x0, 0x0, 0x0, 0x7E29, 0x7E2A, 0x7F1D, 0x0, 0x7F21, 0x7F29, 0x6F14, 0x7E30, 0x7EB5, 0x7F27, 0x7E33, 0x7EA4, 0x7F26, 0x7D77, 0x7F15, 0x7E38, 0x7F25, 0x7E3A, 0x7E3B, 0x7E3C, 0x603B, 0x7EE9, 0x7E3F, 0x7E40, 0x7E41, 0x7E42, 0x7EF7, 0x7E44, 0x7F2B, 0x7F2A, 0x7E47, 0x8941, 0x7E49, 0x0, 0x0, 0x7E4C, 0x0, 0x0, 0x0, 0x7E50, 0x7E51, 0x7F2F, 0x7E53, 0x7EC7, 0x7F2E, 0x4F1E, 0x7E57, 0x7E58, 0x7FFB, 0x7F2D, 0x0, 0x7E5C, 0x0, 0x7ED5, 0x7E5F, 0x7E60, 0x7EE3, 0x7F0B, 0x7E63, 0x0, 0x0, 0x0, 0x0, 0x7E68, 0x7EF3, 0x7ED8, 0x7CFB, 0x0, 0x8327, 0x0, 0x7F33, 0x7F32, 0x0, 0x7E72, 0x7F34, 0x7E74, 0x7E75, 0x7E76, 0x7E77, 0x7E78, 0x7ECE, 0x7E7A, 0x7E7B, 0x7EE7, 0x7F24, 0x7F31, 0x0, 0x7E80, 0x7E81, 0x7E82, 0x0, 0x0, 0x0, 0x7E86, 0x98A3, 0x7F2C, 0x0, 0x7EA9, 0x7E8B, 0x7EED, 0x7D2F, 0x0, 0x7F20, 0x0, 0x7E91, 0x0, 0x7F28, 0x7E94, 0x7E95, 0x7EA4, 0x7E97, 0x7F35, 0x7E99, 0x7E9A, 0x7E9B, 0x7F06, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F36, 0x0, 0x7F38, 0x7F39, 0x7F3A, 0x0, 0x0, 0x94B5, 0x7F3E, 0x7F3F, 0x0, 0x0, 0x0, 0x7F43, 0x7F44, 0x7F45, 0x0, 0x0, 0x575B, 0x0, 0x7F4A, 0x74EE, 0x7F42, 0x7F4D, 0x0, 0x5786, 0x7F50, 0x7F51, 0x0, 0x0, 0x7F54, 0x7F55, 0x0, 0x0, 0x7F58, 0x0, 0x0, 0x7F5B, 0x7F5C, 0x7F5D, 0x7F5E, 0x7F5F, 0x7F60, 0x7F61, 0x0, 0x7F63, 0x0, 0x7F65, 0x7F66, 0x7F67, 0x7F68, 0x7F69, 0x7F6A, 0x7F6B, 0x7F6C, 0x7F6D, 0x7F6E, 0x0, 0x7F5A, 0x0, 0x7F72, 0x7F73, 0x0, 0x9A82, 0x7F76, 0x7F62, 0x0, 0x7F79, 0x7F7A, 0x7F7B, 0x7F7C, 0x7F7D, 0x7F7E, 0x7F7F, 0x0, 0x0, 0x0, 0x7F83, 0x0, 0x7F57, 0x7F74, 0x7F87, 0x7F81, 0x7F89, 0x7F8A, 0x8288, 0x7F8C, 0x7F8D, 0x7F8E, 0x0, 0x0, 0x7F91, 0x7F92, 0x0, 0x7F94, 0x7F95, 0x7F96, 0x0, 0x0, 0x0, 0x7F9A, 0x7F9B, 0x7F9C, 0x7F9D, 0x7F9E, 0x0, 0x7FA0, 0x7FA1, 0x7ED2, 0x0, 0x7FA4, 0x7F9F, 0x7FA6, 0x7FA7, 0x7FA1, 0x4E49, 0x0, 0x0, 0x7FAC, 0x7FAD, 0x0, 0x7FAF, 0x7FB0, 0x7FB1, 0x7FB2, 0x7FB3, 0x0, 0x7FB5, 0x81BB, 0x7FB7, 0x7FB8, 0x7FB9, 0x7FBA, 0x7FBB, 0x7FBC, 0x7FBD, 0x7FBE, 0x7FBF, 0x7FC0, 0x7FC1, 0x7FC2, 0x7FC3, 0x0, 0x7FC5, 0x0, 0x7FC7, 0x0, 0x7FC9, 0x7FCA, 0x7FCB, 0x7FCC, 0x7FCD, 0x7FCE, 0x7FCF, 0x7FD0, 0x7FD1, 0x4E60, 0x0, 0x7FD4, 0x7FD5, 0x0, 0x7FD7, 0x0, 0x0, 0x0, 0x7FDB, 0x7FDC, 0x0, 0x7FDE, 0x7FDF, 0x7FE0, 0x7FE1, 0x7FE2, 0x7FE3, 0x0, 0x7FE5, 0x7FE6, 0x0, 0x7FE8, 0x7FE9, 0x7FEA, 0x7FEB, 0x7FDA, 0x7FED, 0x7FEE, 0x7FEF, 0x7FF0, 0x7FF1, 0x7FF2, 0x7FF3, 0x7FF4, 0x7FF5, 0x0, 0x7FF7, 0x7FF8, 0x7FD8, 0x0, 0x7FFB, 0x7FFC, 0x7FD9, 0x7FFE, 0x7FFF, 0x8000, 0x8001, 0x0, 0x8003, 0x8004, 0x8005, 0x8006, 0x8007, 0x0, 0x0, 0x0, 0x800B, 0x800C, 0x800D, 0x800E, 0x800F, 0x8010, 0x7AEF, 0x8012, 0x0, 0x8014, 0x8015, 0x8016, 0x8017, 0x8018, 0x8019, 0x0, 0x801B, 0x801C, 0x0, 0x801E, 0x801F, 0x0, 0x9504, 0x0, 0x0, 0x8024, 0x0, 0x8026, 0x0, 0x8028, 0x8029, 0x802A, 0x0, 0x8027, 0x0, 0x0, 0x0, 0x8030, 0x0, 0x0, 0x8033, 0x8034, 0x8035, 0x8036, 0x8037, 0x0, 0x8039, 0x0, 0x0, 0x0, 0x803D, 0x803E, 0x803F, 0x0, 0x0, 0x0, 0x8043, 0x0, 0x0, 0x8046, 0x8047, 0x8048, 0x0, 0x804A, 0x0, 0x0, 0x0, 0x0, 0x804F, 0x8050, 0x8051, 0x8052, 0x0, 0x0, 0x0, 0x5723, 0x0, 0x8058, 0x0, 0x805A, 0x0, 0x805C, 0x805D, 0x95FB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8064, 0x0, 0x0, 0x8067, 0x0, 0x0, 0x0, 0x0, 0x806C, 0x0, 0x0, 0x8054, 0x806A, 0x8071, 0x58F0, 0x8038, 0x0, 0x8069, 0x8042, 0x804C, 0x8078, 0x804D, 0x0, 0x0, 0x0, 0x542C, 0x804B, 0x807F, 0x0, 0x0, 0x8082, 0x0, 0x8084, 0x8083, 0x8086, 0x8087, 0x0, 0x8089, 0x808A, 0x808B, 0x808C, 0x0, 0x0, 0x808F, 0x8090, 0x0, 0x8092, 0x8093, 0x0, 0x8095, 0x8096, 0x0, 0x8098, 0x8099, 0x809A, 0x809B, 0x809C, 0x809D, 0x0, 0x0, 0x0, 0x80A1, 0x80A2, 0x80A3, 0x0, 0x80A5, 0x0, 0x0, 0x0, 0x80A9, 0x80AA, 0x80AB, 0x0, 0x80AD, 0x80AE, 0x80AF, 0x0, 0x80B1, 0x80B2, 0x0, 0x80B4, 0x80B5, 0x0, 0x0, 0x80B8, 0x0, 0x80BA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80C2, 0x80C3, 0x80C4, 0x80C5, 0x0, 0x80C7, 0x80C8, 0x80C9, 0x80CA, 0x0, 0x80CC, 0x80CD, 0x80CE, 0x80CF, 0x80D0, 0x80D1, 0x0, 0x0, 0x80D4, 0x80D5, 0x80D6, 0x80D7, 0x80D8, 0x80D9, 0x80DA, 0x80DB, 0x80DC, 0x80DD, 0x80DE, 0x0, 0x80E0, 0x80E1, 0x0, 0x80E3, 0x80E4, 0x80E5, 0x80E6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80ED, 0x0, 0x80EF, 0x80F0, 0x80F1, 0x80F2, 0x80F3, 0x80F4, 0x80F5, 0x0, 0x0, 0x80F8, 0x80F9, 0x80FA, 0x80FB, 0x80FC, 0x80FD, 0x80FE, 0x0, 0x8100, 0x8101, 0x8102, 0x0, 0x0, 0x80C1, 0x8106, 0x0, 0x8109, 0x0, 0x810A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8115, 0x8116, 0x0, 0x8118, 0x8119, 0x0, 0x80EB, 0x0, 0x811D, 0x811E, 0x811F, 0x0, 0x8121, 0x8122, 0x5507, 0x8124, 0x8125, 0x0, 0x8127, 0x0, 0x4FEE, 0x0, 0x8131, 0x812C, 0x812D, 0x0, 0x812F, 0x8130, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80C0, 0x813A, 0x0, 0x0, 0x813D, 0x813E, 0x0, 0x0, 0x0, 0x0, 0x8143, 0x8144, 0x0, 0x8146, 0x8147, 0x0, 0x0, 0x814A, 0x814B, 0x814C, 0x814D, 0x80BE, 0x814F, 0x8150, 0x8151, 0x8152, 0x8153, 0x8154, 0x8155, 0x0, 0x0, 0x0, 0x0, 0x0, 0x815B, 0x815C, 0x0, 0x815E, 0x0, 0x8160, 0x8136, 0x8162, 0x0, 0x8164, 0x8165, 0x8111, 0x8167, 0x0, 0x8169, 0x0, 0x80BF, 0x0, 0x0, 0x816E, 0x816F, 0x8170, 0x8171, 0x8172, 0x811A, 0x8174, 0x0, 0x8176, 0x8177, 0x80A0, 0x8179, 0x817A, 0x0, 0x0, 0x0, 0x0, 0x817F, 0x8180, 0x0, 0x8182, 0x817D, 0x0, 0x0, 0x8186, 0x8187, 0x8188, 0x8189, 0x818A, 0x818B, 0x818C, 0x818D, 0x0, 0x818F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8158, 0x0, 0x8197, 0x8198, 0x8199, 0x80A4, 0x819B, 0x819C, 0x819D, 0x819E, 0x819F, 0x80F6, 0x0, 0x81A2, 0x81A3, 0x0, 0x0, 0x81A6, 0x81A7, 0x81A8, 0x817B, 0x0, 0x81AB, 0x81AC, 0x0, 0x81AE, 0x0, 0x81B0, 0x81B1, 0x81B2, 0x81B3, 0x81B4, 0x81B5, 0x0, 0x81B7, 0x0, 0x81B9, 0x81BA, 0x81BB, 0x81BC, 0x80C6, 0x810D, 0x8113, 0x81C0, 0x0, 0x81C2, 0x81C3, 0x81C4, 0x81C5, 0x81C6, 0x81C7, 0x0, 0x8138, 0x81CA, 0x0, 0x81CC, 0x8110, 0x0, 0x8191, 0x81D0, 0x81D1, 0x766F, 0x0, 0x0, 0x81D5, 0x0, 0x81D7, 0x814A, 0x81D9, 0x80EA, 0x81DB, 0x0, 0x81DD, 0x81DE, 0x810F, 0x8114, 0x81E1, 0x81DC, 0x81E3, 0x0, 0x5367, 0x81E6, 0x81E7, 0x4E34, 0x81E9, 0x81EA, 0x0, 0x81EC, 0x81ED, 0x81EE, 0x0, 0x0, 0x0, 0x81F2, 0x81F3, 0x81F4, 0x0, 0x0, 0x81F7, 0x81F8, 0x81F9, 0x53F0, 0x81FB, 0x81FC, 0x0, 0x81FE, 0x81FF, 0x8200, 0x8201, 0x8202, 0x0, 0x8204, 0x8205, 0x0, 0x4E0E, 0x5174, 0x4E3E, 0x65E7, 0x820B, 0x820C, 0x820D, 0x0, 0x0, 0x8210, 0x8211, 0x8212, 0x0, 0x8214, 0x8215, 0x94FA, 0x0, 0x0, 0x0, 0x0, 0x821B, 0x821C, 0x821D, 0x821E, 0x821F, 0x8220, 0x8221, 0x8222, 0x0, 0x0, 0x8225, 0x0, 0x0, 0x8228, 0x0, 0x822A, 0x822B, 0x822C, 0x0, 0x0, 0x822F, 0x0, 0x0, 0x8232, 0x8233, 0x8234, 0x8235, 0x8236, 0x8237, 0x8238, 0x8239, 0x823A, 0x0, 0x823C, 0x823D, 0x0, 0x823F, 0x8240, 0x0, 0x8242, 0x0, 0x8244, 0x8245, 0x0, 0x8247, 0x0, 0x8249, 0x0, 0x824B, 0x0, 0x0, 0x824E, 0x824F, 0x8250, 0x8251, 0x8252, 0x8253, 0x0, 0x8255, 0x8256, 0x8257, 0x8258, 0x8231, 0x825A, 0x825B, 0x825C, 0x0, 0x825E, 0x825F, 0x0, 0x8261, 0x0, 0x6A79, 0x8223, 0x0, 0x8230, 0x0, 0x8268, 0x8269, 0x0, 0x823B, 0x826C, 0x826D, 0x826E, 0x826F, 0x0, 0x8270, 0x8272, 0x0, 0x8274, 0x8275, 0x0, 0x8273, 0x8279, 0x0, 0x0, 0x0, 0x827C, 0x827D, 0x827E, 0x827F, 0x8280, 0x0, 0x0, 0x8283, 0x8284, 0x8285, 0x0, 0x0, 0x0, 0x0, 0x828A, 0x828B, 0x0, 0x828D, 0x828E, 0x828F, 0x8290, 0x8291, 0x8292, 0x8293, 0x8294, 0x0, 0x0, 0x0, 0x8298, 0x8299, 0x829A, 0x829B, 0x0, 0x829D, 0x829E, 0x829F, 0x82A0, 0x82A1, 0x82A2, 0x82A3, 0x82A4, 0x82A5, 0x0, 0x82A7, 0x82A8, 0x82A9, 0x0, 0x82AB, 0x82AC, 0x82AD, 0x82AE, 0x82AF, 0x82B0, 0x82B1, 0x0, 0x82B3, 0x82B4, 0x82B5, 0x82B6, 0x82B7, 0x82B8, 0x82B9, 0x82BA, 0x520D, 0x82BC, 0x82BD, 0x82BE, 0x0, 0x82C0, 0x0, 0x82C2, 0x82C3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x82D1, 0x82D2, 0x82D3, 0x82D4, 0x82D5, 0x82D6, 0x82D7, 0x0, 0x82D9, 0x0, 0x82DB, 0x82DC, 0x0, 0x82DE, 0x82DF, 0x82E0, 0x82E1, 0x0, 0x82E3, 0x82E4, 0x82E5, 0x82E6, 0x82CE, 0x82E8, 0x0, 0x82EA, 0x82EB, 0x82EC, 0x82ED, 0x0, 0x82EF, 0x82F0, 0x82F1, 0x82F2, 0x82F3, 0x82F4, 0x82F5, 0x82F6, 0x0, 0x0, 0x82F9, 0x82FA, 0x82FB, 0x0, 0x0, 0x82FE, 0x0, 0x8300, 0x8301, 0x8302, 0x8303, 0x8304, 0x8305, 0x8306, 0x8307, 0x8308, 0x8309, 0x0, 0x0, 0x830C, 0x830D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8316, 0x8317, 0x0, 0x8319, 0x0, 0x831B, 0x831C, 0x0, 0x831E, 0x0, 0x8320, 0x0, 0x8322, 0x0, 0x8324, 0x8325, 0x8326, 0x8327, 0x8328, 0x8329, 0x832A, 0x832B, 0x832C, 0x832D, 0x0, 0x832F, 0x0, 0x8331, 0x5179, 0x8333, 0x8334, 0x8335, 0x8336, 0x8337, 0x8338, 0x8339, 0x833A, 0x833B, 0x833C, 0x0, 0x0, 0x833F, 0x8340, 0x8341, 0x8342, 0x8343, 0x8344, 0x8345, 0x0, 0x8347, 0x8348, 0x8349, 0x8346, 0x834B, 0x834C, 0x834D, 0x834E, 0x834F, 0x8350, 0x8351, 0x8352, 0x8353, 0x8354, 0x0, 0x8356, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8373, 0x8374, 0x8375, 0x8376, 0x8377, 0x8378, 0x0, 0x837A, 0x837B, 0x837C, 0x837D, 0x837E, 0x837F, 0x0, 0x8381, 0x0, 0x8383, 0x0, 0x0, 0x8386, 0x8387, 0x8388, 0x8389, 0x5E84, 0x838B, 0x838C, 0x838D, 0x838E, 0x838F, 0x8390, 0x0, 0x8392, 0x8393, 0x8394, 0x8395, 0x830E, 0x8397, 0x8398, 0x8399, 0x839A, 0x839B, 0x0, 0x839D, 0x839E, 0x0, 0x83A0, 0x0, 0x835A, 0x83A3, 0x83A4, 0x83A5, 0x83A6, 0x82CB, 0x83A8, 0x83A9, 0x83AA, 0x83AB, 0x0, 0x0, 0x83AE, 0x83AF, 0x83B0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x83BD, 0x0, 0x83BF, 0x83C0, 0x83C1, 0x83C2, 0x83C3, 0x83C4, 0x83C5, 0x83C6, 0x83C7, 0x83C8, 0x83C9, 0x83CA, 0x83CB, 0x83CC, 0x0, 0x83CE, 0x83CF, 0x0, 0x83D1, 0x0, 0x0, 0x83D4, 0x83D5, 0x83D6, 0x83D7, 0x83D8, 0x83D9, 0x0, 0x83DB, 0x83DC, 0x83DD, 0x83DE, 0x83DF, 0x83E0, 0x83E1, 0x83E2, 0x83E3, 0x83E4, 0x83E5, 0x0, 0x83E7, 0x83E8, 0x83E9, 0x83EA, 0x83EB, 0x83EC, 0x0, 0x83EE, 0x534E, 0x83F0, 0x83F1, 0x83F2, 0x83F3, 0x5EB5, 0x83F5, 0x83F6, 0x0, 0x70DF, 0x83F9, 0x83FA, 0x83FB, 0x83FC, 0x83FD, 0x83FE, 0x83FF, 0x0, 0x8401, 0x0, 0x8403, 0x8404, 0x0, 0x8406, 0x82CC, 0x0, 0x8409, 0x83B1, 0x840B, 0x840C, 0x840D, 0x840E, 0x840F, 0x8410, 0x8411, 0x8412, 0x8413, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x841B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8423, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8429, 0x0, 0x842B, 0x4E07, 0x842D, 0x0, 0x842F, 0x8430, 0x8431, 0x8432, 0x8433, 0x8434, 0x83B4, 0x8436, 0x8437, 0x8438, 0x8439, 0x843A, 0x843B, 0x843C, 0x843D, 0x0, 0x843F, 0x8440, 0x0, 0x8442, 0x8443, 0x8444, 0x8445, 0x8446, 0x8447, 0x0, 0x53F6, 0x0, 0x844B, 0x844C, 0x844D, 0x844E, 0x0, 0x8450, 0x8451, 0x836D, 0x0, 0x8454, 0x0, 0x8456, 0x7740, 0x0, 0x8459, 0x845A, 0x845B, 0x0, 0x845D, 0x845E, 0x845F, 0x53C2, 0x8461, 0x0, 0x8463, 0x0, 0x8465, 0x82C7, 0x8467, 0x8468, 0x8469, 0x0, 0x846B, 0x846C, 0x846D, 0x846E, 0x836F, 0x8470, 0x0, 0x0, 0x8473, 0x8474, 0x8475, 0x8476, 0x8364, 0x8478, 0x8479, 0x847A, 0x0, 0x0, 0x847D, 0x847E, 0x0, 0x0, 0x0, 0x8482, 0x0, 0x0, 0x0, 0x8486, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x848D, 0x848E, 0x848F, 0x641C, 0x8491, 0x0, 0x0, 0x83B3, 0x0, 0x0, 0x8497, 0x8498, 0x8499, 0x849A, 0x849B, 0x849C, 0x849D, 0x8385, 0x849F, 0x84A0, 0x84A1, 0x84A2, 0x0, 0x84A4, 0x0, 0x0, 0x84A7, 0x84A8, 0x84A9, 0x84AA, 0x84AB, 0x84AC, 0x0, 0x84AE, 0x84AF, 0x84B0, 0x84B1, 0x84B2, 0x0, 0x84B4, 0x0, 0x84B6, 0x0, 0x84B8, 0x84B9, 0x84BA, 0x84BB, 0x82CD, 0x0, 0x0, 0x84BF, 0x836A, 0x84C1, 0x84C2, 0x0, 0x84C4, 0x84C5, 0x5E2D, 0x84C7, 0x0, 0x84C9, 0x84CA, 0x76D6, 0x84CC, 0x84CD, 0x84CE, 0x84CF, 0x84D0, 0x84D1, 0x84D2, 0x84D3, 0x84D4, 0x0, 0x84D6, 0x84D7, 0x0, 0x0, 0x0, 0x84DB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x839C, 0x84E8, 0x84E9, 0x84EA, 0x84EB, 0x84EC, 0x0, 0x83B2, 0x82C1, 0x84F0, 0x84F1, 0x84F2, 0x84F3, 0x83BC, 0x0, 0x84F6, 0x84F7, 0x0, 0x84F9, 0x84FA, 0x84FB, 0x84FC, 0x835C, 0x84FE, 0x84FF, 0x8500, 0x0, 0x8502, 0x0, 0x0, 0x0, 0x83F1, 0x8507, 0x8508, 0x8509, 0x850A, 0x850B, 0x850C, 0x850D, 0x850E, 0x850F, 0x0, 0x8511, 0x8512, 0x8513, 0x535C, 0x8515, 0x8516, 0x8517, 0x8518, 0x8519, 0x851A, 0x0, 0x851C, 0x851D, 0x848C, 0x851F, 0x8520, 0x8521, 0x0, 0x848B, 0x8524, 0x8471, 0x8311, 0x8527, 0x8528, 0x8529, 0x852A, 0x852B, 0x852C, 0x836B, 0x852E, 0x852F, 0x8530, 0x8531, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x853B, 0x0, 0x853D, 0x853E, 0x0, 0x8540, 0x8368, 0x0, 0x8543, 0x8544, 0x8545, 0x8487, 0x8547, 0x8548, 0x8549, 0x854A, 0x0, 0x0, 0x854D, 0x835E, 0x0, 0x0, 0x8551, 0x0, 0x82B8, 0x8554, 0x83B8, 0x8556, 0x8557, 0x835B, 0x8559, 0x0, 0x855B, 0x0, 0x855D, 0x855E, 0x0, 0x8560, 0x8561, 0x8489, 0x8563, 0x8564, 0x8565, 0x8566, 0x8567, 0x8568, 0x8361, 0x829C, 0x856B, 0x856C, 0x8427, 0x856E, 0x0, 0x0, 0x8571, 0x0, 0x0, 0x0, 0x8575, 0x8576, 0x84E3, 0x8578, 0x8579, 0x857A, 0x857B, 0x857C, 0x0, 0x857E, 0x0, 0x8580, 0x8581, 0x8582, 0x8583, 0x8584, 0x8585, 0x8586, 0x8587, 0x835F, 0x8589, 0x84DF, 0x858B, 0x8297, 0x858D, 0x858E, 0x858F, 0x8590, 0x59DC, 0x0, 0x0, 0x8537, 0x8595, 0x8596, 0x0, 0x8359, 0x8599, 0x859A, 0x859B, 0x859C, 0x859D, 0x859E, 0x83B6, 0x85A0, 0x85A1, 0x85A2, 0x85A3, 0x85A4, 0x0, 0x8350, 0x85A7, 0x85A8, 0x8428, 0x85AA, 0x0, 0x0, 0x0, 0x0, 0x85AF, 0x718F, 0x85B1, 0x0, 0x85B3, 0x85B4, 0x85B5, 0x85B6, 0x85B7, 0x85B8, 0x85B9, 0x8360, 0x0, 0x0, 0x85BD, 0x85BE, 0x85BF, 0x85C0, 0x0, 0x85C2, 0x85C3, 0x85C4, 0x85C5, 0x85C6, 0x85C7, 0x85C8, 0x85C9, 0x0, 0x85CB, 0x0, 0x84DD, 0x8369, 0x85CF, 0x85D0, 0x85D1, 0x85D2, 0x0, 0x0, 0x85D5, 0x0, 0x85D7, 0x85D8, 0x85D9, 0x85DA, 0x0, 0x85DC, 0x827A, 0x85DE, 0x85DF, 0x0, 0x85E1, 0x85E2, 0x85E3, 0x85E4, 0x836F, 0x85E6, 0x0, 0x85E8, 0x85E9, 0x85AE, 0x85EB, 0x85EC, 0x85ED, 0x0, 0x85EF, 0x85F0, 0x85F1, 0x85F2, 0x0, 0x0, 0x0, 0x82C8, 0x85F7, 0x85F8, 0x853C, 0x853A, 0x85FB, 0x0, 0x85FD, 0x85FE, 0x85FF, 0x841A, 0x8601, 0x0, 0x0, 0x8572, 0x8605, 0x82A6, 0x82CF, 0x0, 0x8609, 0x8574, 0x82F9, 0x860C, 0x0, 0x0, 0x0, 0x0, 0x8611, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8617, 0x8618, 0x8619, 0x85D3, 0x861B, 0x861C, 0x0, 0x8539, 0x861F, 0x8620, 0x8621, 0x830F, 0x8623, 0x8624, 0x8625, 0x8626, 0x8627, 0x0, 0x8629, 0x862A, 0x0, 0x862C, 0x5170, 0x862E, 0x0, 0x0, 0x8631, 0x8632, 0x8633, 0x8634, 0x8635, 0x8636, 0x0, 0x8638, 0x8639, 0x84E0, 0x863B, 0x863C, 0x0, 0x863E, 0x841D, 0x8640, 0x0, 0x0, 0x8643, 0x0, 0x0, 0x8646, 0x8647, 0x8648, 0x0, 0x0, 0x864B, 0x864C, 0x864D, 0x864E, 0x0, 0x8650, 0x0, 0x8652, 0x8653, 0x8654, 0x5904, 0x8656, 0x0, 0x0, 0x8659, 0x0, 0x865A, 0x864F, 0x0, 0x865E, 0x53F7, 0x0, 0x8661, 0x8662, 0x8663, 0x8664, 0x8665, 0x0, 0x4E8F, 0x8668, 0x8669, 0x866A, 0x866B, 0x0, 0x866D, 0x866E, 0x866C, 0x8670, 0x8671, 0x0, 0x8673, 0x8674, 0x0, 0x0, 0x8677, 0x0, 0x8679, 0x867A, 0x867B, 0x867C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8685, 0x8686, 0x8687, 0x0, 0x0, 0x868A, 0x868B, 0x868C, 0x868D, 0x868E, 0x0, 0x8690, 0x8691, 0x0, 0x8693, 0x8694, 0x8695, 0x8696, 0x8697, 0x8698, 0x8699, 0x869A, 0x0, 0x869C, 0x869D, 0x869E, 0x0, 0x0, 0x86A1, 0x86A2, 0x86A3, 0x86A4, 0x86A5, 0x0, 0x86A7, 0x86A8, 0x86A9, 0x86AA, 0x0, 0x0, 0x0, 0x0, 0x86AF, 0x86B0, 0x86B1, 0x0, 0x86B3, 0x86B4, 0x86B5, 0x86B6, 0x86B7, 0x86B8, 0x86B9, 0x86BA, 0x86BB, 0x86BC, 0x86BD, 0x86BE, 0x86BF, 0x86C0, 0x86C1, 0x86C2, 0x86C3, 0x86C4, 0x86C5, 0x86C6, 0x86C7, 0x86C8, 0x86C9, 0x0, 0x86CB, 0x86CC, 0x0, 0x0, 0x0, 0x86D0, 0x86D1, 0x0, 0x86D3, 0x86D4, 0x0, 0x86D6, 0x86D7, 0x86D8, 0x86D9, 0x86DA, 0x86DB, 0x86DC, 0x86DD, 0x86DE, 0x86DF, 0x0, 0x0, 0x86E2, 0x86E3, 0x86E4, 0x0, 0x86E6, 0x0, 0x86E8, 0x86E9, 0x86EA, 0x86EB, 0x86EC, 0x86ED, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x86F5, 0x86F6, 0x86F7, 0x86F8, 0x86F9, 0x86F1, 0x8715, 0x0, 0x0, 0x86FE, 0x0, 0x8700, 0x8701, 0x8702, 0x8703, 0x8704, 0x8705, 0x86AC, 0x8707, 0x8708, 0x8709, 0x870A, 0x870B, 0x870C, 0x870D, 0x870E, 0x0, 0x0, 0x8711, 0x8712, 0x8713, 0x0, 0x0, 0x0, 0x0, 0x8718, 0x8719, 0x871A, 0x871B, 0x871C, 0x0, 0x871E, 0x0, 0x8720, 0x8721, 0x8722, 0x8723, 0x8724, 0x8725, 0x8726, 0x8727, 0x8728, 0x8729, 0x872A, 0x0, 0x872C, 0x872D, 0x872E, 0x0, 0x8730, 0x8731, 0x8732, 0x8733, 0x8734, 0x8735, 0x0, 0x8737, 0x8738, 0x0, 0x873A, 0x873B, 0x873C, 0x0, 0x873E, 0x873F, 0x8740, 0x8741, 0x8742, 0x8743, 0x0, 0x0, 0x8746, 0x0, 0x0, 0x0, 0x0, 0x0, 0x874C, 0x874D, 0x874E, 0x874F, 0x8750, 0x8751, 0x8752, 0x8753, 0x8754, 0x8680, 0x8756, 0x8757, 0x8758, 0x8759, 0x875A, 0x875B, 0x875C, 0x875D, 0x875E, 0x732C, 0x8760, 0x8761, 0x8762, 0x8763, 0x8764, 0x8765, 0x867E, 0x8767, 0x8671, 0x8769, 0x876A, 0x876B, 0x876C, 0x876D, 0x876E, 0x876F, 0x0, 0x0, 0x0, 0x8773, 0x8774, 0x8775, 0x8776, 0x8777, 0x8717, 0x8779, 0x877A, 0x877B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8781, 0x8782, 0x8783, 0x86F3, 0x8785, 0x0, 0x8787, 0x8788, 0x8789, 0x0, 0x0, 0x0, 0x878D, 0x0, 0x878F, 0x8790, 0x8791, 0x8792, 0x8793, 0x8794, 0x0, 0x8796, 0x8797, 0x8681, 0x0, 0x879A, 0x879B, 0x879C, 0x879D, 0x8682, 0x879F, 0x0, 0x0, 0x8424, 0x87A3, 0x87A4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x87AA, 0x87AB, 0x87AC, 0x87AD, 0x87AE, 0x87AF, 0x87B0, 0x0, 0x87B2, 0x87B3, 0x87B4, 0x87B5, 0x87B6, 0x87B7, 0x87B8, 0x87B9, 0x87BA, 0x877C, 0x87BC, 0x87BD, 0x87BE, 0x8780, 0x87C0, 0x0, 0x87C2, 0x87C3, 0x86F0, 0x87C5, 0x87C6, 0x0, 0x8748, 0x87C9, 0x87CA, 0x87CB, 0x87CC, 0x0, 0x0, 0x0, 0x0, 0x87D1, 0x87D2, 0x87D3, 0x87D4, 0x0, 0x0, 0x87D7, 0x87D8, 0x87D9, 0x0, 0x87DB, 0x87DC, 0x87DD, 0x87DE, 0x87DF, 0x87E0, 0x87E1, 0x87E2, 0x866E, 0x87E4, 0x87E5, 0x87E6, 0x87E7, 0x87E8, 0x0, 0x87EA, 0x87EB, 0x8749, 0x87ED, 0x0, 0x86F2, 0x0, 0x0, 0x866B, 0x87F3, 0x87F4, 0x0, 0x86CF, 0x87F7, 0x0, 0x87F9, 0x87FA, 0x8681, 0x87FC, 0x0, 0x87FE, 0x87FF, 0x8800, 0x8801, 0x8802, 0x8803, 0x0, 0x8747, 0x867F, 0x0, 0x8808, 0x8809, 0x880A, 0x880B, 0x880C, 0x874E, 0x0, 0x0, 0x86F4, 0x877E, 0x0, 0x8813, 0x869D, 0x8815, 0x8816, 0x8817, 0x0, 0x8819, 0x0, 0x881B, 0x881C, 0x881D, 0x0, 0x8721, 0x8820, 0x8821, 0x8822, 0x86CE, 0x8824, 0x8825, 0x8826, 0x0, 0x87CF, 0x8829, 0x882A, 0x882B, 0x882C, 0x0, 0x882E, 0x882F, 0x8830, 0x86CA, 0x8832, 0x8833, 0x0, 0x8835, 0x8695, 0x8837, 0x8838, 0x8839, 0x0, 0x86EE, 0x883C, 0x883D, 0x883E, 0x883F, 0x8840, 0x8841, 0x0, 0x8843, 0x8844, 0x0, 0x0, 0x0, 0x8848, 0x0, 0x8511, 0x884B, 0x884C, 0x884D, 0x884E, 0x0, 0x0, 0x0, 0x8852, 0x672F, 0x0, 0x8855, 0x8856, 0x8857, 0x0, 0x8859, 0x80E1, 0x536B, 0x0, 0x51B2, 0x0, 0x0, 0x0, 0x8861, 0x8862, 0x8863, 0x0, 0x0, 0x0, 0x8867, 0x8868, 0x8869, 0x886A, 0x886B, 0x0, 0x886D, 0x0, 0x886F, 0x8870, 0x8871, 0x8872, 0x0, 0x8874, 0x8875, 0x8876, 0x8877, 0x0, 0x53EA, 0x0, 0x0, 0x887C, 0x887D, 0x887E, 0x887F, 0x8880, 0x8881, 0x8882, 0x8883, 0x0, 0x0, 0x0, 0x0, 0x8888, 0x8889, 0x0, 0x888B, 0x888C, 0x888D, 0x888E, 0x0, 0x0, 0x8891, 0x8892, 0x8893, 0x0, 0x8895, 0x8896, 0x8897, 0x8898, 0x8899, 0x889A, 0x889B, 0x0, 0x0, 0x886E, 0x889F, 0x0, 0x88A1, 0x88A2, 0x0, 0x88A4, 0x0, 0x0, 0x88A7, 0x88A8, 0x0, 0x88AA, 0x88AB, 0x88AC, 0x0, 0x0, 0x0, 0x0, 0x88B1, 0x88B2, 0x0, 0x0, 0x0, 0x88B6, 0x88B7, 0x88B8, 0x88B9, 0x88BA, 0x0, 0x88BC, 0x88BD, 0x88BE, 0x0, 0x88C0, 0x88C1, 0x88C2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88C9, 0x8885, 0x88CB, 0x5939, 0x88CD, 0x88CE, 0x0, 0x88D0, 0x0, 0x88D2, 0x0, 0x88D4, 0x88D5, 0x88D6, 0x88D7, 0x88D8, 0x88D9, 0x88DA, 0x88DB, 0x8865, 0x88C5, 0x88DE, 0x88DF, 0x0, 0x91CC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88E7, 0x88E8, 0x0, 0x0, 0x88EB, 0x88EC, 0x0, 0x88EE, 0x88EF, 0x88F0, 0x88F1, 0x88F2, 0x88F3, 0x88F4, 0x0, 0x88F6, 0x88F7, 0x88F8, 0x88F9, 0x88FA, 0x88FB, 0x88FC, 0x5236, 0x88FE, 0x0, 0x0, 0x8901, 0x8902, 0x0, 0x0, 0x8905, 0x8906, 0x590D, 0x0, 0x8909, 0x890A, 0x890B, 0x88C8, 0x0, 0x890E, 0x0, 0x8910, 0x8911, 0x8912, 0x8913, 0x8914, 0x8915, 0x8916, 0x8917, 0x8886, 0x8919, 0x891A, 0x0, 0x0, 0x0, 0x891E, 0x891F, 0x0, 0x8921, 0x8922, 0x8923, 0x0, 0x8925, 0x8926, 0x8927, 0x0, 0x8929, 0x892A, 0x892B, 0x892C, 0x892D, 0x892E, 0x892F, 0x8930, 0x8931, 0x88E4, 0x88E2, 0x0, 0x8935, 0x8936, 0x8937, 0x891B, 0x0, 0x0, 0x4EB5, 0x893C, 0x893D, 0x893E, 0x0, 0x0, 0x8941, 0x8942, 0x0, 0x8944, 0x0, 0x5E5E, 0x0, 0x0, 0x8949, 0x0, 0x894B, 0x894C, 0x0, 0x0, 0x88AF, 0x8950, 0x8951, 0x8952, 0x8953, 0x0, 0x0, 0x8884, 0x8957, 0x8958, 0x8959, 0x895A, 0x895B, 0x895C, 0x88E3, 0x895E, 0x895F, 0x88C6, 0x8961, 0x8962, 0x8963, 0x8934, 0x0, 0x8966, 0x0, 0x0, 0x8969, 0x889C, 0x896B, 0x896C, 0x896D, 0x896E, 0x886C, 0x0, 0x8971, 0x88AD, 0x8973, 0x8955, 0x0, 0x8976, 0x0, 0x0, 0x8979, 0x897A, 0x897B, 0x897C, 0x0, 0x897E, 0x897F, 0x0, 0x8981, 0x8982, 0x8983, 0x0, 0x8985, 0x8986, 0x0, 0x6838, 0x0, 0x0, 0x89C1, 0x0, 0x0, 0x0, 0x89C4, 0x0, 0x0, 0x0, 0x89C5, 0x0, 0x8995, 0x89C6, 0x8997, 0x89C7, 0x0, 0x0, 0x899B, 0x773A, 0x899D, 0x899E, 0x899F, 0x0, 0x89CB, 0x89A2, 0x89A3, 0x89A4, 0x0, 0x89CE, 0x0, 0x0, 0x0, 0x4EB2, 0x0, 0x89CA, 0x89AD, 0x89AE, 0x89CF, 0x0, 0x0, 0x89D0, 0x0, 0x0, 0x0, 0x89B6, 0x89D1, 0x0, 0x89B9, 0x89C9, 0x0, 0x0, 0x89C8, 0x89BE, 0x89CC, 0x89C2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x89D2, 0x89D3, 0x89D4, 0x89D5, 0x89D6, 0x0, 0x0, 0x89D9, 0x89DA, 0x89DB, 0x89DC, 0x62B5, 0x0, 0x89DF, 0x89E0, 0x89E1, 0x89E2, 0x89E3, 0x89E4, 0x89E5, 0x89E6, 0x0, 0x89E8, 0x89E9, 0x0, 0x89EB, 0x89EC, 0x89ED, 0x0, 0x0, 0x89F0, 0x89F1, 0x89F2, 0x89F3, 0x89DE, 0x0, 0x89EF, 0x89F7, 0x89E6, 0x0, 0x89FA, 0x89FB, 0x89FC, 0x0, 0x89FE, 0x89FF, 0x8A00, 0x0, 0x8BA2, 0x8BA3, 0x8A04, 0x0, 0x0, 0x8A07, 0x8BA1, 0x0, 0x8BAF, 0x0, 0x8BA7, 0x0, 0x8BA8, 0x5401, 0x8BA6, 0x8A11, 0x8BB1, 0x8BAD, 0x0, 0x8BAA, 0x8BAB, 0x6258, 0x8BB0, 0x0, 0x0, 0x8BB9, 0x0, 0x8BB6, 0x8A1E, 0x8BBC, 0x0, 0x0, 0x6B23, 0x8BC0, 0x0, 0x8BB7, 0x0, 0x8A27, 0x0, 0x0, 0x8BBF, 0x0, 0x8A2C, 0x8BBE, 0x0, 0x0, 0x8A30, 0x8BB8, 0x0, 0x0, 0x8BC9, 0x0, 0x8BC3, 0x0, 0x0, 0x8A39, 0x8BCA, 0x6CE8, 0x8BC1, 0x0, 0x8A3E, 0x8A3F, 0x8A40, 0x8BC2, 0x0, 0x0, 0x8A44, 0x8A45, 0x8BCB, 0x0, 0x8A48, 0x0, 0x8A4A, 0x0, 0x8A4C, 0x8A4D, 0x8BB5, 0x8A4F, 0x8BC8, 0x8A51, 0x8BD2, 0x0, 0x8BCF, 0x8BC4, 0x8BD0, 0x8BC7, 0x8BCE, 0x8A59, 0x0, 0x8BC5, 0x0, 0x0, 0x8BCD, 0x0, 0x548F, 0x8BE9, 0x8BE2, 0x8BE3, 0x0, 0x0, 0x8BD5, 0x0, 0x8A68, 0x8BD7, 0x0, 0x8BE7, 0x8BDF, 0x8BE1, 0x8BE0, 0x0, 0x8BD8, 0x8BDD, 0x8BE5, 0x8BE6, 0x8A74, 0x8BDC, 0x8A76, 0x8A77, 0x0, 0x8A79, 0x8A7A, 0x8A7B, 0x8BD9, 0x0, 0x0, 0x8BD6, 0x0, 0x8A81, 0x8A82, 0x8A83, 0x8BD4, 0x8BDB, 0x8BD3, 0x5938, 0x0, 0x0, 0x0, 0x8A8B, 0x5FD7, 0x8BA4, 0x0, 0x8A8F, 0x0, 0x8BF3, 0x8BF6, 0x8A93, 0x0, 0x8BDE, 0x8A96, 0x0, 0x8BF1, 0x8A99, 0x8BEE, 0x0, 0x0, 0x0, 0x8BED, 0x0, 0x8BDA, 0x8BEB, 0x0, 0x8BEC, 0x8BEF, 0x8BF0, 0x8BF5, 0x8AA7, 0x8BF2, 0x0, 0x8BF4, 0x8AAB, 0x0, 0x0, 0x0, 0x0, 0x8C01, 0x0, 0x8BFE, 0x0, 0x0, 0x0, 0x8C07, 0x0, 0x8AB8, 0x8BFD, 0x8ABA, 0x8ABB, 0x8C0A, 0x8ABD, 0x8ABE, 0x8C03, 0x8AC0, 0x0, 0x8C04, 0x8AC3, 0x8C06, 0x8AC5, 0x8AC6, 0x8C08, 0x8AC8, 0x8BFF, 0x0, 0x8BF7, 0x0, 0x8BE4, 0x0, 0x8BF9, 0x0, 0x8BFC, 0x8C05, 0x8AD3, 0x8AD4, 0x8AD5, 0x8BBA, 0x8C02, 0x8AD8, 0x8AD9, 0x0, 0x8C00, 0x8C0D, 0x8C1E, 0x8C1D, 0x8ADF, 0x8AE0, 0x8C25, 0x8BE8, 0x0, 0x8C14, 0x0, 0x8C1B, 0x8C10, 0x8AE8, 0x0, 0x0, 0x8C0F, 0x0, 0x8C15, 0x8C18, 0x8AEF, 0x8AF0, 0x8BB3, 0x8AF2, 0x8C19, 0x8AF4, 0x8AF5, 0x8C0C, 0x8BBD, 0x8BF8, 0x0, 0x8C1A, 0x8AFB, 0x8C16, 0x0, 0x8BFA, 0x8AFF, 0x8C0B, 0x8C12, 0x8C13, 0x0, 0x8A8A, 0x8BCC, 0x8B06, 0x8B07, 0x8B08, 0x0, 0x8C0E, 0x8B0B, 0x0, 0x8B0D, 0x8C1C, 0x8B0F, 0x8C27, 0x8B11, 0x8B12, 0x8B13, 0x8C11, 0x8B15, 0x8C21, 0x8C24, 0x8B18, 0x8C26, 0x8C25, 0x8BB2, 0x8B1C, 0x8C22, 0x8B1E, 0x0, 0x8C23, 0x0, 0x8B22, 0x8B23, 0x8B24, 0x8B25, 0x8B26, 0x8B27, 0x8C1F, 0x0, 0x8B2A, 0x8C2A, 0x8C2C, 0x0, 0x8B2E, 0x8B2F, 0x8B30, 0x8B31, 0x0, 0x8BB4, 0x0, 0x8B35, 0x8B36, 0x8B37, 0x0, 0x8C28, 0x8B3A, 0x8B3B, 0x8B3C, 0x8B3D, 0x8C29, 0x0, 0x8B40, 0x54D7, 0x8B42, 0x0, 0x0, 0x8B45, 0x563B, 0x8B47, 0x8B48, 0x8BC1, 0x8B4A, 0x8B4B, 0x0, 0x0, 0x8C32, 0x8BA5, 0x8B50, 0x8B51, 0x8B52, 0x8B53, 0x8B54, 0x8B55, 0x8C2E, 0x8B57, 0x8BC6, 0x8C2F, 0x8C2D, 0x0, 0x8C31, 0x8B5D, 0x0, 0x566A, 0x8B60, 0x0, 0x0, 0x8B63, 0x0, 0x8B65, 0x8B66, 0x8B67, 0x8B68, 0x0, 0x8B6A, 0x8C35, 0x8B6C, 0x6BC1, 0x0, 0x8BD1, 0x8BAE, 0x0, 0x0, 0x0, 0x8C34, 0x0, 0x0, 0x62A4, 0x8BEA, 0x8B79, 0x8B7A, 0x8B7B, 0x0, 0x8A89, 0x8C2B, 0x8B7F, 0x8BFB, 0x0, 0x8B82, 0x0, 0x8B84, 0x5BA1, 0x8B86, 0x0, 0x8B88, 0x0, 0x53D8, 0x8A5F, 0x71D5, 0x0, 0x96E0, 0x0, 0x0, 0x0, 0x8C17, 0x8BA9, 0x8B94, 0x8C30, 0x8C36, 0x0, 0x8B98, 0x8B99, 0x8D5E, 0x0, 0x8C20, 0x0, 0x8C33, 0x8B9F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8C37, 0x0, 0x8C39, 0x0, 0x8C3B, 0x8C3C, 0x8C3D, 0x8C3E, 0x6EAA, 0x0, 0x8C41, 0x8C42, 0x8C43, 0x0, 0x8C45, 0x8C46, 0x8C47, 0x5C82, 0x8C49, 0x8C4A, 0x8C4B, 0x8C4C, 0x8C4D, 0x7AD6, 0x8C4F, 0x4E30, 0x0, 0x0, 0x0, 0x8273, 0x8C55, 0x8C56, 0x8C57, 0x0, 0x0, 0x8C5A, 0x0, 0x8C5C, 0x8C5D, 0x0, 0x8C5F, 0x0, 0x8C61, 0x8C62, 0x0, 0x8C64, 0x8C65, 0x8C66, 0x0, 0x8C68, 0x8C69, 0x8C6A, 0x8C6B, 0x732A, 0x8C6D, 0x0, 0x8C6F, 0x8C70, 0x8C71, 0x8C72, 0x8C73, 0x0, 0x8C75, 0x8C6E, 0x8C77, 0x8C78, 0x8C79, 0x8C7A, 0x8C7B, 0x0, 0x8C7D, 0x0, 0x0, 0x8C80, 0x8C81, 0x8C82, 0x0, 0x8C84, 0x8C85, 0x8C86, 0x0, 0x0, 0x8C89, 0x8C8A, 0x0, 0x8C8C, 0x72F8, 0x0, 0x8C8F, 0x8C90, 0x8C91, 0x8C92, 0x732B, 0x8C94, 0x8C95, 0x0, 0x8C97, 0x8C98, 0x8C99, 0x8C9A, 0x0, 0x8C9C, 0x8D1D, 0x8D1E, 0x0, 0x8D1F, 0x8D22, 0x8D21, 0x8CA3, 0x8CA4, 0x8CA5, 0x0, 0x8D2B, 0x8D27, 0x8D29, 0x8D2A, 0x8D2F, 0x8D23, 0x0, 0x0, 0x8D2E, 0x8D33, 0x0, 0x8D40, 0x8D30, 0x8D35, 0x8CB5, 0x8D2C, 0x4E70, 0x8D37, 0x8CB9, 0x8D36, 0x8D39, 0x8D34, 0x8D3B, 0x8CBE, 0x8D38, 0x8D3A, 0x8D32, 0x8D42, 0x8D41, 0x8D3F, 0x8D45, 0x0, 0x8D44, 0x8D3E, 0x0, 0x8D3C, 0x0, 0x8CCC, 0x0, 0x0, 0x8CCF, 0x0, 0x8D48, 0x8D4A, 0x5BBE, 0x0, 0x8D47, 0x0, 0x8CD7, 0x0, 0x8D52, 0x8D49, 0x0, 0x8D50, 0x8CDD, 0x8D4F, 0x8CDF, 0x8D54, 0x8D53, 0x8D24, 0x5356, 0x8D31, 0x8CE5, 0x8D4B, 0x8D55, 0x8CE8, 0x0, 0x8D28, 0x0, 0x8D26, 0x8D4C, 0x8D46, 0x0, 0x8CF0, 0x8CF1, 0x0, 0x8CF3, 0x8D56, 0x8D57, 0x0, 0x0, 0x5269, 0x8CF9, 0x8D5A, 0x8D59, 0x8D2D, 0x8D5B, 0x8D5C, 0x0, 0x8D00, 0x0, 0x8D02, 0x0, 0x8D3D, 0x8D58, 0x8D06, 0x8D5F, 0x8D60, 0x8D09, 0x8D5E, 0x0, 0x0, 0x8D61, 0x0, 0x8D62, 0x8D46, 0x0, 0x0, 0x8D43, 0x8D51, 0x8D15, 0x8D4E, 0x8D5D, 0x0, 0x8D19, 0x0, 0x8D63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8D64, 0x0, 0x8D66, 0x8D67, 0x8D68, 0x8D69, 0x0, 0x8D6B, 0x8D6A, 0x8D6D, 0x8D6E, 0x8D6F, 0x8D70, 0x0, 0x8D72, 0x8D73, 0x8D74, 0x0, 0x8D76, 0x8D77, 0x8D78, 0x8D79, 0x0, 0x8D7B, 0x0, 0x8D7D, 0x0, 0x0, 0x8D80, 0x8D81, 0x0, 0x0, 0x8D84, 0x8D85, 0x0, 0x0, 0x0, 0x8D89, 0x8D8A, 0x0, 0x8D8C, 0x8D8D, 0x8D8E, 0x8D8F, 0x8D90, 0x8D91, 0x8D92, 0x8D93, 0x8D94, 0x8D76, 0x8D96, 0x0, 0x0, 0x8D75, 0x0, 0x8D9B, 0x8D9C, 0x0, 0x0, 0x8D9F, 0x8DA0, 0x8DA1, 0x0, 0x8DA3, 0x0, 0x8DA5, 0x0, 0x8DA7, 0x8D8B, 0x0, 0x8DAA, 0x8DAB, 0x8DAC, 0x8DAD, 0x8DAE, 0x8DAF, 0x0, 0x0, 0x8DB1, 0x8DB3, 0x8DB4, 0x8DB5, 0x8DB6, 0x8DB7, 0x0, 0x8DB9, 0x8DBA, 0x0, 0x8DBC, 0x0, 0x8DBE, 0x8DBF, 0x0, 0x8DC1, 0x8DC2, 0x0, 0x0, 0x8DC5, 0x8DC6, 0x8DC7, 0x8DC8, 0x0, 0x0, 0x8DCB, 0x8DCC, 0x8DCD, 0x8DCE, 0x8DCF, 0x8DD0, 0x8DD1, 0x0, 0x8DD3, 0x0, 0x8DD5, 0x8DD6, 0x8DD7, 0x8DD8, 0x8DD9, 0x8DDA, 0x8DDB, 0x8DDC, 0x8DDD, 0x0, 0x8DDF, 0x8DE0, 0x8FF9, 0x8DE2, 0x8DE3, 0x8DE4, 0x0, 0x8DE6, 0x8DE7, 0x8DE8, 0x8DE9, 0x8DEA, 0x8DEB, 0x8DEC, 0x0, 0x8DEE, 0x8DEF, 0x8DF0, 0x8DF1, 0x8DF2, 0x8DF3, 0x8DF4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8DFA, 0x0, 0x5C40, 0x8DFD, 0x8DFE, 0x8DFF, 0x8E00, 0x0, 0x8E02, 0x8E03, 0x8E04, 0x8E05, 0x8E06, 0x8E07, 0x0, 0x8E09, 0x8E0A, 0x0, 0x0, 0x8E0D, 0x0, 0x8E0F, 0x8DF5, 0x8E11, 0x8E12, 0x8E13, 0x8E14, 0x8E15, 0x8E16, 0x8E17, 0x8E18, 0x8E19, 0x8E1A, 0x8E1B, 0x8E1C, 0x8E1D, 0x8E1E, 0x8E1F, 0x8E20, 0x8737, 0x8E22, 0x8E23, 0x8E24, 0x8E25, 0x8E26, 0x8E27, 0x0, 0x8E29, 0x0, 0x8E2B, 0x0, 0x0, 0x8E2E, 0x0, 0x8E30, 0x8E31, 0x0, 0x8E33, 0x8E0A, 0x8E35, 0x8E36, 0x0, 0x8E38, 0x8E39, 0x0, 0x0, 0x8E3C, 0x8E3D, 0x8E3E, 0x8E3F, 0x8E40, 0x8E41, 0x8E42, 0x0, 0x8E44, 0x8E45, 0x0, 0x8E47, 0x8E48, 0x8E49, 0x8E4A, 0x8E4B, 0x8DC4, 0x8E4D, 0x8E4E, 0x0, 0x8E50, 0x0, 0x0, 0x8E53, 0x8E54, 0x8DF8, 0x8E56, 0x8E57, 0x0, 0x8E59, 0x8E5A, 0x8E5B, 0x8E5C, 0x8E5D, 0x8E5E, 0x8FF9, 0x8DD6, 0x8E61, 0x8E62, 0x8E52, 0x8E2A, 0x8E65, 0x8E66, 0x8E67, 0x0, 0x8E69, 0x8E6A, 0x0, 0x8E6C, 0x8E6D, 0x0, 0x8E6F, 0x0, 0x0, 0x8E72, 0x8E73, 0x8E74, 0x0, 0x8E76, 0x0, 0x8E78, 0x0, 0x8DF7, 0x8E7B, 0x8E7C, 0x0, 0x0, 0x0, 0x0, 0x8E81, 0x8DF6, 0x0, 0x8E84, 0x8E85, 0x8E86, 0x8E87, 0x8E88, 0x8DB8, 0x8E0C, 0x8DFB, 0x8E8C, 0x8DC3, 0x8E8E, 0x0, 0x8E90, 0x8E2F, 0x8DDE, 0x8E2C, 0x8E94, 0x8E70, 0x8E96, 0x8E97, 0x8E98, 0x0, 0x8DF9, 0x0, 0x0, 0x8E9D, 0x8E9E, 0x8E9F, 0x8EA0, 0x8E51, 0x0, 0x8EA3, 0x8EA4, 0x8E7F, 0x8E9C, 0x0, 0x8EA8, 0x8EA9, 0x8E8F, 0x8EAB, 0x8EAC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8EB2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8EBA, 0x0, 0x0, 0x8EBD, 0x0, 0x0, 0x8EAF, 0x0, 0x8EC2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8EC9, 0x8F66, 0x8F67, 0x8F68, 0x519B, 0x0, 0x8ECF, 0x0, 0x8F6A, 0x8F69, 0x8ED3, 0x8F6B, 0x0, 0x0, 0x8ED7, 0x8ED8, 0x0, 0x0, 0x8F6D, 0x8EDC, 0x8EDD, 0x8EDE, 0x8F6F, 0x8EE0, 0x8EE1, 0x0, 0x0, 0x0, 0x8EE5, 0x8EE6, 0x8EE7, 0x8EE8, 0x8EE9, 0x0, 0x8F78, 0x8EEC, 0x0, 0x8EEE, 0x8EEF, 0x0, 0x8EF1, 0x0, 0x0, 0x8EF4, 0x8EF5, 0x8EF6, 0x8EF7, 0x8F74, 0x8F75, 0x8F7A, 0x8F72, 0x8F76, 0x0, 0x8F7C, 0x8EFF, 0x8F00, 0x8F01, 0x8F02, 0x8F83, 0x0, 0x8F82, 0x8F06, 0x8F81, 0x8F80, 0x8F7D, 0x8F7E, 0x8F0B, 0x0, 0x8F0D, 0x8F0E, 0x0, 0x8F10, 0x8F11, 0x8F84, 0x633D, 0x8F85, 0x8F7B, 0x8F16, 0x8F17, 0x8F18, 0x0, 0x8F1A, 0x8F86, 0x8F8E, 0x8F89, 0x8F8B, 0x8F8D, 0x8F20, 0x0, 0x0, 0x8F23, 0x8F24, 0x8F8A, 0x8F87, 0x0, 0x0, 0x8F88, 0x8F6E, 0x0, 0x8F8C, 0x0, 0x8F2E, 0x8F91, 0x0, 0x0, 0x8F32, 0x8F8F, 0x8F34, 0x8F35, 0x8F36, 0x8F37, 0x8F93, 0x8F39, 0x0, 0x8F90, 0x0, 0x0, 0x8F97, 0x8206, 0x8F92, 0x0, 0x6BC2, 0x8F43, 0x8F96, 0x8F95, 0x8F98, 0x8F47, 0x8F48, 0x8F6C, 0x0, 0x8F4B, 0x0, 0x8F99, 0x8F7F, 0x8F4F, 0x8F50, 0x8F51, 0x8F52, 0x8F53, 0x8F9A, 0x8F55, 0x8F56, 0x8F57, 0x8F58, 0x8F59, 0x8F5A, 0x8F5B, 0x0, 0x8F5D, 0x8F5E, 0x8F70, 0x8F60, 0x8F94, 0x8F79, 0x8F63, 0x8F73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8F9B, 0x8F9C, 0x0, 0x0, 0x8F9F, 0x0, 0x0, 0x0, 0x8FA3, 0x0, 0x0, 0x529E, 0x0, 0x8FA8, 0x0, 0x0, 0x0, 0x0, 0x8F9E, 0x8FAB, 0x8FA9, 0x8FB0, 0x8FB1, 0x519C, 0x0, 0x8FB4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8FBF, 0x0, 0x0, 0x8FC2, 0x0, 0x8FC4, 0x8FC5, 0x8FE4, 0x0, 0x0, 0x8FC9, 0x0, 0x8FCB, 0x0, 0x8FCD, 0x8FCE, 0x0, 0x0, 0x8FD1, 0x8FD2, 0x8FD3, 0x8FD4, 0x8FD5, 0x8FD6, 0x8FD7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8FE0, 0x8FE1, 0x8FE2, 0x8FE3, 0x8FE4, 0x8FE5, 0x8FE6, 0x0, 0x8FE8, 0x0, 0x8FEA, 0x8FEB, 0x0, 0x8FED, 0x8FEE, 0x0, 0x8FF0, 0x0, 0x0, 0x0, 0x56DE, 0x8FF5, 0x8FF6, 0x8FF7, 0x8FF8, 0x0, 0x4E43, 0x8FFB, 0x8FFC, 0x8FFD, 0x8FFE, 0x8FFF, 0x9000, 0x9001, 0x9002, 0x9003, 0x9004, 0x9005, 0x9006, 0x0, 0x0, 0x0, 0x0, 0x900B, 0x900C, 0x900D, 0x0, 0x900F, 0x9010, 0x9011, 0x0, 0x0, 0x9014, 0x5F84, 0x9016, 0x9017, 0x0, 0x8FD9, 0x901A, 0x901B, 0x901C, 0x901D, 0x901E, 0x901F, 0x9020, 0x9021, 0x9022, 0x8FDE, 0x9024, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x902D, 0x902E, 0x902F, 0x0, 0x5468, 0x8FDB, 0x0, 0x9034, 0x9035, 0x9036, 0x0, 0x9038, 0x0, 0x0, 0x0, 0x903C, 0x903D, 0x903E, 0x903F, 0x0, 0x9041, 0x9042, 0x0, 0x9044, 0x0, 0x0, 0x9047, 0x0, 0x9049, 0x6E38, 0x8FD0, 0x0, 0x904D, 0x8FC7, 0x904F, 0x9050, 0x9051, 0x9052, 0x9053, 0x8FBE, 0x8FDD, 0x0, 0x0, 0x9058, 0x9065, 0x0, 0x905B, 0x900A, 0x6C93, 0x9012, 0x0, 0x8FDC, 0x0, 0x9062, 0x9063, 0x0, 0x0, 0x0, 0x9067, 0x9068, 0x9002, 0x0, 0x906B, 0x0, 0x906D, 0x906E, 0x906F, 0x9070, 0x0, 0x8FDF, 0x9073, 0x9074, 0x9075, 0x9076, 0x8FC1, 0x9009, 0x9079, 0x9057, 0x907B, 0x8FBD, 0x907D, 0x907E, 0x907F, 0x9080, 0x8FC8, 0x9082, 0x9083, 0x8FD8, 0x9085, 0x9086, 0x8FE9, 0x9088, 0x0, 0x8FB9, 0x908B, 0x0, 0x908D, 0x0, 0x903B, 0x9026, 0x9091, 0x0, 0x0, 0x9094, 0x9095, 0x0, 0x9097, 0x9098, 0x9099, 0x0, 0x909B, 0x0, 0x0, 0x909E, 0x909F, 0x90A0, 0x90A1, 0x90A2, 0x90A3, 0x0, 0x90A5, 0x90A6, 0x90A7, 0x0, 0x0, 0x90AA, 0x0, 0x0, 0x0, 0x0, 0x90AF, 0x90B0, 0x90B1, 0x90B2, 0x90B3, 0x90B4, 0x90B5, 0x90B6, 0x0, 0x90B8, 0x0, 0x0, 0x0, 0x0, 0x90BD, 0x90BE, 0x90BF, 0x0, 0x90C1, 0x0, 0x5408, 0x0, 0x90C5, 0x0, 0x90C7, 0x90C8, 0x0, 0x90CA, 0x90CB, 0x0, 0x0, 0x90CE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90D4, 0x90D5, 0x90D6, 0x90D7, 0x90D8, 0x90D9, 0x90DA, 0x90DB, 0x90DC, 0x90DD, 0x0, 0x90CF, 0x90E0, 0x90E1, 0x90E2, 0x90E3, 0x90C4, 0x90E5, 0x0, 0x0, 0x90E8, 0x90E9, 0x90EA, 0x90EB, 0x90EC, 0x90ED, 0x0, 0x90EF, 0x90F0, 0x90F1, 0x90F2, 0x90F3, 0x90F4, 0x90AE, 0x0, 0x0, 0x0, 0x90F9, 0x90FA, 0x90FB, 0x90FC, 0x90FD, 0x90FE, 0x90FF, 0x9100, 0x9101, 0x9102, 0x9103, 0x9104, 0x9105, 0x90D3, 0x9107, 0x9108, 0x4E61, 0x0, 0x910B, 0x0, 0x910D, 0x910E, 0x910F, 0x9110, 0x9111, 0x90B9, 0x0, 0x90AC, 0x0, 0x90E7, 0x9117, 0x5889, 0x9119, 0x911A, 0x911B, 0x911C, 0x911D, 0x911E, 0x911F, 0x9120, 0x9121, 0x9122, 0x9123, 0x9124, 0x0, 0x9126, 0x9093, 0x9128, 0x9129, 0x912A, 0x912B, 0x912C, 0x90D1, 0x912E, 0x912F, 0x90BB, 0x9131, 0x90F8, 0x9133, 0x90BA, 0x9135, 0x90D0, 0x0, 0x9138, 0x9139, 0x909D, 0x913B, 0x0, 0x0, 0x913E, 0x913F, 0x9140, 0x9141, 0x0, 0x9143, 0x9144, 0x9145, 0x9146, 0x9147, 0x90E6, 0x9149, 0x914A, 0x914B, 0x914C, 0x914D, 0x914E, 0x914F, 0x9150, 0x0, 0x9152, 0x9153, 0x0, 0x9155, 0x9156, 0x9157, 0x9158, 0x0, 0x915A, 0x0, 0x0, 0x0, 0x0, 0x915F, 0x9160, 0x9161, 0x9162, 0x9163, 0x9164, 0x9165, 0x0, 0x0, 0x9168, 0x9169, 0x916A, 0x0, 0x916C, 0x0, 0x916E, 0x916F, 0x0, 0x0, 0x9172, 0x9173, 0x9174, 0x9175, 0x0, 0x9177, 0x9178, 0x9179, 0x917A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9180, 0x9181, 0x9182, 0x814C, 0x9184, 0x9185, 0x9186, 0x9187, 0x0, 0x9189, 0x918A, 0x918B, 0x0, 0x918D, 0x0, 0x918F, 0x9190, 0x9191, 0x9192, 0x9193, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9199, 0x919A, 0x919B, 0x4E11, 0x919D, 0x915D, 0x919F, 0x91A0, 0x91A1, 0x91A2, 0x91A3, 0x0, 0x91A5, 0x0, 0x91A7, 0x91A8, 0x0, 0x91AA, 0x533B, 0x9171, 0x91AD, 0x91AE, 0x91AF, 0x91B0, 0x9166, 0x91B2, 0x91B3, 0x91B4, 0x91B5, 0x0, 0x91B7, 0x0, 0x91B9, 0x91BA, 0x0, 0x71D5, 0x91BD, 0x91BE, 0x0, 0x917F, 0x8845, 0x91C2, 0x917E, 0x0, 0x917D, 0x91C6, 0x91C7, 0x0, 0x91C9, 0x0, 0x91CA, 0x91CC, 0x91CD, 0x91CE, 0x91CF, 0x5398, 0x91D1, 0x0, 0x9486, 0x9487, 0x948C, 0x0, 0x948A, 0x9489, 0x948B, 0x91DA, 0x0, 0x91DC, 0x9488, 0x0, 0x0, 0x0, 0x0, 0x91E2, 0x9493, 0x9490, 0x0, 0x6263, 0x948F, 0x91E8, 0x9492, 0x91EA, 0x91EB, 0x710A, 0x91ED, 0x91EE, 0x0, 0x0, 0x91F1, 0x0, 0x91F3, 0x91F4, 0x9497, 0x0, 0x948D, 0x91F8, 0x9495, 0x0, 0x0, 0x0, 0x91FD, 0x0, 0x91FF, 0x94AF, 0x94AB, 0x9202, 0x9498, 0x94AD, 0x94A5, 0x9206, 0x9207, 0x0, 0x94A0, 0x920A, 0x0, 0x920C, 0x949D, 0x0, 0x920F, 0x94A4, 0x94A3, 0x9491, 0x0, 0x949E, 0x94AE, 0x9216, 0x9217, 0x0, 0x9219, 0x921A, 0x0, 0x921C, 0x0, 0x94A7, 0x0, 0x0, 0x0, 0x0, 0x9499, 0x9224, 0x94AC, 0x949B, 0x94AA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x922D, 0x94CC, 0x0, 0x94C8, 0x9231, 0x9232, 0x94B6, 0x94C3, 0x0, 0x9236, 0x94B4, 0x94B9, 0x94CD, 0x94B0, 0x0, 0x0, 0x94B8, 0x94C0, 0x94BF, 0x94BE, 0x0, 0x0, 0x0, 0x0, 0x5DE8, 0x94BB, 0x0, 0x94CA, 0x94C9, 0x924A, 0x5228, 0x924C, 0x94CB, 0x924E, 0x924F, 0x9250, 0x94C2, 0x9252, 0x9253, 0x9254, 0x0, 0x9256, 0x94B3, 0x0, 0x0, 0x94C6, 0x94C5, 0x0, 0x0, 0x94BA, 0x0, 0x9260, 0x9261, 0x0, 0x9263, 0x94A9, 0x9265, 0x94B2, 0x9267, 0x0, 0x0, 0x0, 0x0, 0x94BC, 0x94BD, 0x0, 0x926F, 0x9270, 0x0, 0x9272, 0x0, 0x0, 0x0, 0x94CF, 0x0, 0x94F0, 0x9279, 0x94D2, 0x94EC, 0x927C, 0x927D, 0x927E, 0x94EA, 0x94F6, 0x0, 0x9282, 0x94F3, 0x0, 0x94DC, 0x9286, 0x9287, 0x9288, 0x0, 0x928A, 0x928B, 0x928C, 0x94DA, 0x928E, 0x0, 0x0, 0x94E3, 0x0, 0x94E8, 0x9294, 0x94C1, 0x94E2, 0x9297, 0x94ED, 0x9299, 0x94EB, 0x94E6, 0x8854, 0x929D, 0x0, 0x0, 0x94D1, 0x92A1, 0x92A2, 0x94F7, 0x92A4, 0x94F1, 0x94DF, 0x92A7, 0x94F5, 0x94E5, 0x94D5, 0x94EF, 0x94D0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x710A, 0x9510, 0x92B4, 0x92B5, 0x92B6, 0x9500, 0x0, 0x0, 0x0, 0x9511, 0x9509, 0x0, 0x0, 0x0, 0x92C0, 0x94DD, 0x92C2, 0x9512, 0x92C4, 0x950C, 0x92C6, 0x94A1, 0x92C8, 0x92C9, 0x92CA, 0x92CB, 0x94E4, 0x92CD, 0x92CE, 0x94D7, 0x92D0, 0x92D1, 0x950B, 0x92D3, 0x0, 0x92D5, 0x0, 0x92D7, 0x92D8, 0x94FB, 0x0, 0x0, 0x0, 0x950A, 0x92DE, 0x9513, 0x92E0, 0x92E1, 0x0, 0x0, 0x9504, 0x0, 0x9514, 0x92E7, 0x9507, 0x94D3, 0x94FA, 0x0, 0x0, 0x0, 0x94D6, 0x9506, 0x9502, 0x94FD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x92F7, 0x952F, 0x92F9, 0x92FA, 0x9274, 0x94A2, 0x0, 0x92FE, 0x92FF, 0x9300, 0x951E, 0x9302, 0x0, 0x5F55, 0x0, 0x9516, 0x0, 0x9529, 0x9309, 0x0, 0x930B, 0x930C, 0x930D, 0x930E, 0x94D4, 0x9525, 0x0, 0x9515, 0x9313, 0x9314, 0x951F, 0x9316, 0x0, 0x9524, 0x9531, 0x94EE, 0x951B, 0x0, 0x931D, 0x931E, 0x952C, 0x952D, 0x951C, 0x94B1, 0x9323, 0x9324, 0x9325, 0x9526, 0x9327, 0x951A, 0x9520, 0x932A, 0x9521, 0x0, 0x932D, 0x9522, 0x9519, 0x0, 0x0, 0x0, 0x9530, 0x9334, 0x9335, 0x8868, 0x0, 0x94FC, 0x9339, 0x0, 0x0, 0x933C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9494, 0x9534, 0x0, 0x9349, 0x70BC, 0x9505, 0x934C, 0x9540, 0x934E, 0x934F, 0x9350, 0x9351, 0x9352, 0x0, 0x9537, 0x9355, 0x9356, 0x9357, 0x94E1, 0x9359, 0x9496, 0x953B, 0x935C, 0x0, 0x935E, 0x0, 0x953D, 0x9361, 0x0, 0x9363, 0x9538, 0x9532, 0x0, 0x9367, 0x0, 0x0, 0x936A, 0x0, 0x9539, 0x936D, 0x0, 0x0, 0x953E, 0x9371, 0x0, 0x0, 0x0, 0x952E, 0x9536, 0x9377, 0x0, 0x9379, 0x9517, 0x937B, 0x9488, 0x0, 0x949F, 0x0, 0x9380, 0x0, 0x9541, 0x9383, 0x0, 0x0, 0x0, 0x0, 0x9388, 0x9389, 0x9551, 0x0, 0x938C, 0x938D, 0x938E, 0x938F, 0x0, 0x9391, 0x9392, 0x0, 0x9555, 0x9395, 0x9501, 0x9397, 0x9549, 0x9399, 0x9524, 0x9548, 0x0, 0x939D, 0x939E, 0x939F, 0x0, 0x9543, 0x94A8, 0x84E5, 0x93A4, 0x93A5, 0x954F, 0x94E0, 0x93A8, 0x94E9, 0x953C, 0x0, 0x9550, 0x0, 0x9547, 0x93AF, 0x9552, 0x93B1, 0x954B, 0x954D, 0x93B4, 0x9553, 0x0, 0x93B7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x93C0, 0x0, 0x93C2, 0x955E, 0x93C4, 0x0, 0x0, 0x65CB, 0x94FE, 0x0, 0x93CA, 0x0, 0x9546, 0x9559, 0x93CE, 0x93CF, 0x9560, 0x955D, 0x93D2, 0x0, 0x93D4, 0x93D5, 0x93D6, 0x94FF, 0x9535, 0x93D9, 0x621A, 0x0, 0x9557, 0x9558, 0x955B, 0x94F2, 0x0, 0x955C, 0x9556, 0x93E3, 0x9542, 0x0, 0x93E6, 0x93E7, 0x933E, 0x0, 0x0, 0x0, 0x93EC, 0x0, 0x93EE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x94E7, 0x93F6, 0x9564, 0x93F8, 0x956A, 0x93FA, 0x93FB, 0x93FC, 0x9508, 0x93FE, 0x93FF, 0x9400, 0x0, 0x0, 0x94D9, 0x0, 0x0, 0x9406, 0x9407, 0x0, 0x9409, 0x940A, 0x94F4, 0x940C, 0x940D, 0x940E, 0x940F, 0x9563, 0x9411, 0x94F9, 0x9566, 0x9561, 0x9415, 0x9416, 0x0, 0x949F, 0x956B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9568, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9544, 0x9429, 0x942A, 0x954C, 0x942C, 0x0, 0x9570, 0x0, 0x9430, 0x9431, 0x956F, 0x956D, 0x0, 0x94C1, 0x956E, 0x9437, 0x94CE, 0x9439, 0x94DB, 0x943B, 0x943C, 0x943D, 0x0, 0x9571, 0x9440, 0x0, 0x0, 0x0, 0x94F8, 0x9445, 0x9446, 0x9447, 0x9448, 0x9449, 0x956C, 0x944B, 0x9554, 0x0, 0x0, 0x944F, 0x9450, 0x9274, 0x9274, 0x0, 0x0, 0x9527, 0x0, 0x9457, 0x0, 0x0, 0x0, 0x0, 0x0, 0x945D, 0x9574, 0x0, 0x94C4, 0x0, 0x9462, 0x9573, 0x5228, 0x0, 0x0, 0x0, 0x9468, 0x9469, 0x7089, 0x946B, 0x0, 0x9567, 0x946E, 0x946F, 0x94A5, 0x9575, 0x9576, 0x9473, 0x9474, 0x9475, 0x9476, 0x954A, 0x9478, 0x0, 0x0, 0x0, 0x9523, 0x94BB, 0x92AE, 0x51FF, 0x9480, 0x9562, 0x954B, 0x9483, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x957F, 0x0, 0x0, 0x957A, 0x957B, 0x957C, 0x957D, 0x0, 0x0, 0x95E8, 0x0, 0x95E9, 0x95EA, 0x0, 0x0, 0x95EB, 0x0, 0x95EC, 0x95ED, 0x0, 0x5F00, 0x95F6, 0x958D, 0x95F3, 0x95F0, 0x9590, 0x95F2, 0x95F2, 0x95F4, 0x95F5, 0x0, 0x0, 0x0, 0x95F8, 0x0, 0x0, 0x959B, 0x959C, 0x0, 0x959E, 0x959F, 0x0, 0x9602, 0x0, 0x9601, 0x5408, 0x9600, 0x0, 0x0, 0x95FA, 0x95FD, 0x0, 0x9603, 0x9606, 0x95FE, 0x95AE, 0x0, 0x95B0, 0x9605, 0x0, 0x0, 0x0, 0x95B5, 0x960A, 0x95B7, 0x0, 0x9609, 0x95BA, 0x960E, 0x960F, 0x960D, 0x9608, 0x960C, 0x95C0, 0x0, 0x0, 0x9612, 0x0, 0x95C5, 0x677F, 0x95C7, 0x95F1, 0x95C9, 0x9614, 0x9615, 0x9611, 0x9607, 0x0, 0x0, 0x9617, 0x95D1, 0x9618, 0x95FF, 0x9616, 0x9619, 0x95EF, 0x0, 0x0, 0x0, 0x7AA5, 0x95DB, 0x5173, 0x0, 0x961A, 0x95DF, 0x9613, 0x9610, 0x8F9F, 0x95E3, 0x961B, 0x95FC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x961C, 0x0, 0x961E, 0x0, 0x9620, 0x9621, 0x9622, 0x9623, 0x9624, 0x0, 0x0, 0x0, 0x9628, 0x0, 0x962A, 0x0, 0x5751, 0x962D, 0x962E, 0x5740, 0x9630, 0x9631, 0x9632, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9639, 0x963A, 0x963B, 0x963C, 0x963D, 0x0, 0x963F, 0x9640, 0x0, 0x9642, 0x9643, 0x9644, 0x0, 0x0, 0x0, 0x0, 0x0, 0x964A, 0x964B, 0x964C, 0x964D, 0x964E, 0x964F, 0x9650, 0x9651, 0x0, 0x9653, 0x9654, 0x0, 0x0, 0x0, 0x9649, 0x0, 0x0, 0x965B, 0x965C, 0x9655, 0x5347, 0x965F, 0x0, 0x9661, 0x9662, 0x9635, 0x9664, 0x0, 0x0, 0x0, 0x0, 0x0, 0x966A, 0x966B, 0x966C, 0x966D, 0x0, 0x966F, 0x9634, 0x9671, 0x9672, 0x9648, 0x9674, 0x9675, 0x9676, 0x9677, 0x9646, 0x0, 0x0, 0x0, 0x967C, 0x9633, 0x967E, 0x0, 0x9680, 0x0, 0x0, 0x9683, 0x5824, 0x9685, 0x9686, 0x9687, 0x9688, 0x9667, 0x961F, 0x968B, 0x0, 0x968D, 0x9636, 0x0, 0x0, 0x9691, 0x9692, 0x9693, 0x9694, 0x9668, 0x0, 0x9697, 0x9698, 0x9699, 0x0, 0x9645, 0x969C, 0x0, 0x969E, 0x0, 0x0, 0x96A1, 0x96A2, 0x0, 0x96A4, 0x0, 0x0, 0x96A7, 0x968F, 0x96A9, 0x9669, 0x0, 0x96AC, 0x0, 0x96AE, 0x0, 0x96B0, 0x9690, 0x0, 0x96B3, 0x9647, 0x0, 0x0, 0x0, 0x96B6, 0x96B9, 0x0, 0x53EA, 0x96BC, 0x0, 0x0, 0x96BF, 0x96C0, 0x96C1, 0x96C2, 0x96C3, 0x96C4, 0x96C5, 0x96C6, 0x96C7, 0x96C8, 0x96C9, 0x96CA, 0x96BD, 0x96CC, 0x96CD, 0x96CE, 0x0, 0x0, 0x0, 0x96D2, 0x96D3, 0x96D4, 0x96D5, 0x867D, 0x96D7, 0x96D8, 0x53CC, 0x96DA, 0x96CF, 0x6742, 0x96DD, 0x9E21, 0x96DF, 0x0, 0x96E1, 0x79BB, 0x96BE, 0x0, 0x96E5, 0x0, 0x0, 0x96E8, 0x96E9, 0x96EA, 0x0, 0x0, 0x0, 0x0, 0x96EF, 0x96F0, 0x96F1, 0x4E91, 0x0, 0x0, 0x96F5, 0x96F6, 0x96F7, 0x96F8, 0x96F9, 0x96FA, 0x7535, 0x0, 0x96FD, 0x0, 0x96FF, 0x9700, 0x0, 0x9702, 0x0, 0x9704, 0x9705, 0x9706, 0x9707, 0x9708, 0x9709, 0x0, 0x970B, 0x0, 0x970D, 0x970E, 0x970F, 0x9710, 0x6CBE, 0x9712, 0x9713, 0x0, 0x0, 0x9716, 0x0, 0x9718, 0x9719, 0x0, 0x0, 0x971C, 0x971D, 0x971E, 0x971F, 0x9720, 0x0, 0x9722, 0x9723, 0x6E9C, 0x9725, 0x9726, 0x96FE, 0x9728, 0x9729, 0x972A, 0x972B, 0x972C, 0x0, 0x972E, 0x972F, 0x9730, 0x0, 0x9732, 0x0, 0x0, 0x9735, 0x0, 0x0, 0x9738, 0x9739, 0x973A, 0x0, 0x0, 0x9701, 0x973E, 0x973F, 0x0, 0x0, 0x96F3, 0x9743, 0x972D, 0x0, 0x53C7, 0x9747, 0x7075, 0x53C6, 0x0, 0x974B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9752, 0x0, 0x0, 0x0, 0x9756, 0x0, 0x9758, 0x0, 0x9753, 0x975B, 0x9759, 0x0, 0x975E, 0x0, 0x9760, 0x9761, 0x9762, 0x0, 0x0, 0x0, 0x817C, 0x0, 0x9765, 0x9769, 0x976A, 0x0, 0x976C, 0x0, 0x976E, 0x0, 0x9770, 0x0, 0x9772, 0x9773, 0x9774, 0x0, 0x9776, 0x9777, 0x9778, 0x0, 0x977A, 0x977B, 0x977C, 0x977D, 0x977E, 0x977F, 0x9F17, 0x9781, 0x9782, 0x9783, 0x9784, 0x9785, 0x0, 0x0, 0x9788, 0x0, 0x978A, 0x978B, 0x0, 0x978D, 0x978E, 0x5DE9, 0x0, 0x0, 0x0, 0x0, 0x9794, 0x0, 0x0, 0x9797, 0x9798, 0x9799, 0x979A, 0x0, 0x979C, 0x979D, 0x979E, 0x0, 0x97A0, 0x97A1, 0x97A2, 0x97A3, 0x97A4, 0x97A5, 0x79CB, 0x0, 0x97A8, 0x0, 0x97AA, 0x97AB, 0x97AC, 0x97AD, 0x97AE, 0x0, 0x0, 0x0, 0x0, 0x97B3, 0x0, 0x0, 0x97B6, 0x97B7, 0x0, 0x97B9, 0x0, 0x97BB, 0x0, 0x0, 0x0, 0x97BF, 0x0, 0x7F30, 0x0, 0x9791, 0x97C4, 0x97C5, 0x5343, 0x97C7, 0x0, 0x97AF, 0x0, 0x97E6, 0x97E7, 0x97E8, 0x97CE, 0x97CF, 0x97D0, 0x0, 0x0, 0x97E9, 0x97D4, 0x97D5, 0x97D6, 0x97D7, 0x97D8, 0x97EA, 0x0, 0x0, 0x97EC, 0x97B4, 0x97EB, 0x97DF, 0x0, 0x97E1, 0x0, 0x97E3, 0x0, 0x97E5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x97ED, 0x0, 0x0, 0x97F0, 0x97F1, 0x0, 0x97F3, 0x0, 0x0, 0x97F6, 0x0, 0x97F8, 0x97F9, 0x97FA, 0x97F5, 0x0, 0x97FD, 0x97FE, 0x54CD, 0x9800, 0x9875, 0x9876, 0x9877, 0x9804, 0x9879, 0x987A, 0x9878, 0x987B, 0x0, 0x987C, 0x0, 0x9882, 0x980D, 0x9880, 0x9883, 0x9884, 0x987D, 0x9881, 0x987F, 0x0, 0x0, 0x9816, 0x9887, 0x9886, 0x0, 0x0, 0x981B, 0x988C, 0x981D, 0x981E, 0x0, 0x9820, 0x9889, 0x0, 0x0, 0x9890, 0x0, 0x988F, 0x9827, 0x9828, 0x9829, 0x0, 0x4FEF, 0x0, 0x5934, 0x0, 0x982F, 0x988A, 0x0, 0x988B, 0x0, 0x0, 0x9835, 0x0, 0x9894, 0x9888, 0x9893, 0x0, 0x9891, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9841, 0x0, 0x9843, 0x9844, 0x9845, 0x9897, 0x0, 0x9848, 0x9849, 0x984A, 0x0, 0x9898, 0x989D, 0x989A, 0x989C, 0x9850, 0x9851, 0x9899, 0x989B, 0x0, 0x0, 0x0, 0x9857, 0x613F, 0x98A1, 0x0, 0x98A0, 0x985C, 0x985D, 0x7C7B, 0x985F, 0x9860, 0x0, 0x989F, 0x9863, 0x9864, 0x98A2, 0x0, 0x987E, 0x0, 0x9869, 0x986A, 0x98A4, 0x0, 0x0, 0x0, 0x663E, 0x98A6, 0x9885, 0x9872, 0x989E, 0x98A7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98CE, 0x98A9, 0x0, 0x0, 0x98AC, 0x98D0, 0x98D1, 0x98D2, 0x0, 0x53F0, 0x98B2, 0x522E, 0x0, 0x0, 0x98D3, 0x0, 0x98D4, 0x0, 0x626C, 0x98D6, 0x98D5, 0x98BD, 0x98BE, 0x98BF, 0x98D7, 0x98C1, 0x98C2, 0x0, 0x98D8, 0x0, 0x98D9, 0x0, 0x0, 0x98C9, 0x0, 0x98CB, 0x98CC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98DE, 0x0, 0x0, 0x0, 0x98DF, 0x0, 0x0, 0x9965, 0x9964, 0x0, 0x9966, 0x0, 0x98E7, 0x0, 0x9968, 0x996A, 0x996B, 0x0, 0x996C, 0x0, 0x996D, 0x0, 0x0, 0x996E, 0x0, 0x9974, 0x0, 0x98F6, 0x0, 0x0, 0x98F9, 0x98FA, 0x0, 0x9972, 0x9971, 0x9970, 0x0, 0x9900, 0x0, 0x9902, 0x997A, 0x0, 0x997C, 0x0, 0x9907, 0x9908, 0x9977, 0x517B, 0x0, 0x9975, 0x0, 0x0, 0x0, 0x9910, 0x997D, 0x9981, 0x997F, 0x9914, 0x9982, 0x997E, 0x9917, 0x4F59, 0x0, 0x80B4, 0x9984, 0x0, 0x0, 0x996F, 0x991F, 0x0, 0x9985, 0x0, 0x0, 0x9924, 0x9925, 0x0, 0x9927, 0x9986, 0x9929, 0x992A, 0x992B, 0x992C, 0x992D, 0x992E, 0x992F, 0x9930, 0x7CC7, 0x9932, 0x9967, 0x0, 0x5582, 0x0, 0x0, 0x0, 0x0, 0x998E, 0x0, 0x9969, 0x9988, 0x998F, 0x998A, 0x0, 0x998C, 0x0, 0x998D, 0x0, 0x9992, 0x0, 0x9947, 0x9990, 0x9991, 0x0, 0x9988, 0x9994, 0x0, 0x994E, 0x0, 0x9950, 0x9965, 0x9976, 0x9953, 0x9954, 0x9955, 0x9956, 0x98E8, 0x9958, 0x9959, 0x0, 0x995B, 0x990D, 0x0, 0x998B, 0x995F, 0x0, 0x9961, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9996, 0x9997, 0x9998, 0x9999, 0x0, 0x0, 0x999C, 0x999D, 0x999E, 0x0, 0x0, 0x99A1, 0x0, 0x99A3, 0x0, 0x99A5, 0x99A6, 0x99A7, 0x99A8, 0x0, 0x0, 0x99AB, 0x9A6C, 0x9A6D, 0x51AF, 0x99AF, 0x99B0, 0x9A6E, 0x99B2, 0x9A70, 0x9A6F, 0x99B5, 0x0, 0x0, 0x0, 0x9A72, 0x99BA, 0x99BB, 0x0, 0x99BD, 0x0, 0x0, 0x0, 0x9A73, 0x99C2, 0x99C3, 0x0, 0x0, 0x0, 0x99C7, 0x0, 0x99C9, 0x0, 0x99CB, 0x99CC, 0x99CD, 0x99CE, 0x99CF, 0x9A7B, 0x9A7D, 0x9A79, 0x99D3, 0x9A75, 0x9A7E, 0x99D6, 0x99D7, 0x9A80, 0x9A78, 0x0, 0x9A76, 0x99DC, 0x9A7C, 0x0, 0x9A77, 0x0, 0x0, 0x9A88, 0x99E3, 0x99E4, 0x99E5, 0x0, 0x99E7, 0x0, 0x99E9, 0x99EA, 0x0, 0x99EC, 0x9A87, 0x9A73, 0x0, 0x9A83, 0x9A86, 0x0, 0x0, 0x99F4, 0x0, 0x99F6, 0x99F7, 0x9A8E, 0x99F9, 0x99FA, 0x99FB, 0x99FC, 0x99FD, 0x99FE, 0x9A8F, 0x0, 0x9A8B, 0x9A8D, 0x9A03, 0x9A04, 0x9A93, 0x9A06, 0x9A07, 0x0, 0x9A09, 0x9A0A, 0x9A0B, 0x0, 0x9A92, 0x9A91, 0x9A90, 0x0, 0x9A11, 0x0, 0x0, 0x9A14, 0x9A15, 0x9A9B, 0x0, 0x0, 0x9A97, 0x9A1A, 0x9A1B, 0x9A1C, 0x9A1D, 0x9A1E, 0x0, 0x9A20, 0x0, 0x9A22, 0x9B03, 0x9A99, 0x9A25, 0x0, 0x9A27, 0x0, 0x9A29, 0x9A2A, 0x9A9E, 0x9A2C, 0x9A98, 0x9A9D, 0x0, 0x817E, 0x9A31, 0x9A32, 0x0, 0x9A34, 0x9A35, 0x9A7A, 0x9A9A, 0x9A9F, 0x9A39, 0x9A3A, 0x0, 0x0, 0x9A3D, 0x9AA1, 0x9A3F, 0x84E6, 0x9A9C, 0x9A96, 0x9AA0, 0x9AA2, 0x9A71, 0x9A46, 0x0, 0x9A48, 0x9A49, 0x9A85, 0x0, 0x9A95, 0x9A81, 0x9A4E, 0x9AA3, 0x9A50, 0x0, 0x9A52, 0x9A53, 0x9A54, 0x9A84, 0x9A56, 0x9A8C, 0x0, 0x9A59, 0x60CA, 0x9A7F, 0x0, 0x0, 0x9A5E, 0x9AA4, 0x9A60, 0x0, 0x9A74, 0x0, 0x9AA7, 0x9AA5, 0x9AA6, 0x9A67, 0x9A68, 0x9A69, 0x9A8A, 0x9A89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9AA8, 0x0, 0x0, 0x9AAB, 0x0, 0x9AAD, 0x0, 0x9AAF, 0x9AB0, 0x9AB1, 0x0, 0x9AB3, 0x9AB4, 0x0, 0x0, 0x9AB7, 0x9AB8, 0x9AB9, 0x0, 0x9ABB, 0x9ABC, 0x0, 0x9CA0, 0x9ABF, 0x9AC0, 0x9AC1, 0x9AC2, 0x0, 0x0, 0x0, 0x9AC6, 0x9AC7, 0x0, 0x0, 0x9ACA, 0x0, 0x0, 0x9ACD, 0x0, 0x9AC5, 0x9AD0, 0x9AD1, 0x810F, 0x9AD3, 0x4F53, 0x9ACC, 0x9ACB, 0x0, 0x9AD8, 0x0, 0x0, 0x0, 0x9ADC, 0x0, 0x0, 0x9ADF, 0x0, 0x9AE1, 0x0, 0x9AE3, 0x0, 0x0, 0x9AE6, 0x9AE7, 0x0, 0x0, 0x0, 0x9AEB, 0x9AEC, 0x9AED, 0x53D1, 0x9AEF, 0x0, 0x9AF1, 0x9AF2, 0x9AF3, 0x0, 0x0, 0x9AF6, 0x9AF7, 0x0, 0x9AF9, 0x9AFA, 0x9AFB, 0x9AFC, 0x9AFD, 0x9AFE, 0x0, 0x0, 0x75AC, 0x0, 0x9B03, 0x9B04, 0x9B05, 0x677E, 0x0, 0x9B08, 0x0, 0x9B0A, 0x9B0B, 0x9B0C, 0x80E1, 0x9B0E, 0x0, 0x9B10, 0x9B11, 0x9B12, 0x0, 0x0, 0x9B15, 0x9B16, 0x9B17, 0x9B18, 0x9B19, 0x987B, 0x0, 0x0, 0x0, 0x9B1E, 0x9B1F, 0x9B20, 0x0, 0x9B13, 0x9B23, 0x9B24, 0x6597, 0x0, 0x95F9, 0x54C4, 0x960B, 0x0, 0x9B2B, 0x0, 0x0, 0x9604, 0x9B2F, 0x0, 0x90C1, 0x9B32, 0x9B33, 0x0, 0x9B35, 0x0, 0x9B37, 0x0, 0x0, 0x9B3A, 0x9B3B, 0x9B3C, 0x0, 0x9B3E, 0x9B3F, 0x0, 0x9B41, 0x9B42, 0x9B43, 0x9B44, 0x9B45, 0x9B46, 0x0, 0x9B48, 0x0, 0x9B4A, 0x9B4B, 0x9B4C, 0x9B4D, 0x9B49, 0x9B4F, 0x0, 0x9B51, 0x9B52, 0x0, 0x9B54, 0x9B55, 0x9B56, 0x0, 0x9B47, 0x9B59, 0x9C7C, 0x9C7D, 0x0, 0x0, 0x0, 0x9B5F, 0x9B60, 0x9B61, 0x0, 0x0, 0x9B64, 0x0, 0x9B66, 0x9B67, 0x9C80, 0x0, 0x0, 0x0, 0x9B6C, 0x0, 0x0, 0x9C81, 0x9B70, 0x9B71, 0x0, 0x0, 0x9C82, 0x9B75, 0x9B76, 0x9C7F, 0x0, 0x0, 0x9C84, 0x9B7B, 0x9B7C, 0x9B7D, 0x9B7E, 0x0, 0x9B80, 0x0, 0x9B82, 0x0, 0x0, 0x9B85, 0x9B86, 0x9B87, 0x9B88, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9C90, 0x9C8D, 0x9C8B, 0x9C8A, 0x0, 0x9B95, 0x0, 0x0, 0x0, 0x0, 0x9C92, 0x9B9B, 0x0, 0x0, 0x9C95, 0x0, 0x9BA0, 0x9BA1, 0x9BA2, 0x0, 0x9BA4, 0x9BA5, 0x9C96, 0x0, 0x9BA8, 0x0, 0x9C94, 0x9C9B, 0x0, 0x9C91, 0x9C9C, 0x9BAF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9BB5, 0x9CAA, 0x0, 0x9BB8, 0x9BB9, 0x0, 0x0, 0x0, 0x9BBD, 0x0, 0x9BBF, 0x9CA7, 0x9CA0, 0x0, 0x9BC3, 0x9BC4, 0x0, 0x9BC6, 0x9CA9, 0x9BC8, 0x9CA4, 0x9CA8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9BD3, 0x9CBB, 0x9CAF, 0x9CAD, 0x9C9E, 0x0, 0x9BD9, 0x9BDA, 0x9CB7, 0x9BDC, 0x0, 0x9BDE, 0x0, 0x9BE0, 0x9CB1, 0x9CB5, 0x0, 0x9CB2, 0x9BE5, 0x9BE6, 0x9CB3, 0x9CB8, 0x0, 0x9CAE, 0x9CB0, 0x9BEC, 0x0, 0x0, 0x0, 0x9CB6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9CC0, 0x9BF8, 0x0, 0x0, 0x0, 0x0, 0x9CAB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9C05, 0x9C06, 0x9C07, 0x9CBD, 0x9CC7, 0x0, 0x9C0B, 0x0, 0x9CC5, 0x9C0E, 0x0, 0x0, 0x0, 0x9CC6, 0x9CC3, 0x9C14, 0x0, 0x0, 0x9C17, 0x0, 0x0, 0x0, 0x0, 0x9CD2, 0x9C1D, 0x0, 0x0, 0x0, 0x9C21, 0x0, 0x9CA5, 0x9C24, 0x9CCF, 0x0, 0x0, 0x9CCE, 0x9CD0, 0x0, 0x9C2B, 0x9C2C, 0x9CCD, 0x0, 0x0, 0x0, 0x9CA2, 0x9CCC, 0x9CD3, 0x9C34, 0x0, 0x9C36, 0x9CA6, 0x0, 0x9CA3, 0x0, 0x9CD7, 0x9CDB, 0x9C3D, 0x9CD4, 0x9C3F, 0x9C40, 0x9C41, 0x0, 0x0, 0x9C44, 0x0, 0x9C46, 0x0, 0x9CD5, 0x9CD6, 0x9C4A, 0x9C4B, 0x9C4C, 0x9C4D, 0x9C4E, 0x0, 0x9C50, 0x0, 0x9CDF, 0x0, 0x9CDD, 0x9C55, 0x9CDC, 0x9CDE, 0x9C9F, 0x9C59, 0x0, 0x0, 0x0, 0x0, 0x9C5E, 0x9C8E, 0x9C99, 0x0, 0x9C62, 0x9CE3, 0x0, 0x0, 0x9C66, 0x9CE2, 0x9CBF, 0x0, 0x0, 0x0, 0x0, 0x9C9A, 0x9C6E, 0x0, 0x0, 0x9C71, 0x0, 0x9C73, 0x9C74, 0x9C75, 0x0, 0x9CC4, 0x9C88, 0x9C79, 0x9CA1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9E1F, 0x9CE6, 0x51EB, 0x0, 0x9E20, 0x9CEA, 0x0, 0x0, 0x9CED, 0x0, 0x0, 0x0, 0x9CF1, 0x9E24, 0x51E4, 0x9E23, 0x9CF5, 0x9E22, 0x9CF7, 0x0, 0x9CF9, 0x9CFA, 0x9CFB, 0x9CFC, 0x9CFD, 0x0, 0x9CFF, 0x9D00, 0x0, 0x0, 0x9D03, 0x9D04, 0x9D05, 0x9E29, 0x9E28, 0x9D08, 0x9E26, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9D10, 0x0, 0x9E30, 0x0, 0x9D14, 0x9E35, 0x0, 0x9D17, 0x9D18, 0x9D19, 0x0, 0x9E33, 0x0, 0x9E32, 0x9E2E, 0x9E31, 0x9D20, 0x0, 0x9D22, 0x9E2A, 0x0, 0x9D25, 0x9E2F, 0x0, 0x9E2D, 0x9D29, 0x0, 0x0, 0x0, 0x9D2D, 0x9D2E, 0x9E38, 0x9E39, 0x9D31, 0x0, 0x9D33, 0x0, 0x0, 0x9D36, 0x9D37, 0x9D38, 0x0, 0x0, 0x9E3F, 0x0, 0x9D3D, 0x9D3E, 0x9E3D, 0x9D40, 0x9D41, 0x9E3A, 0x9E3C, 0x0, 0x9D45, 0x0, 0x0, 0x0, 0x0, 0x9D4A, 0x9D4B, 0x9D4C, 0x0, 0x0, 0x9D4F, 0x0, 0x9E43, 0x9E46, 0x9E41, 0x9D54, 0x0, 0x9D56, 0x9D57, 0x9D58, 0x9D59, 0x9D5A, 0x9D5B, 0x9E48, 0x9E45, 0x0, 0x9D5F, 0x9E44, 0x9E49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9D67, 0x9D68, 0x9D69, 0x9E4C, 0x9D6B, 0x9E4F, 0x0, 0x0, 0x9E4E, 0x9D70, 0x9D71, 0x9E4A, 0x9D73, 0x9D74, 0x9D75, 0x0, 0x9E53, 0x9D78, 0x9D79, 0x0, 0x9D7B, 0x0, 0x9D7D, 0x0, 0x9D7F, 0x9D80, 0x9D81, 0x9D82, 0x0, 0x9D84, 0x9D85, 0x9D86, 0x9E2B, 0x9D88, 0x9E51, 0x9E52, 0x9D8B, 0x9D8C, 0x0, 0x0, 0x0, 0x9D90, 0x0, 0x9D92, 0x0, 0x9D94, 0x0, 0x9E59, 0x9D97, 0x9E55, 0x9D99, 0x9E57, 0x9D9B, 0x9D9C, 0x9D9D, 0x9D9E, 0x9D9F, 0x9DA0, 0x9E56, 0x9DA2, 0x9DA3, 0x9E4D, 0x0, 0x9DA6, 0x9DA7, 0x9DA8, 0x9E5C, 0x9DAA, 0x0, 0x9E27, 0x9DAD, 0x0, 0x83BA, 0x0, 0x9DB1, 0x9E5F, 0x9DB3, 0x9E64, 0x9DB5, 0x9DB6, 0x9DB7, 0x9DB8, 0x9E60, 0x9E61, 0x9E58, 0x9E63, 0x0, 0x9DBE, 0x9E5A, 0x0, 0x9E62, 0x9E5E, 0x9DC3, 0x0, 0x9DC5, 0x0, 0x9DC7, 0x9DC8, 0x0, 0x9E5D, 0x9DCB, 0x9DCC, 0x9DCD, 0x9DCE, 0x9DCF, 0x9DD0, 0x9DD1, 0x9DD2, 0x9E67, 0x0, 0x9DD5, 0x9E65, 0x9E25, 0x9DD8, 0x9E37, 0x9E68, 0x9DDB, 0x9DDC, 0x9DDD, 0x9DDE, 0x9DDF, 0x0, 0x9DE1, 0x9DE2, 0x9DE3, 0x9DE4, 0x9E36, 0x9E6A, 0x0, 0x9DE8, 0x9DE9, 0x0, 0x9E54, 0x9DEC, 0x9DED, 0x9DEE, 0x9E69, 0x71D5, 0x0, 0x9E6B, 0x9E47, 0x9E47, 0x9DF5, 0x9DF6, 0x9DF7, 0x9E6C, 0x9E70, 0x9E6D, 0x9DFB, 0x0, 0x9DFD, 0x9DFE, 0x9DFF, 0x9E00, 0x9E01, 0x9E02, 0x9E03, 0x9E04, 0x9E05, 0x9E06, 0x9E6F, 0x0, 0x9E09, 0x0, 0x9E0B, 0x0, 0x9E0D, 0x0, 0x9E72, 0x9E10, 0x9E11, 0x9E12, 0x9E13, 0x9E14, 0x9E2C, 0x0, 0x9E17, 0x0, 0x9E19, 0x9E66, 0x9E73, 0x0, 0x9E42, 0x9E3E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5364, 0x0, 0x0, 0x0, 0x54B8, 0x9E7E, 0x0, 0x78B1, 0x76D0, 0x0, 0x9E7F, 0x9E80, 0x0, 0x9E82, 0x9E83, 0x0, 0x0, 0x9E86, 0x9E87, 0x9E88, 0x9E89, 0x9E8A, 0x9E8B, 0x9E8C, 0x9E8D, 0x9E8E, 0x0, 0x0, 0x9E91, 0x9E92, 0x9E93, 0x9E94, 0x0, 0x0, 0x4E3D, 0x0, 0x9E99, 0x9E9A, 0x9E9B, 0x9E9C, 0x9E9D, 0x0, 0x9E9F, 0x9EA0, 0x9EA1, 0x0, 0x0, 0x9EA4, 0x9EA6, 0x0, 0x9EA7, 0x0, 0x9EB8, 0x0, 0x0, 0x0, 0x9EAD, 0x9EAE, 0x0, 0x9EB0, 0x0, 0x0, 0x0, 0x66F2, 0x9762, 0x9EB6, 0x9EB7, 0x0, 0x0, 0x0, 0x9EBB, 0x4E48, 0x0, 0x9EBE, 0x0, 0x9EC0, 0x0, 0x9EC2, 0x9EC4, 0x0, 0x0, 0x0, 0x0, 0x9EC8, 0x0, 0x0, 0x0, 0x9EC9, 0x9ECD, 0x9ECE, 0x9ECF, 0x9ED0, 0x9ED1, 0x0, 0x9ED3, 0x9ED4, 0x9ED5, 0x9ED6, 0x0, 0x9ED8, 0x0, 0x9EDA, 0x9EDB, 0x9EDC, 0x9EDD, 0x70B9, 0x9EDF, 0x9EE0, 0x0, 0x0, 0x0, 0x9EE4, 0x9EE5, 0x9EE6, 0x9EE7, 0x515A, 0x0, 0x0, 0x9EEB, 0x0, 0x9EED, 0x9EEE, 0x9EEF, 0x9EF0, 0x0, 0x9EEA, 0x9EF3, 0x9709, 0x9EF5, 0x9EE1, 0x9EE9, 0x0, 0x9EF9, 0x9EFA, 0x9EFB, 0x9EFC, 0x9EFE, 0x0, 0x9F0B, 0x9F00, 0x9F01, 0x0, 0x0, 0x0, 0x0, 0x9F06, 0x9CCC, 0x0, 0x9F0D, 0x9F0A, 0x0, 0x0, 0x0, 0x9F0E, 0x9F0F, 0x9F10, 0x0, 0x9F12, 0x9F13, 0x0, 0x51AC, 0x9F16, 0x0, 0x9F18, 0x9F19, 0x9F1A, 0x9F1B, 0x9F1C, 0x0, 0x9F1E, 0x0, 0x9F20, 0x0, 0x9F22, 0x9F23, 0x9F24, 0x9F25, 0x0, 0x0, 0x9F28, 0x9F29, 0x9F2A, 0x9F2B, 0x9F2C, 0x9F2D, 0x9F2E, 0x9F2F, 0x9F30, 0x9F31, 0x9F32, 0x9F33, 0x9F39, 0x9F35, 0x9F36, 0x9F37, 0x9F38, 0x0, 0x0, 0x9F3B, 0x0, 0x9F3D, 0x9F3E, 0x0, 0x9F40, 0x9F41, 0x9F42, 0x9F43, 0x0, 0x0, 0x9F46, 0x9F44, 0x9F48, 0x9F49, 0x9F50, 0x658B, 0x9F4C, 0x9F4D, 0x8D4D, 0x9F51, 0x0, 0x0, 0x9F7F, 0x0, 0x9F80, 0x9F81, 0x9F56, 0x9F82, 0x9F58, 0x9F85, 0x0, 0x9F5B, 0x9F87, 0x9F5D, 0x9F5E, 0x9F83, 0x9F86, 0x9F84, 0x0, 0x51FA, 0x9F64, 0x9F65, 0x9F88, 0x556E, 0x0, 0x0, 0x9F8A, 0x9F6B, 0x9F89, 0x0, 0x9F6E, 0x9F6F, 0x9F70, 0x9F71, 0x9F8B, 0x0, 0x9F74, 0x9F75, 0x816D, 0x9F8C, 0x9F78, 0x9F79, 0x9F7A, 0x9F7B, 0x0, 0x0, 0x9F7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9F99, 0x0, 0x0, 0x5E9E, 0x9F91, 0x9F92, 0x0, 0x9F9A, 0x9F9B, 0x0, 0x0, 0x9F98, 0x0, 0x0, 0x0, 0x9F9F, 0x0, 0x0, 0x0, 0x9FA0, 0x0, 0x9FA2, 0x0, 0x9FA4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);

function DoFixText(delta, theText) {
    GetTargetControl();
    if (target.charAt(0) == "#") {
        tempTgt = target.substr(1);
        eval("tempText = window.parent.document.getElementById('" + tempTgt + "').value;")
    } else {
        eval("tempText = parent.document." + target + ".value;")
    }
    if (delta > 0) {
        if (uctsc == 1) {
            var ptr = theText.charCodeAt(0);
            var index;
            index = (((ptr >> 8) & 0xff) - 0x4e) * 256 + (ptr & 0xff);
            if (scdata[index]) {
                ptr = scdata[index]
            }
            theText = String.fromCharCode(ptr)
        }
        if (target.charAt(0) == "#") {
            tempTgt = target.substr(1);
            eval("window.parent.document.getElementById('" + tempTgt + "').value = tempText + theText;");
            var obj = eval("window.parent.document.getElementById('" + tempTgt + "')");
            if (IE4) {} else {
                obj.setSelectionRange(0, obj.value.length);
                obj.focus()
            }
        } else {
            eval("window.parent.document." + target + ".value = tempText + theText;");
            var obj = eval("window.parent.document." + target);
            if (IE4) {} else {
                obj.setSelectionRange(0, obj.value.length);
                obj.focus()
            }
        }
        rawText = "";
        if (flag == 0) DoRedraw()
    } else {
        if (delta == -1) {
            if ((tempText.charCodeAt(tempText.length - 1) == 10) || (tempText.charCodeAt(tempText.length - 1) == 13)) {
                if ((tempText.charCodeAt(tempText.length - 1) == 10) || (tempText.charCodeAt(tempText.length - 1) == 13)) {
                    delta = -2
                }
            }
        }
        if (target.charAt(0) == "#") {
            tempTgt = target.substr(1);
            eval("window.parent.document.getElementById('" + tempTgt + "').value = tempText.substr(0, tempText.length + delta * (spacechar.length));");
            var obj = eval("window.parent.document.getElementById('" + tempTgt + "')");
            if (IE4) {
                var txt = obj.createTextRange();
                txt.moveStart('character', obj.value.length);
                txt.collapse(true);
                txt.select()
            } else {
                obj.setSelectionRange(0, obj.value.length);
                obj.focus()
            }
        } else {
            eval("parent.document." + target + ".value = tempText.substr(0, tempText.length + delta * (spacechar.length));");
            var obj = eval("window.parent.document." + target);
            if (IE4) {
                var txt = obj.createTextRange();
                txt.moveStart('character', obj.value.length);
                txt.collapse(true);
                txt.select()
            } else {
                obj.setSelectionRange(0, obj.value.length);
                obj.focus()
            }
        }
    }
    if (NS4) {
        if (bVer >= 5) {
            eval('document.eventform.eventcontrol.focus()')
        } else {
            eval('document.layers[' + '"q9event"' + '].document.eventform.eventcontrol.focus()')
        }
    }
    rawText = "";
    Q9StrokeNextPageMode = 0;
    Q9StrokeDifficultCharacterMode = 0;
    Q9StrokeNonFiveStrokeMode = 0;
    klookUpModeNextLoopBackIndex = 0;
    PreviousKeyCode = "";
    selectCharMode = 0
}

function DecodeDigit(theDigit) {
    theDigitValue = theDigit.charCodeAt(0);
    return (theDigitValue - ((theDigitValue < 97) ? 65 : (97 - 26)))
}

function GetTextIndex(theIndex) {
    theResult = (theIndex == 0) ? 0 : DecodeDigit(q9idx.charAt(theIndex * 3)) * 52 * 52 + DecodeDigit(q9idx.charAt(theIndex * 3 + 1)) * 52 + DecodeDigit(q9idx.charAt(theIndex * 3 + 2));
    return (theResult * (spacechar.length))
}

function GetRelateIndex(theIndex) {
    theResult = (theIndex == 0) ? 0 : DecodeDigit(q9relidx.charAt(theIndex * 3)) * 52 * 52 + DecodeDigit(q9relidx.charAt(theIndex * 3 + 1)) * 52 + DecodeDigit(q9relidx.charAt(theIndex * 3 + 2));
    return (theResult * (spacechar.length))
}

function GetPinYinKey(theIndex, ywIndex) {
    var mta;
    var mtb;
    var partaValue, partbValue, theValue, pinyinStartCode;
    pinyinStartCode = 0;
    mta = "BAAAAAAAAAAACADEFAGAAAHAIJKALAAAMANOPAQAAARASTUAVAAAWAXYZAaAAAbAcdeAfAAAAAAAAAAAAAgAhijAkAAAlAmnoApA";
    mtb = "BAAACDEAFGHAAAAAAAAAIJKLMNOPQRSAAAAAAAAATAAAAUVAAAWAAAXYAAZAabcdefgAhijAAAAAAAAAkAAAlmAAnop";
    partaValue = theIndex.toString().charAt(0) * 10 + theIndex.toString().charAt(3) * 1;
    partbValue = theIndex.toString().charAt(1) * 10 + theIndex.toString().charAt(2) * 1;
    if ((partaValue != 0) || ((partbValue != 10) && (partbValue != 30) && (partbValue != 70) && (partbValue != 90))) {
        if (ywIndex) {
            partaValue = partaValue + ywIndex
        } else {
            partaValue = partaValue + 5
        }
    }
    partaValue = DecodeDigit(mta.charAt(partaValue));
    partbValue = DecodeDigit(mtb.charAt(partbValue));
    if (partaValue > 0) theValue = (partaValue - 1) * 0x29 + partbValue;
    else theValue = 0;
    if (theValue > pinyinStartCode) theValue = theValue - pinyinStartCode;
    else theValue = 0;
    if (theValue == 0) theValue = 29;
    return theValue
}

function GetChuYinKey(theIndex) {
    var mta;
    var mtb;
    var partaValue, partbValue, theValue, pinyinStartCode;
    pinyinStartCode = 0;
    mta = "AABACDEAFAAAGAHIJAKAAALAMNOAPAAAQARSTAUAAAVAWXYAZAAAaAbcdAeAAAfAghiAjAAAkAlmnAoAAApAqrsAtAAAuAvwxAyA";
    mtb = "BCDEFGHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIJKLMNOPQRSTUVWAXYZAabAcAAdAAe";
    partaValue = theIndex.toString().charAt(0) * 10 + theIndex.toString().charAt(3) * 1;
    partbValue = theIndex.toString().charAt(1) * 10 + theIndex.toString().charAt(2) * 1;
    partaValue = partaValue + 5;
    partaValue = DecodeDigit(mta.charAt(partaValue));
    partbValue = DecodeDigit(mtb.charAt(partbValue));
    if (partaValue > 0) theValue = (partaValue - 1) * 0x1E + partbValue;
    else theValue = 0;
    if (theValue > pinyinStartCode) theValue = theValue - pinyinStartCode;
    else theValue = 0;
    return theValue
}

function DoDictLookUp(theKey, ywIndex) {
    var temp2, temp3;
    if (Q9StrokeIME) {
        if (Q9StrokeDifficultCharacterMode == 0) {
            theKey = reverse(theKey)
        }
        switch (theKey) {
            case "17":
                theKey = "1110";
                rawText = theKey;
                break;
            case "18":
                theKey = "1120";
                rawText = theKey;
                break;
            case "19":
                theKey = "1130";
                rawText = theKey;
                break;
            case "16":
                theKey = "1140";
                rawText = theKey;
                break;
            case "27":
                theKey = "1150";
                rawText = theKey;
                break;
            case "28":
                theKey = "1160";
                rawText = theKey;
                break;
            case "29":
                theKey = "1170";
                rawText = theKey;
                break;
            case "26":
                theKey = "1180";
                rawText = theKey;
                break;
            case "37":
                theKey = "1190";
                rawText = theKey;
                break;
            case "38":
                theKey = "1200";
                rawText = theKey;
                break;
            case "39":
                theKey = "1210";
                rawText = theKey;
                break;
            case "36":
                theKey = "1220";
                rawText = theKey;
                break;
            case "47":
                theKey = "1230";
                rawText = theKey;
                break;
            case "48":
                theKey = "1240";
                rawText = theKey;
                break;
            case "49":
                theKey = "1250";
                rawText = theKey;
                break;
            case "46":
                theKey = "1260";
                rawText = theKey;
                break;
            case "57":
                theKey = "1270";
                rawText = theKey;
                break;
            case "58":
                theKey = "1280";
                rawText = theKey;
                break;
            case "59":
                theKey = "1290";
                rawText = theKey;
                break;
            case "56":
                theKey = "1300";
                rawText = theKey;
                break
        }
    }
    if (spacechar.length == 2) {
        kLevelSeparator = ".."
    } else {
        kLevelSeparator = "."
    }
    if (PYIME) {
        theKey = GetPinYinKey(theKey, ywIndex)
    } else if (CYIME) {
        theKey = GetChuYinKey(theKey)
    }
    if (Q9StrokeIME) {
        temp2 = GetTextIndex(theKey * 1);
        if (theKey == '2' || theKey == '3' || theKey == '4' || theKey == '5' || theKey == '6') {
            temp2 = temp2 + 4 * (theKey - 1)
        } else if (theKey == '1') {} else {
            temp2 = temp2 + 20
        }
        temp3 = GetTextIndex(theKey * 1 + 1);
        if (theKey == '1' || theKey == '2' || theKey == '3' || theKey == '4' || theKey == '5') {
            temp3 = temp3 + 4 * theKey
        } else if (theKey == '6') {
            temp3 = temp3 + 4 * (theKey - 1)
        } else {
            temp3 = temp3 + 20
        }
        allSeekText = q9data.substring(temp2, temp3);
        separatorPos = allSeekText.indexOf(kLevelSeparator);
        return (separatorPos >= 0) ? allSeekText.substr(0, separatorPos) : allSeekText
    } else {
        allSeekText = q9data.substring(GetTextIndex(theKey * 1), GetTextIndex(theKey * 1 + 1));
        separatorPos = allSeekText.indexOf(kLevelSeparator);
        return (separatorPos >= 0) ? allSeekText.substr(0, separatorPos) : allSeekText
    }
}

function FocusWindow() {
    clearTimeout(timerID);
    timerID = 0
}

function MonitorOpener() {
    clearTimeout(monitorTimer);
    monitorTimer = 0;
    closeWin = 0;
    if (window.opener.closed) {
        closeWin = 1
    } else if (("" + window.opener.q9TargetWin) == "undefined") {
        closeWin = 1
    } else if (("" + window.opener.q9TargetWin) != q9TargetWin) {
        closeWin = 1
    } else {
        q9TargetWin = window.opener.q9TargetWin
    }
    if (closeWin == 1) {
        window.close()
    } else {}
}

function reverse(strkey) {
    newkey = "";
    strkey = "" + strkey;
    for (i = 0; i < strkey.length; i++) {
        if (strkey.substring(i, i + 1) >= 1 && strkey.substring(i, i + 1) <= 3) {
            newkey = "" + newkey + (strkey.substring(i, i + 1) * 1 + 6)
        } else if (strkey.substring(i, i + 1) >= 7 && strkey.substring(i, i + 1) <= 9) {
            newkey = "" + newkey + (strkey.substring(i, i + 1) * 1 - 6)
        } else {
            newkey = "" + newkey + strkey.substring(i, i + 1)
        }
    }
    return newkey
}

function setuctsc() {
    uctsc = 1 - uctsc;
    var aa = document.getElementsByTagName('input');
    for (var i = 0; i < aa.length; i++) {
        if (aa[i].type == "checkbox") {
            aa[i].checked = uctsc
        }
    }
}